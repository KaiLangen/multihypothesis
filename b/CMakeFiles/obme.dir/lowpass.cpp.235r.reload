
;; Function void lowpassFilter(imgpel*, imgpel*, int, int, int) (_Z13lowpassFilterPcS_iii, funcdef_no=0, decl_uid=2339, cgraph_uid=0, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 11:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=137 from oldreg=104, assigning class GENERAL_REGS to r137
   11: {r137:SI=r137:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  140: r137:SI=r103:SI
    Inserting insn reload after:
  141: r104:SI=r137:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 12
	 Choosing alt 0 in insn 12:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 16:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =rm  (1) 0  (2) re {*subsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) 0  (2) rm {*subsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) r  (1) 0  (2) rm {*subsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 59
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 78:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=138 from oldreg=90, assigning class GENERAL_REGS to r138
   78: {r138:SI=r138:SI*[frame:DI-0x38];clobber flags:CC;}
      REG_DEAD r128:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  142: r138:SI=r128:SI
    Inserting insn reload after:
  143: r90:SI=r138:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 80
	 Choosing alt 0 in insn 80:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 83
	 Choosing alt 0 in insn 83:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 84:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) qm {extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            alt=1,overall=12,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 86:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 87:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 90:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 96:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 103:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=139 from oldreg=96, assigning class GENERAL_REGS to r139
  103: {r139:SI=r139:SI*[frame:DI-0x38];clobber flags:CC;}
      REG_DEAD r131:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  144: r139:SI=r131:SI
    Inserting insn reload after:
  145: r96:SI=r139:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 105
	 Choosing alt 0 in insn 105:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =r  (1) g {*movsi_internal}
            1 Early clobber: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =a  (1) =&d  (2) 0  (3) rm {*divmodsi4}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 113:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 114:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 120:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 20
EBB 19

********** Pseudo live ranges #1: **********

  BB 19
  BB 20
   Insn 138: point = 0
  BB 3
   Insn 27: point = 0
   Insn 26: point = 0
   Insn 25: point = 1
  BB 18
   Insn 134: point = 2
   Insn 120: point = 2
  BB 5
   Insn 33: point = 2
   Insn 32: point = 2
   Insn 31: point = 3
  BB 17
   Insn 132: point = 4
   Insn 114: point = 4
   Insn 113: point = 4
   Insn 112: point = 5
   Insn 111: point = 7
   Insn 110: point = 9
   Insn 109: point = 11
   Insn 108: point = 12
   Insn 107: point = 14
   Insn 106: point = 15
   Insn 105: point = 17
   Insn 104: point = 19
   Insn 145: point = 20
	Hard reg 1 is preferable by r139 with profit 1
   Insn 103: point = 22
   Insn 144: point = 22
	Hard reg 1 is preferable by r139 with profit 1
	Hard reg 0 is preferable by r139 with profit 1
   Insn 102: point = 24
  BB 7
   Insn 48: point = 25
   Insn 47: point = 25
   Insn 46: point = 26
   Insn 45: point = 28
   Insn 44: point = 29
  BB 16
   Insn 130: point = 30
   Insn 96: point = 30
  BB 9
   Insn 61: point = 30
   Insn 60: point = 30
   Insn 59: point = 31
   Insn 58: point = 33
   Insn 57: point = 34
  BB 15
   Insn 128: point = 35
   Insn 90: point = 35
  BB 14
   Insn 87: point = 35
   Insn 86: point = 35
   Insn 85: point = 36
   Insn 84: point = 38
   Insn 83: point = 40
   Insn 82: point = 42
   Insn 81: point = 43
   Insn 80: point = 45
   Insn 79: point = 47
   Insn 143: point = 48
	Hard reg 1 is preferable by r138 with profit 1
   Insn 78: point = 50
   Insn 142: point = 50
	Hard reg 1 is preferable by r138 with profit 1
	Hard reg 0 is preferable by r138 with profit 1
   Insn 77: point = 52
  BB 13
   Insn 75: point = 53
   Insn 74: point = 53
   Insn 73: point = 54
  BB 12
   Insn 71: point = 55
   Insn 70: point = 55
  BB 11
   Insn 68: point = 55
   Insn 67: point = 55
   Insn 66: point = 56
  BB 10
   Insn 64: point = 57
   Insn 63: point = 57
  BB 8
   Insn 55: point = 57
   Insn 54: point = 58
   Insn 53: point = 60
  BB 6
   Insn 42: point = 61
   Insn 41: point = 62
   Insn 40: point = 64
   Insn 36: point = 65
   Insn 35: point = 65
  BB 4
   Insn 29: point = 65
  BB 2
   Insn 23: point = 65
   Insn 22: point = 65
   Insn 21: point = 66
   Insn 20: point = 68
   Insn 16: point = 69
   Insn 15: point = 71
   Insn 14: point = 72
   Insn 13: point = 73
   Insn 12: point = 75
   Insn 141: point = 77
	Hard reg 1 is preferable by r137 with profit 1
   Insn 11: point = 79
   Insn 140: point = 79
   Insn 10: point = 80
   Insn 6: point = 81
   Insn 5: point = 81
   Insn 4: point = 81
   Insn 3: point = 81
   Insn 2: point = 81
 r87: [67..69]
 r88: [25..26]
 r89: [30..31]
 r90: [46..48]
 r91: [44..45]
 r92: [41..43]
 r93: [39..40]
 r94: [37..38]
 r95: [35..36]
 r96: [18..20]
 r97: [16..17]
 r98: [13..15]
 r99: [4..12]
 r100: [6..7]
 r101: [4..5]
 r103: [76..80]
 r104: [76..77]
 r105: [74..75]
 r106: [72..73]
 r107: [70..71]
 r110: [65..66]
 r111: [67..68]
 r112: [0..1]
 r113: [2..3]
 r116: [61..62]
 r117: [63..64]
 r118: [27..29]
 r119: [27..28]
 r122: [57..58]
 r123: [59..60]
 r124: [32..34]
 r125: [32..33]
 r126: [55..56]
 r127: [53..54]
 r128: [51..52]
 r129: [46..47]
 r130: [41..42]
 r131: [23..24]
 r132: [18..19]
 r133: [13..14]
 r134: [8..9]
 r135: [9..10]
 r136: [10..11]
 r137: [78..79]
 r138: [49..50]
 r139: [21..22]
Compressing live ranges: from 81 to 72 - 88%
Ranges after the compression:
 r87: [60..61]
 r88: [22..23]
 r89: [26..27]
 r90: [40..41]
 r91: [38..39]
 r92: [36..37]
 r93: [34..35]
 r94: [32..33]
 r95: [30..31]
 r96: [16..17]
 r97: [14..15]
 r98: [12..13]
 r99: [4..11]
 r100: [6..7]
 r101: [4..5]
 r103: [68..71]
 r104: [68..69]
 r105: [66..67]
 r106: [64..65]
 r107: [62..63]
 r110: [58..59]
 r111: [60..61]
 r112: [0..1]
 r113: [2..3]
 r116: [54..55]
 r117: [56..57]
 r118: [24..25]
 r119: [24..25]
 r122: [50..51]
 r123: [52..53]
 r124: [28..29]
 r125: [28..29]
 r126: [48..49]
 r127: [46..47]
 r128: [44..45]
 r129: [40..41]
 r130: [36..37]
 r131: [20..21]
 r132: [16..17]
 r133: [12..13]
 r134: [8..9]
 r135: [9..10]
 r136: [10..11]
 r137: [70..71]
 r138: [42..43]
 r139: [18..19]

********** Assignment #1: **********

	 Assigning to 137 (cl=GENERAL_REGS, orig=104, freq=3, tfirst=137, tfreq=3)...
	   Assign 1 to reload r137 (freq=3)
	 Assigning to 138 (cl=GENERAL_REGS, orig=90, freq=3, tfirst=138, tfreq=3)...
	   Assign 0 to reload r138 (freq=3)
	 Assigning to 139 (cl=GENERAL_REGS, orig=96, freq=3, tfirst=139, tfreq=3)...
	   Assign 0 to reload r139 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 16
changing reg in insn 21
changing reg in insn 21
changing reg in insn 46
changing reg in insn 47
changing reg in insn 59
changing reg in insn 60
changing reg in insn 80
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 105
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 108
changing reg in insn 108
changing reg in insn 108
changing reg in insn 113
changing reg in insn 111
changing reg in insn 112
changing reg in insn 113
changing reg in insn 10
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 21
changing reg in insn 22
changing reg in insn 20
changing reg in insn 21
changing reg in insn 25
changing reg in insn 26
changing reg in insn 31
changing reg in insn 32
changing reg in insn 41
changing reg in insn 42
changing reg in insn 40
changing reg in insn 41
changing reg in insn 44
changing reg in insn 45
changing reg in insn 54
changing reg in insn 55
changing reg in insn 53
changing reg in insn 54
changing reg in insn 57
changing reg in insn 58
changing reg in insn 66
changing reg in insn 67
changing reg in insn 73
changing reg in insn 74
changing reg in insn 77
changing reg in insn 79
changing reg in insn 82
changing reg in insn 102
changing reg in insn 104
changing reg in insn 107
changing reg in insn 108
changing reg in insn 110
changing reg in insn 111
changing reg in insn 110
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
deleting insn with uid = 141.
deleting insn with uid = 142.
deleting insn with uid = 144.
deleting insn with uid = 111.
starting the processing of deferred insns
ending the processing of deferred insns


void lowpassFilter(imgpel*, imgpel*, int, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 17[flags] 37[r8]
;;  ref usage 	r0={35d,36u} r1={11d,10u,5e} r2={2d,2u} r4={1d,1u} r5={1d,1u} r6={1d,79u} r7={1d,20u} r17={30d,8u} r20={1d,1u,14e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d,1u} r38={1d} 
;;    total ref usage 271{93d,159u,19e} in 85{85 regular + 0 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 17 [flags] 87 103 104 105 106 107 110 111
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 src+0 S8 A64])
        (reg:DI 5 di [ src ])) /home/kai/git_repos/obme/lowpass.cpp:6 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 dst+0 S8 A64])
        (reg:DI 4 si [ dst ])) /home/kai/git_repos/obme/lowpass.cpp:6 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 boxSize+0 S4 A32])
        (reg:SI 1 dx [ boxSize ])) /home/kai/git_repos/obme/lowpass.cpp:6 90 {*movsi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 width+0 S4 A32])
        (reg:SI 2 cx [ width ])) /home/kai/git_repos/obme/lowpass.cpp:6 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 height+0 S4 A32])
        (reg:SI 37 r8 [ height ])) /home/kai/git_repos/obme/lowpass.cpp:6 90 {*movsi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 140 2 (set (reg:SI 0 ax [103])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 boxSize+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:7 90 {*movsi_internal}
     (nil))
(insn 140 10 11 2 (set (reg:SI 1 dx [104])
        (reg:SI 0 ax [103])) /home/kai/git_repos/obme/lowpass.cpp:7 90 {*movsi_internal}
     (nil))
(insn 11 140 12 2 (parallel [
            (set (reg:SI 1 dx [104])
                (lshiftrt:SI (reg:SI 1 dx [104])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:7 544 {*lshrsi3_1}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg:SI 0 ax [105])
                (plus:SI (reg:SI 0 ax [103])
                    (reg:SI 1 dx [104])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:7 217 {*addsi_1}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg:SI 0 ax [106])
                (ashiftrt:SI (reg:SI 0 ax [105])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:7 545 {*ashrsi3_1}
     (nil))
(insn 14 13 15 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 left+0 S4 A32])
        (reg:SI 0 ax [106])) /home/kai/git_repos/obme/lowpass.cpp:7 90 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:SI 0 ax [107])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 left+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:8 90 {*movsi_internal}
     (nil))
(insn 16 15 20 2 (parallel [
            (set (reg:SI 1 dx [orig:87 D.2421 ] [87])
                (plus:SI (reg:SI 0 ax [107])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:8 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 left+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 20 16 21 2 (set (reg:SI 0 ax [111])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 boxSize+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:8 90 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (parallel [
            (set (reg:SI 0 ax [110])
                (minus:SI (reg:SI 0 ax [111])
                    (reg:SI 1 dx [orig:87 D.2421 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:8 260 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -52 [0xffffffffffffffcc])) [0 boxSize+0 S4 A32])
            (reg:SI 1 dx [orig:87 D.2421 ] [87]))
        (nil)))
(insn 22 21 23 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 right+0 S4 A32])
        (reg:SI 0 ax [110])) /home/kai/git_repos/obme/lowpass.cpp:8 90 {*movsi_internal}
     (nil))
(insn 23 22 121 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 y+0 S4 A32])
        (const_int 0 [0])) /home/kai/git_repos/obme/lowpass.cpp:10 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              18 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 112
(code_label 121 23 24 3 10 "" [1 uses])
(note 24 121 25 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 3 (set (reg:SI 0 ax [112])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 y+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:10 90 {*movsi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [112])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -60 [0xffffffffffffffc4])) [0 height+0 S4 A32]))) /home/kai/git_repos/obme/lowpass.cpp:10 7 {*cmpsi_1}
     (nil))
(jump_insn 27 26 28 3 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 137)
            (pc))) /home/kai/git_repos/obme/lowpass.cpp:10 612 {*jcc_1}
     (nil)
 -> 137)
;;  succ:       20
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 28 27 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 115 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 x+0 S4 A32])
        (const_int 0 [0])) /home/kai/git_repos/obme/lowpass.cpp:11 90 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              17 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 113
(code_label 115 29 30 5 9 "" [1 uses])
(note 30 115 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 5 (set (reg:SI 0 ax [113])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 x+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:11 90 {*movsi_internal}
     (nil))
(insn 32 31 33 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [113])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [0 width+0 S4 A32]))) /home/kai/git_repos/obme/lowpass.cpp:11 7 {*cmpsi_1}
     (nil))
(jump_insn 33 32 34 5 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 118)
            (pc))) /home/kai/git_repos/obme/lowpass.cpp:11 612 {*jcc_1}
     (nil)
 -> 118)
;;  succ:       18
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 116 117
(note 34 33 35 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 sum+0 S4 A32])
        (const_int 0 [0])) /home/kai/git_repos/obme/lowpass.cpp:12 90 {*movsi_internal}
     (nil))
(insn 36 35 40 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 total+0 S4 A32])
        (const_int 0 [0])) /home/kai/git_repos/obme/lowpass.cpp:13 90 {*movsi_internal}
     (nil))
(insn 40 36 41 6 (set (reg:SI 0 ax [117])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 y+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:16 90 {*movsi_internal}
     (nil))
(insn 41 40 42 6 (parallel [
            (set (reg:SI 0 ax [116])
                (minus:SI (reg:SI 0 ax [117])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 left+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:16 260 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 y+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 left+0 S4 A32]))
        (nil)))
(insn 42 41 97 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
        (reg:SI 0 ax [116])) /home/kai/git_repos/obme/lowpass.cpp:16 90 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              16 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 118 119
(code_label 97 42 43 7 8 "" [1 uses])
(note 43 97 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 7 (set (reg:SI 1 dx [118])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 y+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:16 90 {*movsi_internal}
     (nil))
(insn 45 44 46 7 (set (reg:SI 0 ax [119])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 right+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:16 90 {*movsi_internal}
     (nil))
(insn 46 45 47 7 (parallel [
            (set (reg:SI 0 ax [orig:88 D.2421 ] [88])
                (plus:SI (reg:SI 0 ax [119])
                    (reg:SI 1 dx [118])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:16 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 y+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 right+0 S4 A32]))
        (nil)))
(insn 47 46 48 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:88 D.2421 ] [88])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32]))) /home/kai/git_repos/obme/lowpass.cpp:16 7 {*cmpsi_1}
     (nil))
(jump_insn 48 47 49 7 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 100)
            (pc))) /home/kai/git_repos/obme/lowpass.cpp:16 612 {*jcc_1}
     (nil)
 -> 100)
;;  succ:       17
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 122 123
(note 49 48 53 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 53 49 54 8 (set (reg:SI 0 ax [123])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 x+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:17 90 {*movsi_internal}
     (nil))
(insn 54 53 55 8 (parallel [
            (set (reg:SI 0 ax [122])
                (minus:SI (reg:SI 0 ax [123])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 left+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:17 260 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 x+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 left+0 S4 A32]))
        (nil)))
(insn 55 54 91 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (reg:SI 0 ax [122])) /home/kai/git_repos/obme/lowpass.cpp:17 90 {*movsi_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              15 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 124 125
(code_label 91 55 56 9 7 "" [1 uses])
(note 56 91 57 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 58 9 (set (reg:SI 1 dx [124])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 x+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:17 90 {*movsi_internal}
     (nil))
(insn 58 57 59 9 (set (reg:SI 0 ax [125])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 right+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:17 90 {*movsi_internal}
     (nil))
(insn 59 58 60 9 (parallel [
            (set (reg:SI 0 ax [orig:89 D.2421 ] [89])
                (plus:SI (reg:SI 0 ax [125])
                    (reg:SI 1 dx [124])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:17 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 x+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 right+0 S4 A32]))
        (nil)))
(insn 60 59 61 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:89 D.2421 ] [89])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32]))) /home/kai/git_repos/obme/lowpass.cpp:17 7 {*cmpsi_1}
     (nil))
(jump_insn 61 60 62 9 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 94)
            (pc))) /home/kai/git_repos/obme/lowpass.cpp:17 612 {*jcc_1}
     (nil)
 -> 94)
;;  succ:       16
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 62 61 63 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 10 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int 0 [0]))) /home/kai/git_repos/obme/lowpass.cpp:18 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 64 63 65 10 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 88)
            (pc))) /home/kai/git_repos/obme/lowpass.cpp:18 612 {*jcc_1}
     (nil)
 -> 88)
;;  succ:       11 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 126
(note 65 64 66 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 11 (set (reg:SI 0 ax [126])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:18 90 {*movsi_internal}
     (nil))
(insn 67 66 68 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [126])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [0 width+0 S4 A32]))) /home/kai/git_repos/obme/lowpass.cpp:18 7 {*cmpsi_1}
     (nil))
(jump_insn 68 67 69 11 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 88)
            (pc))) /home/kai/git_repos/obme/lowpass.cpp:18 612 {*jcc_1}
     (nil)
 -> 88)
;;  succ:       12 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 69 68 70 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 71 12 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
            (const_int 0 [0]))) /home/kai/git_repos/obme/lowpass.cpp:18 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 71 70 72 12 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 88)
            (pc))) /home/kai/git_repos/obme/lowpass.cpp:18 612 {*jcc_1}
     (nil)
 -> 88)
;;  succ:       13 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 127
(note 72 71 73 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 74 13 (set (reg:SI 0 ax [127])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:19 90 {*movsi_internal}
     (nil))
(insn 74 73 75 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [127])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -60 [0xffffffffffffffc4])) [0 height+0 S4 A32]))) /home/kai/git_repos/obme/lowpass.cpp:19 7 {*cmpsi_1}
     (nil))
(jump_insn 75 74 76 13 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 88)
            (pc))) /home/kai/git_repos/obme/lowpass.cpp:19 612 {*jcc_1}
     (nil)
 -> 88)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 93 94 95 128 129 130
(note 76 75 77 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 14 (set (reg:SI 0 ax [128])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:20 90 {*movsi_internal}
     (nil))
(insn 78 77 143 14 (parallel [
            (set (reg:SI 0 ax [orig:90 D.2421 ] [90])
                (mult:SI (reg:SI 0 ax [orig:90 D.2421 ] [90])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -56 [0xffffffffffffffc8])) [0 width+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:20 305 {*mulsi3_1}
     (nil))
(insn 143 78 79 14 (set (reg:SI 1 dx [orig:90 D.2421 ] [90])
        (reg:SI 0 ax [orig:90 D.2421 ] [90])) /home/kai/git_repos/obme/lowpass.cpp:20 90 {*movsi_internal}
     (nil))
(insn 79 143 80 14 (set (reg:SI 0 ax [129])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:20 90 {*movsi_internal}
     (nil))
(insn 80 79 81 14 (parallel [
            (set (reg:SI 0 ax [orig:91 D.2421 ] [91])
                (plus:SI (reg:SI 0 ax [129])
                    (reg:SI 1 dx [orig:90 D.2421 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:20 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:90 D.2421 ] [90])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32]))
        (nil)))
(insn 81 80 82 14 (set (reg:DI 1 dx [orig:92 D.2422 ] [92])
        (sign_extend:DI (reg:SI 0 ax [orig:91 D.2421 ] [91]))) /home/kai/git_repos/obme/lowpass.cpp:20 142 {*extendsidi2_rex64}
     (nil))
(insn 82 81 83 14 (set (reg/f:DI 0 ax [130])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 src+0 S8 A64])) /home/kai/git_repos/obme/lowpass.cpp:20 89 {*movdi_internal}
     (nil))
(insn 83 82 84 14 (parallel [
            (set (reg/f:DI 0 ax [orig:93 D.2423 ] [93])
                (plus:DI (reg/f:DI 0 ax [130])
                    (reg:DI 1 dx [orig:92 D.2422 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:20 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 src+0 S8 A64])
            (reg:DI 1 dx [orig:92 D.2422 ] [92]))
        (nil)))
(insn 84 83 85 14 (set (reg:QI 0 ax [orig:94 D.2424 ] [94])
        (mem:QI (reg/f:DI 0 ax [orig:93 D.2423 ] [93]) [0 *_32+0 S1 A8])) /home/kai/git_repos/obme/lowpass.cpp:20 93 {*movqi_internal}
     (nil))
(insn 85 84 86 14 (set (reg:SI 0 ax [orig:95 D.2421 ] [95])
        (sign_extend:SI (reg:QI 0 ax [orig:94 D.2424 ] [94]))) /home/kai/git_repos/obme/lowpass.cpp:20 148 {extendqisi2}
     (nil))
(insn 86 85 87 14 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 sum+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 sum+0 S4 A32])
                    (reg:SI 0 ax [orig:95 D.2421 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:20 217 {*addsi_1}
     (nil))
(insn 87 86 88 14 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 total+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 total+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:21 217 {*addsi_1}
     (nil))
;;  succ:       15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;;              11
;;              12
;;              13
;;              14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 88 87 89 15 6 "" [4 uses])
(note 89 88 90 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 128 15 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:17 217 {*addsi_1}
     (nil))
(jump_insn 128 90 129 15 (set (pc)
        (label_ref 91)) /home/kai/git_repos/obme/lowpass.cpp:17 654 {jump}
     (nil)
 -> 91)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 129 128 94)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 94 129 95 16 5 "" [1 uses])
(note 95 94 96 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 130 16 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:16 217 {*addsi_1}
     (nil))
(jump_insn 130 96 131 16 (set (pc)
        (label_ref 97)) /home/kai/git_repos/obme/lowpass.cpp:16 654 {jump}
     (nil)
 -> 97)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 131 130 100)
;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 96 97 98 99 100 101 131 132 133 134 135 136
(code_label 100 131 101 17 4 "" [1 uses])
(note 101 100 102 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 103 17 (set (reg:SI 0 ax [131])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 y+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:24 90 {*movsi_internal}
     (nil))
(insn 103 102 145 17 (parallel [
            (set (reg:SI 0 ax [orig:96 D.2421 ] [96])
                (mult:SI (reg:SI 0 ax [orig:96 D.2421 ] [96])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -56 [0xffffffffffffffc8])) [0 width+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:24 305 {*mulsi3_1}
     (nil))
(insn 145 103 104 17 (set (reg:SI 1 dx [orig:96 D.2421 ] [96])
        (reg:SI 0 ax [orig:96 D.2421 ] [96])) /home/kai/git_repos/obme/lowpass.cpp:24 90 {*movsi_internal}
     (nil))
(insn 104 145 105 17 (set (reg:SI 0 ax [132])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 x+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:24 90 {*movsi_internal}
     (nil))
(insn 105 104 106 17 (parallel [
            (set (reg:SI 0 ax [orig:97 D.2421 ] [97])
                (plus:SI (reg:SI 0 ax [132])
                    (reg:SI 1 dx [orig:96 D.2421 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:24 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:96 D.2421 ] [96])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 x+0 S4 A32]))
        (nil)))
(insn 106 105 107 17 (set (reg:DI 1 dx [orig:98 D.2422 ] [98])
        (sign_extend:DI (reg:SI 0 ax [orig:97 D.2421 ] [97]))) /home/kai/git_repos/obme/lowpass.cpp:24 142 {*extendsidi2_rex64}
     (nil))
(insn 107 106 108 17 (set (reg/f:DI 0 ax [133])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 dst+0 S8 A64])) /home/kai/git_repos/obme/lowpass.cpp:24 89 {*movdi_internal}
     (nil))
(insn 108 107 109 17 (parallel [
            (set (reg/f:DI 2 cx [orig:99 D.2423 ] [99])
                (plus:DI (reg:DI 1 dx [orig:98 D.2422 ] [98])
                    (reg/f:DI 0 ax [133])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:24 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 dst+0 S8 A64])
            (reg:DI 1 dx [orig:98 D.2422 ] [98]))
        (nil)))
(insn 109 108 110 17 (set (reg:SI 0 ax [136])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 sum+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:24 90 {*movsi_internal}
     (nil))
(insn 110 109 112 17 (parallel [
            (set (reg:SI 0 ax [134])
                (div:SI (reg:SI 0 ax [136])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 total+0 S4 A32])))
            (set (reg:SI 1 dx [135])
                (mod:SI (reg:SI 0 ax [136])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 total+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:24 341 {*divmodsi4}
     (nil))
(insn 112 110 113 17 (set (reg:QI 0 ax [orig:101 D.2424 ] [101])
        (reg:QI 0 ax [orig:100 D.2421 ] [100])) /home/kai/git_repos/obme/lowpass.cpp:24 93 {*movqi_internal}
     (nil))
(insn 113 112 114 17 (set (mem:QI (reg/f:DI 2 cx [orig:99 D.2423 ] [99]) [0 *_43+0 S1 A8])
        (reg:QI 0 ax [orig:101 D.2424 ] [101])) /home/kai/git_repos/obme/lowpass.cpp:24 93 {*movqi_internal}
     (nil))
(insn 114 113 132 17 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 x+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 x+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:11 217 {*addsi_1}
     (nil))
(jump_insn 132 114 133 17 (set (pc)
        (label_ref 115)) /home/kai/git_repos/obme/lowpass.cpp:11 654 {jump}
     (nil)
 -> 115)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 133 132 118)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 118 133 119 18 3 "" [1 uses])
(note 119 118 120 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 120 119 134 18 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -32 [0xffffffffffffffe0])) [0 y+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -32 [0xffffffffffffffe0])) [0 y+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:10 217 {*addsi_1}
     (nil))
(jump_insn 134 120 135 18 (set (pc)
        (label_ref 121)) /home/kai/git_repos/obme/lowpass.cpp:10 654 {jump}
     (nil)
 -> 121)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 135 134 137)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 19, flags: (NEW, RTL, MODIFIED)
;;  pred:       3
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 137 135 136 20 11 "" [1 uses])
(note 136 137 138 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 138 136 126 20 (const_int 0 [0]) /home/kai/git_repos/obme/lowpass.cpp:26 684 {nop}
     (nil))
;;  succ:       19 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 [100.0%]  (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 126 138 127 19 1 "" [0 uses])
(note 127 126 139 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 139 127 0 NOTE_INSN_DELETED)
