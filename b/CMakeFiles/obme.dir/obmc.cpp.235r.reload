
;; Function void obmc(imgpel**, imgpel*, mvinfo*, int, int, int, int) (_Z4obmcPPcS_P6mvinfoiiii, funcdef_no=1384, decl_uid=33296, cgraph_uid=400, symbol_order=402)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            1 Early clobber: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =a  (1) =&d  (2) 0  (3) rm {*divmodsi4}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 15:  (0) r  (1) 0  (2) mr {*mulsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 17:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            1 Early clobber: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 18:  (0) =a  (1) =&d  (2) 0  (3) rm {*divmodsi4}
      Creating newreg=199 from oldreg=143, assigning class DREG to r199
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 35
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 47
	 Choosing alt 0 in insn 47:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 53
	 Choosing alt 0 in insn 53:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 64
	 Choosing alt 0 in insn 64:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 76
	 Choosing alt 0 in insn 76:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 82
	 Choosing alt 0 in insn 82:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 93
	 Choosing alt 0 in insn 93:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 100
	 Choosing alt 0 in insn 100:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 102:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 103:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 109:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 117:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 120
	 Choosing alt 0 in insn 120:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 121:  (0) r  (1) 0  (2) mr {*mulsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 122
	 Choosing alt 0 in insn 122:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 123:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 125:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 128:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 131
	 Choosing alt 0 in insn 131:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 132:  (0) r  (1) 0  (2) mr {*mulsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 133
	 Choosing alt 0 in insn 133:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 134:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 135:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 136
	 Choosing alt 0 in insn 136:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 137:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 141:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 144
	 Choosing alt 0 in insn 144:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 145:  (0) r  (1) 0  (2) mr {*mulsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 146
	 Choosing alt 0 in insn 146:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 147:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 148:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 149
	 Choosing alt 0 in insn 149:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 150:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 153:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            1 Early clobber: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 154:  (0) =a  (1) =&d  (2) 0  (3) rm {*divmodsi4}
      Creating newreg=200 from oldreg=198, assigning class DREG to r200
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 157
	 Choosing alt 0 in insn 157:  (0) =qm  (1) %0  (2) qn {*addqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 159:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 160:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 166:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 172:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 12
EBB 11

********** Pseudo live ranges #1: **********

  BB 11
  BB 12
   Insn 188: point = 0
  BB 3
   Insn 24: point = 0
   Insn 23: point = 0
   Insn 22: point = 1
  BB 10
   Insn 184: point = 2
   Insn 172: point = 2
  BB 5
   Insn 107: point = 2
   Insn 106: point = 2
   Insn 105: point = 3
  BB 9
   Insn 182: point = 4
   Insn 166: point = 4
  BB 7
   Insn 113: point = 4
   Insn 112: point = 4
   Insn 111: point = 5
  BB 8
   Insn 180: point = 6
   Insn 160: point = 6
   Insn 159: point = 6
   Insn 158: point = 7
   Insn 157: point = 9
   Insn 156: point = 11
   Insn 155: point = 13
   Insn 154: point = 15
   Insn 153: point = 17
   Insn 152: point = 19
   Insn 151: point = 20
   Insn 150: point = 22
   Insn 149: point = 24
   Insn 148: point = 26
   Insn 147: point = 27
   Insn 146: point = 29
   Insn 145: point = 31
   Insn 144: point = 33
   Insn 143: point = 35
   Insn 142: point = 36
   Insn 141: point = 37
   Insn 140: point = 39
   Insn 139: point = 40
   Insn 138: point = 41
   Insn 137: point = 43
   Insn 136: point = 45
   Insn 135: point = 47
   Insn 134: point = 48
   Insn 133: point = 50
   Insn 132: point = 52
   Insn 131: point = 54
   Insn 130: point = 56
   Insn 129: point = 57
   Insn 128: point = 58
   Insn 127: point = 60
   Insn 126: point = 61
   Insn 125: point = 62
   Insn 124: point = 64
   Insn 123: point = 65
   Insn 122: point = 67
   Insn 121: point = 69
   Insn 120: point = 71
   Insn 119: point = 73
   Insn 118: point = 74
   Insn 117: point = 75
   Insn 116: point = 77
   Insn 115: point = 78
  BB 6
   Insn 109: point = 79
  BB 4
   Insn 103: point = 79
   Insn 102: point = 79
   Insn 101: point = 80
   Insn 100: point = 82
   Insn 99: point = 84
   Insn 98: point = 85
   Insn 97: point = 87
   Insn 96: point = 89
   Insn 95: point = 90
   Insn 94: point = 91
   Insn 93: point = 93
   Insn 92: point = 95
   Insn 91: point = 96
   Insn 90: point = 98
   Insn 89: point = 100
   Insn 88: point = 102
   Insn 87: point = 103
   Insn 86: point = 103
   Insn 85: point = 104
   Insn 84: point = 106
   Insn 83: point = 107
   Insn 82: point = 108
   Insn 81: point = 110
   Insn 77: point = 111
   Insn 76: point = 113
   Insn 75: point = 115
   Insn 74: point = 116
   Insn 73: point = 118
   Insn 72: point = 120
   Insn 71: point = 122
   Insn 70: point = 123
   Insn 69: point = 123
   Insn 68: point = 124
   Insn 67: point = 126
   Insn 66: point = 127
   Insn 65: point = 128
   Insn 64: point = 130
   Insn 63: point = 132
   Insn 62: point = 133
   Insn 61: point = 135
   Insn 60: point = 137
   Insn 59: point = 139
   Insn 58: point = 140
   Insn 57: point = 140
   Insn 56: point = 141
   Insn 55: point = 143
   Insn 54: point = 144
   Insn 53: point = 145
   Insn 52: point = 147
   Insn 48: point = 148
   Insn 47: point = 150
   Insn 46: point = 152
   Insn 45: point = 153
   Insn 44: point = 155
   Insn 43: point = 157
   Insn 42: point = 159
   Insn 41: point = 160
   Insn 40: point = 160
   Insn 39: point = 161
   Insn 38: point = 163
   Insn 37: point = 164
   Insn 36: point = 165
   Insn 35: point = 167
   Insn 34: point = 169
   Insn 33: point = 170
   Insn 32: point = 172
   Insn 31: point = 174
   Insn 30: point = 176
   Insn 29: point = 177
   Insn 28: point = 177
   Insn 27: point = 178
   Insn 26: point = 180
  BB 2
   Insn 20: point = 181
   Insn 19: point = 181
   Insn 18: point = 182
   Insn 17: point = 184
   Insn 16: point = 186
   Insn 15: point = 187
   Insn 14: point = 189
   Insn 13: point = 190
   Insn 12: point = 191
   Insn 11: point = 193
   Insn 7: point = 194
   Insn 6: point = 194
   Insn 5: point = 194
   Insn 4: point = 194
   Insn 3: point = 194
   Insn 2: point = 194
 r87: [183..187]
 r88: [183..184]
 r89: [176..178]
 r90: [168..170]
 r91: [166..167]
 r92: [159..161]
 r93: [151..153]
 r94: [149..150]
 r95: [146..148]
 r96: [139..141]
 r97: [131..133]
 r98: [129..130]
 r99: [122..124]
 r100: [114..116]
 r101: [112..113]
 r102: [109..111]
 r103: [102..104]
 r104: [94..96]
 r105: [92..93]
 r106: [86..87]
 r107: [83..85]
 r108: [81..82]
 r109: [68..75]
 r110: [70..71]
 r111: [68..69]
 r112: [66..67]
 r113: [63..65]
 r114: [6..62]
 r115: [51..58]
 r116: [53..54]
 r117: [51..52]
 r118: [49..50]
 r119: [46..48]
 r120: [44..45]
 r121: [42..43]
 r122: [10..41]
 r123: [30..37]
 r124: [32..33]
 r125: [30..31]
 r126: [28..29]
 r127: [25..27]
 r128: [23..24]
 r129: [21..22]
 r130: [16..20]
 r131: [16..17]
 r132: [12..13]
 r133: [10..11]
 r134: [8..9]
 r135: [6..7]
 r137: [190..191]
 r138: [191..192]
 r139: [192..193]
 r140: [188..189]
 r141: [185..186]
 r142: [181..182]
 r144: [0..1]
 r145: [179..180]
 r146: [175..177] [171..172]
 r147: [173..174]
 r148: [168..169]
 r149: [164..165]
 r150: [162..163]
 r151: [158..160] [154..155]
 r152: [156..157]
 r153: [151..152]
 r156: [144..145]
 r157: [146..147]
 r158: [142..143]
 r159: [138..140] [134..135]
 r160: [136..137]
 r161: [131..132]
 r162: [127..128]
 r163: [125..126]
 r164: [121..123] [117..118]
 r165: [119..120]
 r166: [114..115]
 r169: [107..108]
 r170: [109..110]
 r171: [105..106]
 r172: [101..103] [97..98]
 r173: [99..100]
 r174: [94..95]
 r175: [90..91]
 r176: [88..89]
 r177: [83..84]
 r178: [79..80]
 r179: [2..3]
 r180: [4..5]
 r181: [76..78]
 r182: [76..77]
 r183: [72..74]
 r184: [72..73]
 r185: [63..64]
 r186: [59..61]
 r187: [59..60]
 r188: [55..57]
 r189: [55..56]
 r190: [46..47]
 r191: [38..40]
 r192: [38..39]
 r193: [34..36]
 r194: [34..35]
 r195: [25..26]
 r196: [18..19]
 r197: [14..15]
 r199: [182..183]
 r200: [15..16]
Compressing live ranges: from 194 to 160 - 82%
Ranges after the compression:
 r87: [150..153]
 r88: [150..151]
 r89: [144..145]
 r90: [138..139]
 r91: [136..137]
 r92: [130..131]
 r93: [124..125]
 r94: [122..123]
 r95: [120..121]
 r96: [114..115]
 r97: [108..109]
 r98: [106..107]
 r99: [100..101]
 r100: [94..95]
 r101: [92..93]
 r102: [90..91]
 r103: [84..85]
 r104: [78..79]
 r105: [76..77]
 r106: [70..71]
 r107: [68..69]
 r108: [66..67]
 r109: [56..61]
 r110: [58..59]
 r111: [56..57]
 r112: [54..55]
 r113: [52..53]
 r114: [6..51]
 r115: [44..49]
 r116: [46..47]
 r117: [44..45]
 r118: [42..43]
 r119: [40..41]
 r120: [38..39]
 r121: [36..37]
 r122: [10..35]
 r123: [28..33]
 r124: [30..31]
 r125: [28..29]
 r126: [26..27]
 r127: [24..25]
 r128: [22..23]
 r129: [20..21]
 r130: [16..19]
 r131: [16..17]
 r132: [12..13]
 r133: [10..11]
 r134: [8..9]
 r135: [6..7]
 r137: [156..157]
 r138: [157..158]
 r139: [158..159]
 r140: [154..155]
 r141: [152..153]
 r142: [148..149]
 r144: [0..1]
 r145: [146..147]
 r146: [144..145] [140..141]
 r147: [142..143]
 r148: [138..139]
 r149: [134..135]
 r150: [132..133]
 r151: [130..131] [126..127]
 r152: [128..129]
 r153: [124..125]
 r156: [118..119]
 r157: [120..121]
 r158: [116..117]
 r159: [114..115] [110..111]
 r160: [112..113]
 r161: [108..109]
 r162: [104..105]
 r163: [102..103]
 r164: [100..101] [96..97]
 r165: [98..99]
 r166: [94..95]
 r169: [88..89]
 r170: [90..91]
 r171: [86..87]
 r172: [84..85] [80..81]
 r173: [82..83]
 r174: [78..79]
 r175: [74..75]
 r176: [72..73]
 r177: [68..69]
 r178: [64..65]
 r179: [2..3]
 r180: [4..5]
 r181: [62..63]
 r182: [62..63]
 r183: [60..61]
 r184: [60..61]
 r185: [52..53]
 r186: [50..51]
 r187: [50..51]
 r188: [48..49]
 r189: [48..49]
 r190: [40..41]
 r191: [34..35]
 r192: [34..35]
 r193: [32..33]
 r194: [32..33]
 r195: [24..25]
 r196: [18..19]
 r197: [14..15]
 r199: [149..150]
 r200: [15..16]

********** Assignment #1: **********

	 Assigning to 199 (cl=DREG, orig=143, freq=1, tfirst=199, tfreq=1)...
	 Trying 1: spill 88(freq=2)	 Now best 1(cost=1, bad_spills=0, insn_pseudos=1)

      Spill r88(hr=1, freq=2) for r199
	   Assign 1 to reload r199 (freq=1)
	 Assigning to 200 (cl=DREG, orig=198, freq=1, tfirst=200, tfreq=1)...
	 Trying 1: spill 131(freq=2)	 Now best 1(cost=1, bad_spills=0, insn_pseudos=1)

      Spill r131(hr=1, freq=2) for r200
	   Assign 1 to reload r200 (freq=1)
  Reassigning non-reload pseudos
	   Assign 5 to r88 (freq=2)
	   Assign 4 to r131 (freq=2)

********** Undoing inheritance #1: **********


********** Pseudos coalescing #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            1 Early clobber: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =a  (1) =&d  (2) 0  (3) rm {*divmodsi4}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 153:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=201 from oldreg=131, assigning class GENERAL_REGS to r201
  153: {r201:SI=r201:SI*[frame:DI-0x24];clobber flags:CC;}
      REG_DEAD r196:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  190: r201:SI=r196:SI
    Inserting insn reload after:
  191: r131:SI=r201:SI

            1 Early clobber: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =a  (1) =&d  (2) 0  (3) rm {*divmodsi4}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 17:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=202 from oldreg=88, assigning class GENERAL_REGS to r202
   17: {r202:SI=r202:SI*[argp:DI+0x10];clobber flags:CC;}
      REG_DEAD argp:DI
      REG_DEAD r141:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  192: r202:SI=r141:SI
    Inserting insn reload after:
  193: r88:SI=r202:SI

	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 12
EBB 11

********** Pseudo live ranges #2: **********

  BB 11
  BB 12
   Insn 188: point = 0
  BB 3
   Insn 24: point = 0
   Insn 23: point = 0
   Insn 22: point = 1
  BB 10
   Insn 184: point = 2
   Insn 172: point = 2
  BB 5
   Insn 107: point = 2
   Insn 106: point = 2
   Insn 105: point = 3
  BB 9
   Insn 182: point = 4
   Insn 166: point = 4
  BB 7
   Insn 113: point = 4
   Insn 112: point = 4
   Insn 111: point = 5
  BB 8
   Insn 180: point = 6
   Insn 160: point = 6
   Insn 159: point = 6
   Insn 158: point = 7
   Insn 157: point = 9
   Insn 156: point = 11
   Insn 155: point = 13
   Insn 154: point = 15
   Insn 191: point = 17
	Hard reg 4 is preferable by r201 with profit 1
   Insn 153: point = 19
   Insn 190: point = 19
	Hard reg 4 is preferable by r201 with profit 1
	Hard reg 1 is preferable by r201 with profit 1
   Insn 152: point = 21
   Insn 151: point = 22
   Insn 150: point = 24
   Insn 149: point = 26
   Insn 148: point = 28
   Insn 147: point = 29
   Insn 146: point = 31
   Insn 145: point = 33
   Insn 144: point = 35
   Insn 143: point = 37
   Insn 142: point = 38
   Insn 141: point = 39
   Insn 140: point = 41
   Insn 139: point = 42
   Insn 138: point = 43
   Insn 137: point = 45
   Insn 136: point = 47
   Insn 135: point = 49
   Insn 134: point = 50
   Insn 133: point = 52
   Insn 132: point = 54
   Insn 131: point = 56
   Insn 130: point = 58
   Insn 129: point = 59
   Insn 128: point = 60
   Insn 127: point = 62
   Insn 126: point = 63
   Insn 125: point = 64
   Insn 124: point = 66
   Insn 123: point = 67
   Insn 122: point = 69
   Insn 121: point = 71
   Insn 120: point = 73
   Insn 119: point = 75
   Insn 118: point = 76
   Insn 117: point = 77
   Insn 116: point = 79
   Insn 115: point = 80
  BB 6
   Insn 109: point = 81
  BB 4
   Insn 103: point = 81
   Insn 102: point = 81
   Insn 101: point = 82
   Insn 100: point = 84
   Insn 99: point = 86
   Insn 98: point = 87
   Insn 97: point = 89
   Insn 96: point = 91
   Insn 95: point = 92
   Insn 94: point = 93
   Insn 93: point = 95
   Insn 92: point = 97
   Insn 91: point = 98
   Insn 90: point = 100
   Insn 89: point = 102
   Insn 88: point = 104
   Insn 87: point = 105
   Insn 86: point = 105
   Insn 85: point = 106
   Insn 84: point = 108
   Insn 83: point = 109
   Insn 82: point = 110
   Insn 81: point = 112
   Insn 77: point = 113
   Insn 76: point = 115
   Insn 75: point = 117
   Insn 74: point = 118
   Insn 73: point = 120
   Insn 72: point = 122
   Insn 71: point = 124
   Insn 70: point = 125
   Insn 69: point = 125
   Insn 68: point = 126
   Insn 67: point = 128
   Insn 66: point = 129
   Insn 65: point = 130
   Insn 64: point = 132
   Insn 63: point = 134
   Insn 62: point = 135
   Insn 61: point = 137
   Insn 60: point = 139
   Insn 59: point = 141
   Insn 58: point = 142
   Insn 57: point = 142
   Insn 56: point = 143
   Insn 55: point = 145
   Insn 54: point = 146
   Insn 53: point = 147
   Insn 52: point = 149
   Insn 48: point = 150
   Insn 47: point = 152
   Insn 46: point = 154
   Insn 45: point = 155
   Insn 44: point = 157
   Insn 43: point = 159
   Insn 42: point = 161
   Insn 41: point = 162
   Insn 40: point = 162
   Insn 39: point = 163
   Insn 38: point = 165
   Insn 37: point = 166
   Insn 36: point = 167
   Insn 35: point = 169
   Insn 34: point = 171
   Insn 33: point = 172
   Insn 32: point = 174
   Insn 31: point = 176
   Insn 30: point = 178
   Insn 29: point = 179
   Insn 28: point = 179
   Insn 27: point = 180
   Insn 26: point = 182
  BB 2
   Insn 20: point = 183
   Insn 19: point = 183
   Insn 18: point = 184
   Insn 193: point = 186
	Hard reg 5 is preferable by r202 with profit 1
   Insn 17: point = 188
   Insn 192: point = 188
	Hard reg 5 is preferable by r202 with profit 1
	Hard reg 1 is preferable by r202 with profit 1
   Insn 16: point = 190
   Insn 15: point = 191
   Insn 14: point = 193
   Insn 13: point = 194
   Insn 12: point = 195
   Insn 11: point = 197
   Insn 7: point = 198
   Insn 6: point = 198
   Insn 5: point = 198
   Insn 4: point = 198
   Insn 3: point = 198
   Insn 2: point = 198
 r87: [185..191]
 r88: [185..186]
 r89: [178..180]
 r90: [170..172]
 r91: [168..169]
 r92: [161..163]
 r93: [153..155]
 r94: [151..152]
 r95: [148..150]
 r96: [141..143]
 r97: [133..135]
 r98: [131..132]
 r99: [124..126]
 r100: [116..118]
 r101: [114..115]
 r102: [111..113]
 r103: [104..106]
 r104: [96..98]
 r105: [94..95]
 r106: [88..89]
 r107: [85..87]
 r108: [83..84]
 r109: [70..77]
 r110: [72..73]
 r111: [70..71]
 r112: [68..69]
 r113: [65..67]
 r114: [6..64]
 r115: [53..60]
 r116: [55..56]
 r117: [53..54]
 r118: [51..52]
 r119: [48..50]
 r120: [46..47]
 r121: [44..45]
 r122: [10..43]
 r123: [32..39]
 r124: [34..35]
 r125: [32..33]
 r126: [30..31]
 r127: [27..29]
 r128: [25..26]
 r129: [23..24]
 r130: [16..22]
 r131: [16..17]
 r132: [12..13]
 r133: [10..11]
 r134: [8..9]
 r135: [6..7]
 r137: [194..195]
 r138: [195..196]
 r139: [196..197]
 r140: [192..193]
 r141: [189..190]
 r142: [183..184]
 r144: [0..1]
 r145: [181..182]
 r146: [177..179] [173..174]
 r147: [175..176]
 r148: [170..171]
 r149: [166..167]
 r150: [164..165]
 r151: [160..162] [156..157]
 r152: [158..159]
 r153: [153..154]
 r156: [146..147]
 r157: [148..149]
 r158: [144..145]
 r159: [140..142] [136..137]
 r160: [138..139]
 r161: [133..134]
 r162: [129..130]
 r163: [127..128]
 r164: [123..125] [119..120]
 r165: [121..122]
 r166: [116..117]
 r169: [109..110]
 r170: [111..112]
 r171: [107..108]
 r172: [103..105] [99..100]
 r173: [101..102]
 r174: [96..97]
 r175: [92..93]
 r176: [90..91]
 r177: [85..86]
 r178: [81..82]
 r179: [2..3]
 r180: [4..5]
 r181: [78..80]
 r182: [78..79]
 r183: [74..76]
 r184: [74..75]
 r185: [65..66]
 r186: [61..63]
 r187: [61..62]
 r188: [57..59]
 r189: [57..58]
 r190: [48..49]
 r191: [40..42]
 r192: [40..41]
 r193: [36..38]
 r194: [36..37]
 r195: [27..28]
 r196: [20..21]
 r197: [14..15]
 r199: [184..185]
 r200: [15..16]
 r201: [18..19]
 r202: [187..188]
Compressing live ranges: from 198 to 164 - 82%
Ranges after the compression:
 r87: [152..157]
 r88: [152..153]
 r89: [146..147]
 r90: [140..141]
 r91: [138..139]
 r92: [132..133]
 r93: [126..127]
 r94: [124..125]
 r95: [122..123]
 r96: [116..117]
 r97: [110..111]
 r98: [108..109]
 r99: [102..103]
 r100: [96..97]
 r101: [94..95]
 r102: [92..93]
 r103: [86..87]
 r104: [80..81]
 r105: [78..79]
 r106: [72..73]
 r107: [70..71]
 r108: [68..69]
 r109: [58..63]
 r110: [60..61]
 r111: [58..59]
 r112: [56..57]
 r113: [54..55]
 r114: [6..53]
 r115: [46..51]
 r116: [48..49]
 r117: [46..47]
 r118: [44..45]
 r119: [42..43]
 r120: [40..41]
 r121: [38..39]
 r122: [10..37]
 r123: [30..35]
 r124: [32..33]
 r125: [30..31]
 r126: [28..29]
 r127: [26..27]
 r128: [24..25]
 r129: [22..23]
 r130: [16..21]
 r131: [16..17]
 r132: [12..13]
 r133: [10..11]
 r134: [8..9]
 r135: [6..7]
 r137: [160..161]
 r138: [161..162]
 r139: [162..163]
 r140: [158..159]
 r141: [156..157]
 r142: [150..151]
 r144: [0..1]
 r145: [148..149]
 r146: [146..147] [142..143]
 r147: [144..145]
 r148: [140..141]
 r149: [136..137]
 r150: [134..135]
 r151: [132..133] [128..129]
 r152: [130..131]
 r153: [126..127]
 r156: [120..121]
 r157: [122..123]
 r158: [118..119]
 r159: [116..117] [112..113]
 r160: [114..115]
 r161: [110..111]
 r162: [106..107]
 r163: [104..105]
 r164: [102..103] [98..99]
 r165: [100..101]
 r166: [96..97]
 r169: [90..91]
 r170: [92..93]
 r171: [88..89]
 r172: [86..87] [82..83]
 r173: [84..85]
 r174: [80..81]
 r175: [76..77]
 r176: [74..75]
 r177: [70..71]
 r178: [66..67]
 r179: [2..3]
 r180: [4..5]
 r181: [64..65]
 r182: [64..65]
 r183: [62..63]
 r184: [62..63]
 r185: [54..55]
 r186: [52..53]
 r187: [52..53]
 r188: [50..51]
 r189: [50..51]
 r190: [42..43]
 r191: [36..37]
 r192: [36..37]
 r193: [34..35]
 r194: [34..35]
 r195: [26..27]
 r196: [20..21]
 r197: [14..15]
 r199: [151..152]
 r200: [15..16]
 r201: [18..19]
 r202: [154..155]

********** Assignment #2: **********

	 Assigning to 201 (cl=GENERAL_REGS, orig=131, freq=3, tfirst=201, tfreq=3)...
	   Assign 4 to reload r201 (freq=3)
	 Assigning to 202 (cl=GENERAL_REGS, orig=88, freq=3, tfirst=202, tfreq=3)...
	   Assign 5 to reload r202 (freq=3)

********** Undoing inheritance #2: **********


********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 15
changing reg in insn 18
changing reg in insn 18
changing reg in insn 18
changing reg in insn 18
changing reg in insn 27
changing reg in insn 30
changing reg in insn 28
changing reg in insn 30
changing reg in insn 33
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 39
changing reg in insn 42
changing reg in insn 40
changing reg in insn 42
changing reg in insn 45
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 53
changing reg in insn 56
changing reg in insn 59
changing reg in insn 57
changing reg in insn 59
changing reg in insn 62
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 68
changing reg in insn 71
changing reg in insn 69
changing reg in insn 71
changing reg in insn 74
changing reg in insn 76
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 82
changing reg in insn 85
changing reg in insn 88
changing reg in insn 86
changing reg in insn 88
changing reg in insn 91
changing reg in insn 93
changing reg in insn 93
changing reg in insn 94
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 117
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 123
changing reg in insn 123
changing reg in insn 125
changing reg in insn 125
changing reg in insn 125
changing reg in insn 159
changing reg in insn 128
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 141
changing reg in insn 144
changing reg in insn 145
changing reg in insn 145
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 149
changing reg in insn 149
changing reg in insn 150
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 154
changing reg in insn 154
changing reg in insn 154
changing reg in insn 154
changing reg in insn 155
changing reg in insn 156
changing reg in insn 157
changing reg in insn 158
changing reg in insn 158
changing reg in insn 159
changing reg in insn 12
changing reg in insn 13
changing reg in insn 12
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 22
changing reg in insn 23
changing reg in insn 26
changing reg in insn 27
changing reg in insn 32
changing reg in insn 30
changing reg in insn 29
changing reg in insn 28
changing reg in insn 33
changing reg in insn 31
changing reg in insn 30
changing reg in insn 29
changing reg in insn 31
changing reg in insn 32
changing reg in insn 34
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 44
changing reg in insn 42
changing reg in insn 41
changing reg in insn 40
changing reg in insn 45
changing reg in insn 43
changing reg in insn 42
changing reg in insn 41
changing reg in insn 43
changing reg in insn 44
changing reg in insn 46
changing reg in insn 53
changing reg in insn 54
changing reg in insn 52
changing reg in insn 55
changing reg in insn 56
changing reg in insn 61
changing reg in insn 59
changing reg in insn 58
changing reg in insn 57
changing reg in insn 62
changing reg in insn 60
changing reg in insn 59
changing reg in insn 58
changing reg in insn 60
changing reg in insn 61
changing reg in insn 63
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 73
changing reg in insn 71
changing reg in insn 70
changing reg in insn 69
changing reg in insn 74
changing reg in insn 72
changing reg in insn 71
changing reg in insn 70
changing reg in insn 72
changing reg in insn 73
changing reg in insn 75
changing reg in insn 82
changing reg in insn 83
changing reg in insn 81
changing reg in insn 84
changing reg in insn 85
changing reg in insn 90
changing reg in insn 88
changing reg in insn 87
changing reg in insn 86
changing reg in insn 91
changing reg in insn 89
changing reg in insn 88
changing reg in insn 87
changing reg in insn 89
changing reg in insn 90
changing reg in insn 92
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 99
changing reg in insn 101
changing reg in insn 102
changing reg in insn 105
changing reg in insn 106
changing reg in insn 111
changing reg in insn 112
changing reg in insn 115
changing reg in insn 117
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 124
changing reg in insn 125
changing reg in insn 126
changing reg in insn 128
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 135
changing reg in insn 139
changing reg in insn 141
changing reg in insn 140
changing reg in insn 141
changing reg in insn 142
changing reg in insn 143
changing reg in insn 148
changing reg in insn 152
changing reg in insn 154
changing reg in insn 155
deleting insn with uid = 193.
deleting insn with uid = 32.
deleting insn with uid = 44.
deleting insn with uid = 61.
deleting insn with uid = 73.
deleting insn with uid = 90.
deleting insn with uid = 191.
deleting insn with uid = 155.
deleting insn with uid = 158.
starting the processing of deferred insns
ending the processing of deferred insns


void obmc(imgpel**, imgpel*, mvinfo*, int, int, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 17[flags] 37[r8] 38[r9]
;;  ref usage 	r0={82d,84u} r1={28d,30u,16e} r2={3d,3u} r4={5d,6u} r5={4d,5u} r6={1d,82u} r7={1d,12u} r17={52d,3u} r20={1d,1u,23e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d,1u} r38={1d,1u} 
;;    total ref usage 454{187d,228u,39e} in 145{145 regular + 0 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 17 [flags] 87 88 137 138 139 140 141 142 143
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 refFrame+0 S8 A64])
        (reg:DI 5 di [ refFrame ])) /home/kai/git_repos/obme/obmc.cpp:9 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 currFrame+0 S8 A64])
        (reg:DI 4 si [ currFrame ])) /home/kai/git_repos/obme/obmc.cpp:9 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 mvs+0 S8 A64])
        (reg:DI 1 dx [ mvs ])) /home/kai/git_repos/obme/obmc.cpp:9 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 width+0 S4 A32])
        (reg:SI 2 cx [ width ])) /home/kai/git_repos/obme/obmc.cpp:9 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 height+0 S4 A32])
        (reg:SI 37 r8 [ height ])) /home/kai/git_repos/obme/obmc.cpp:9 90 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 blocksize+0 S4 A32])
        (reg:SI 38 r9 [ blocksize ])) /home/kai/git_repos/obme/obmc.cpp:9 90 {*movsi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg:SI 0 ax [139])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 blocksize+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:11 90 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg:SI 0 ax [137])
                (div:SI (reg:SI 0 ax [139])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int 16 [0x10])) [0 overlap+0 S4 A64])))
            (set (reg:SI 1 dx [138])
                (mod:SI (reg:SI 0 ax [139])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int 16 [0x10])) [0 overlap+0 S4 A64])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:11 341 {*divmodsi4}
     (nil))
(insn 13 12 14 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 ratio+0 S4 A32])
        (reg:SI 0 ax [137])) /home/kai/git_repos/obme/obmc.cpp:11 90 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:SI 0 ax [140])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 width+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:13 90 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (parallel [
            (set (reg:SI 0 ax [orig:87 D.34928 ] [87])
                (mult:SI (reg:SI 0 ax [140])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80 [0xffffffffffffffb0])) [0 height+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:13 305 {*mulsi3_1}
     (nil))
(insn 16 15 192 2 (set (reg:SI 1 dx [141])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 overlap+0 S4 A64])) /home/kai/git_repos/obme/obmc.cpp:13 90 {*movsi_internal}
     (nil))
(insn 192 16 17 2 (set (reg:SI 5 di [orig:88 D.34928 ] [88])
        (reg:SI 1 dx [141])) /home/kai/git_repos/obme/obmc.cpp:13 90 {*movsi_internal}
     (nil))
(insn 17 192 18 2 (parallel [
            (set (reg:SI 5 di [orig:88 D.34928 ] [88])
                (mult:SI (reg:SI 5 di [orig:88 D.34928 ] [88])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int 16 [0x10])) [0 overlap+0 S4 A64])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:13 305 {*mulsi3_1}
     (nil))
(insn 18 17 19 2 (parallel [
            (set (reg:SI 0 ax [142])
                (div:SI (reg:SI 0 ax [orig:87 D.34928 ] [87])
                    (reg:SI 5 di [orig:88 D.34928 ] [88])))
            (set (reg:SI 1 dx [143])
                (mod:SI (reg:SI 0 ax [orig:87 D.34928 ] [87])
                    (reg:SI 5 di [orig:88 D.34928 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:13 341 {*divmodsi4}
     (nil))
(insn 19 18 20 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 numMV+0 S4 A32])
        (reg:SI 0 ax [142])) /home/kai/git_repos/obme/obmc.cpp:13 90 {*movsi_internal}
     (nil))
(insn 20 19 173 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 i+0 S4 A32])
        (const_int 0 [0])) /home/kai/git_repos/obme/obmc.cpp:14 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              10 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 144
(code_label 173 20 21 3 7 "" [1 uses])
(note 21 173 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 3 (set (reg:SI 0 ax [144])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 i+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:14 90 {*movsi_internal}
     (nil))
(insn 23 22 24 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [144])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 numMV+0 S4 A32]))) /home/kai/git_repos/obme/obmc.cpp:14 7 {*cmpsi_1}
     (nil))
(jump_insn 24 23 25 3 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 187)
            (pc))) /home/kai/git_repos/obme/obmc.cpp:14 612 {*jcc_1}
     (nil)
 -> 187)
;;  succ:       12
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 145 146 147 148 149 150 151 152 153 156 157 158 159 160 161 162 163 164 165 166 169 170 171 172 173 174 175 176 177 178
(note 25 24 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 4 (set (reg:SI 0 ax [145])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 i+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:17 90 {*movsi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:DI 1 dx [orig:89 D.34929 ] [89])
        (sign_extend:DI (reg:SI 0 ax [145]))) /home/kai/git_repos/obme/obmc.cpp:17 142 {*extendsidi2_rex64}
     (nil))
(insn 28 27 29 4 (set (reg:DI 0 ax [146])
        (reg:DI 1 dx [orig:89 D.34929 ] [89])) /home/kai/git_repos/obme/obmc.cpp:17 89 {*movdi_internal}
     (nil))
(insn 29 28 30 4 (parallel [
            (set (reg:DI 0 ax [146])
                (ashift:DI (reg:DI 0 ax [146])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:17 512 {*ashldi3_1}
     (nil))
(insn 30 29 31 4 (parallel [
            (set (reg:DI 0 ax [146])
                (plus:DI (reg:DI 0 ax [146])
                    (reg:DI 1 dx [orig:89 D.34929 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:17 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:89 D.34929 ] [89])
            (const_int 3 [0x3]))
        (nil)))
(insn 31 30 33 4 (parallel [
            (set (reg:DI 0 ax [147])
                (ashift:DI (reg:DI 0 ax [146])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:17 512 {*ashldi3_1}
     (nil))
(insn 33 31 34 4 (set (reg:DI 1 dx [orig:90 D.34929 ] [90])
        (reg:DI 0 ax [146])) /home/kai/git_repos/obme/obmc.cpp:17 89 {*movdi_internal}
     (nil))
(insn 34 33 35 4 (set (reg/f:DI 0 ax [148])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 mvs+0 S8 A64])) /home/kai/git_repos/obme/obmc.cpp:17 89 {*movdi_internal}
     (nil))
(insn 35 34 36 4 (parallel [
            (set (reg/f:DI 0 ax [orig:91 D.34930 ] [91])
                (plus:DI (reg/f:DI 0 ax [148])
                    (reg:DI 1 dx [orig:90 D.34929 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:17 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 mvs+0 S8 A64])
            (reg:DI 1 dx [orig:90 D.34929 ] [90]))
        (nil)))
(insn 36 35 37 4 (set (reg:SI 0 ax [149])
        (mem/j:SI (reg/f:DI 0 ax [orig:91 D.34930 ] [91]) [0 _20->iCx+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:17 90 {*movsi_internal}
     (nil))
(insn 37 36 38 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 cX+0 S4 A32])
        (reg:SI 0 ax [149])) /home/kai/git_repos/obme/obmc.cpp:17 90 {*movsi_internal}
     (nil))
(insn 38 37 39 4 (set (reg:SI 0 ax [150])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 i+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:18 90 {*movsi_internal}
     (nil))
(insn 39 38 40 4 (set (reg:DI 1 dx [orig:92 D.34929 ] [92])
        (sign_extend:DI (reg:SI 0 ax [150]))) /home/kai/git_repos/obme/obmc.cpp:18 142 {*extendsidi2_rex64}
     (nil))
(insn 40 39 41 4 (set (reg:DI 0 ax [151])
        (reg:DI 1 dx [orig:92 D.34929 ] [92])) /home/kai/git_repos/obme/obmc.cpp:18 89 {*movdi_internal}
     (nil))
(insn 41 40 42 4 (parallel [
            (set (reg:DI 0 ax [151])
                (ashift:DI (reg:DI 0 ax [151])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:18 512 {*ashldi3_1}
     (nil))
(insn 42 41 43 4 (parallel [
            (set (reg:DI 0 ax [151])
                (plus:DI (reg:DI 0 ax [151])
                    (reg:DI 1 dx [orig:92 D.34929 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:18 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:92 D.34929 ] [92])
            (const_int 3 [0x3]))
        (nil)))
(insn 43 42 45 4 (parallel [
            (set (reg:DI 0 ax [152])
                (ashift:DI (reg:DI 0 ax [151])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:18 512 {*ashldi3_1}
     (nil))
(insn 45 43 46 4 (set (reg:DI 1 dx [orig:93 D.34929 ] [93])
        (reg:DI 0 ax [151])) /home/kai/git_repos/obme/obmc.cpp:18 89 {*movdi_internal}
     (nil))
(insn 46 45 47 4 (set (reg/f:DI 0 ax [153])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 mvs+0 S8 A64])) /home/kai/git_repos/obme/obmc.cpp:18 89 {*movdi_internal}
     (nil))
(insn 47 46 48 4 (parallel [
            (set (reg/f:DI 0 ax [orig:94 D.34930 ] [94])
                (plus:DI (reg/f:DI 0 ax [153])
                    (reg:DI 1 dx [orig:93 D.34929 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:18 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 mvs+0 S8 A64])
            (reg:DI 1 dx [orig:93 D.34929 ] [93]))
        (nil)))
(insn 48 47 52 4 (set (reg:SI 1 dx [orig:95 D.34928 ] [95])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:94 D.34930 ] [94])
                (const_int 8 [0x8])) [0 _24->iMvx+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:18 90 {*movsi_internal}
     (nil))
(insn 52 48 53 4 (set (reg:SI 0 ax [157])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 cX+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:18 90 {*movsi_internal}
     (nil))
(insn 53 52 54 4 (parallel [
            (set (reg:SI 0 ax [156])
                (plus:SI (reg:SI 0 ax [157])
                    (reg:SI 1 dx [orig:95 D.34928 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:18 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:95 D.34928 ] [95])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 cX+0 S4 A32]))
        (nil)))
(insn 54 53 55 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 mvX+0 S4 A32])
        (reg:SI 0 ax [156])) /home/kai/git_repos/obme/obmc.cpp:18 90 {*movsi_internal}
     (nil))
(insn 55 54 56 4 (set (reg:SI 0 ax [158])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 i+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:19 90 {*movsi_internal}
     (nil))
(insn 56 55 57 4 (set (reg:DI 1 dx [orig:96 D.34929 ] [96])
        (sign_extend:DI (reg:SI 0 ax [158]))) /home/kai/git_repos/obme/obmc.cpp:19 142 {*extendsidi2_rex64}
     (nil))
(insn 57 56 58 4 (set (reg:DI 0 ax [159])
        (reg:DI 1 dx [orig:96 D.34929 ] [96])) /home/kai/git_repos/obme/obmc.cpp:19 89 {*movdi_internal}
     (nil))
(insn 58 57 59 4 (parallel [
            (set (reg:DI 0 ax [159])
                (ashift:DI (reg:DI 0 ax [159])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:19 512 {*ashldi3_1}
     (nil))
(insn 59 58 60 4 (parallel [
            (set (reg:DI 0 ax [159])
                (plus:DI (reg:DI 0 ax [159])
                    (reg:DI 1 dx [orig:96 D.34929 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:19 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:96 D.34929 ] [96])
            (const_int 3 [0x3]))
        (nil)))
(insn 60 59 62 4 (parallel [
            (set (reg:DI 0 ax [160])
                (ashift:DI (reg:DI 0 ax [159])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:19 512 {*ashldi3_1}
     (nil))
(insn 62 60 63 4 (set (reg:DI 1 dx [orig:97 D.34929 ] [97])
        (reg:DI 0 ax [159])) /home/kai/git_repos/obme/obmc.cpp:19 89 {*movdi_internal}
     (nil))
(insn 63 62 64 4 (set (reg/f:DI 0 ax [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 mvs+0 S8 A64])) /home/kai/git_repos/obme/obmc.cpp:19 89 {*movdi_internal}
     (nil))
(insn 64 63 65 4 (parallel [
            (set (reg/f:DI 0 ax [orig:98 D.34930 ] [98])
                (plus:DI (reg/f:DI 0 ax [161])
                    (reg:DI 1 dx [orig:97 D.34929 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:19 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 mvs+0 S8 A64])
            (reg:DI 1 dx [orig:97 D.34929 ] [97]))
        (nil)))
(insn 65 64 66 4 (set (reg:SI 0 ax [162])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:98 D.34930 ] [98])
                (const_int 4 [0x4])) [0 _29->iCy+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:19 90 {*movsi_internal}
     (nil))
(insn 66 65 67 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 cY+0 S4 A32])
        (reg:SI 0 ax [162])) /home/kai/git_repos/obme/obmc.cpp:19 90 {*movsi_internal}
     (nil))
(insn 67 66 68 4 (set (reg:SI 0 ax [163])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 i+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:20 90 {*movsi_internal}
     (nil))
(insn 68 67 69 4 (set (reg:DI 1 dx [orig:99 D.34929 ] [99])
        (sign_extend:DI (reg:SI 0 ax [163]))) /home/kai/git_repos/obme/obmc.cpp:20 142 {*extendsidi2_rex64}
     (nil))
(insn 69 68 70 4 (set (reg:DI 0 ax [164])
        (reg:DI 1 dx [orig:99 D.34929 ] [99])) /home/kai/git_repos/obme/obmc.cpp:20 89 {*movdi_internal}
     (nil))
(insn 70 69 71 4 (parallel [
            (set (reg:DI 0 ax [164])
                (ashift:DI (reg:DI 0 ax [164])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:20 512 {*ashldi3_1}
     (nil))
(insn 71 70 72 4 (parallel [
            (set (reg:DI 0 ax [164])
                (plus:DI (reg:DI 0 ax [164])
                    (reg:DI 1 dx [orig:99 D.34929 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:20 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:99 D.34929 ] [99])
            (const_int 3 [0x3]))
        (nil)))
(insn 72 71 74 4 (parallel [
            (set (reg:DI 0 ax [165])
                (ashift:DI (reg:DI 0 ax [164])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:20 512 {*ashldi3_1}
     (nil))
(insn 74 72 75 4 (set (reg:DI 1 dx [orig:100 D.34929 ] [100])
        (reg:DI 0 ax [164])) /home/kai/git_repos/obme/obmc.cpp:20 89 {*movdi_internal}
     (nil))
(insn 75 74 76 4 (set (reg/f:DI 0 ax [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 mvs+0 S8 A64])) /home/kai/git_repos/obme/obmc.cpp:20 89 {*movdi_internal}
     (nil))
(insn 76 75 77 4 (parallel [
            (set (reg/f:DI 0 ax [orig:101 D.34930 ] [101])
                (plus:DI (reg/f:DI 0 ax [166])
                    (reg:DI 1 dx [orig:100 D.34929 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:20 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 mvs+0 S8 A64])
            (reg:DI 1 dx [orig:100 D.34929 ] [100]))
        (nil)))
(insn 77 76 81 4 (set (reg:SI 1 dx [orig:102 D.34928 ] [102])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:101 D.34930 ] [101])
                (const_int 12 [0xc])) [0 _33->iMvy+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:20 90 {*movsi_internal}
     (nil))
(insn 81 77 82 4 (set (reg:SI 0 ax [170])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 cY+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:20 90 {*movsi_internal}
     (nil))
(insn 82 81 83 4 (parallel [
            (set (reg:SI 0 ax [169])
                (plus:SI (reg:SI 0 ax [170])
                    (reg:SI 1 dx [orig:102 D.34928 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:20 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:102 D.34928 ] [102])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 cY+0 S4 A32]))
        (nil)))
(insn 83 82 84 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 mvY+0 S4 A32])
        (reg:SI 0 ax [169])) /home/kai/git_repos/obme/obmc.cpp:20 90 {*movsi_internal}
     (nil))
(insn 84 83 85 4 (set (reg:SI 0 ax [171])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 i+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:21 90 {*movsi_internal}
     (nil))
(insn 85 84 86 4 (set (reg:DI 1 dx [orig:103 D.34929 ] [103])
        (sign_extend:DI (reg:SI 0 ax [171]))) /home/kai/git_repos/obme/obmc.cpp:21 142 {*extendsidi2_rex64}
     (nil))
(insn 86 85 87 4 (set (reg:DI 0 ax [172])
        (reg:DI 1 dx [orig:103 D.34929 ] [103])) /home/kai/git_repos/obme/obmc.cpp:21 89 {*movdi_internal}
     (nil))
(insn 87 86 88 4 (parallel [
            (set (reg:DI 0 ax [172])
                (ashift:DI (reg:DI 0 ax [172])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:21 512 {*ashldi3_1}
     (nil))
(insn 88 87 89 4 (parallel [
            (set (reg:DI 0 ax [172])
                (plus:DI (reg:DI 0 ax [172])
                    (reg:DI 1 dx [orig:103 D.34929 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:21 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:103 D.34929 ] [103])
            (const_int 3 [0x3]))
        (nil)))
(insn 89 88 91 4 (parallel [
            (set (reg:DI 0 ax [173])
                (ashift:DI (reg:DI 0 ax [172])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:21 512 {*ashldi3_1}
     (nil))
(insn 91 89 92 4 (set (reg:DI 1 dx [orig:104 D.34929 ] [104])
        (reg:DI 0 ax [172])) /home/kai/git_repos/obme/obmc.cpp:21 89 {*movdi_internal}
     (nil))
(insn 92 91 93 4 (set (reg/f:DI 0 ax [174])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 mvs+0 S8 A64])) /home/kai/git_repos/obme/obmc.cpp:21 89 {*movdi_internal}
     (nil))
(insn 93 92 94 4 (parallel [
            (set (reg/f:DI 0 ax [orig:105 D.34930 ] [105])
                (plus:DI (reg/f:DI 0 ax [174])
                    (reg:DI 1 dx [orig:104 D.34929 ] [104])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:21 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 mvs+0 S8 A64])
            (reg:DI 1 dx [orig:104 D.34929 ] [104]))
        (nil)))
(insn 94 93 95 4 (set (reg:SI 0 ax [175])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:105 D.34930 ] [105])
                (const_int 20 [0x14])) [0 _38->frame+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:21 90 {*movsi_internal}
     (nil))
(insn 95 94 96 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 idx+0 S4 A32])
        (reg:SI 0 ax [175])) /home/kai/git_repos/obme/obmc.cpp:21 90 {*movsi_internal}
     (nil))
(insn 96 95 97 4 (set (reg:SI 0 ax [176])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 idx+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:25 90 {*movsi_internal}
     (nil))
(insn 97 96 98 4 (set (reg:DI 0 ax [orig:106 D.34929 ] [106])
        (sign_extend:DI (reg:SI 0 ax [176]))) /home/kai/git_repos/obme/obmc.cpp:25 142 {*extendsidi2_rex64}
     (nil))
(insn 98 97 99 4 (parallel [
            (set (reg:DI 1 dx [orig:107 D.34929 ] [107])
                (ashift:DI (reg:DI 0 ax [orig:106 D.34929 ] [106])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:25 512 {*ashldi3_1}
     (nil))
(insn 99 98 100 4 (set (reg/f:DI 0 ax [177])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 refFrame+0 S8 A64])) /home/kai/git_repos/obme/obmc.cpp:25 89 {*movdi_internal}
     (nil))
(insn 100 99 101 4 (parallel [
            (set (reg/f:DI 0 ax [orig:108 D.34931 ] [108])
                (plus:DI (reg/f:DI 0 ax [177])
                    (reg:DI 1 dx [orig:107 D.34929 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:25 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 refFrame+0 S8 A64])
            (reg:DI 1 dx [orig:107 D.34929 ] [107]))
        (nil)))
(insn 101 100 102 4 (set (reg/f:DI 0 ax [178])
        (mem/f:DI (reg/f:DI 0 ax [orig:108 D.34931 ] [108]) [0 *_43+0 S8 A64])) /home/kai/git_repos/obme/obmc.cpp:25 89 {*movdi_internal}
     (nil))
(insn 102 101 103 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 ref+0 S8 A64])
        (reg/f:DI 0 ax [178])) /home/kai/git_repos/obme/obmc.cpp:25 89 {*movdi_internal}
     (nil))
(insn 103 102 167 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 y+0 S4 A32])
        (const_int 0 [0])) /home/kai/git_repos/obme/obmc.cpp:26 90 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              9 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 179
(code_label 167 103 104 5 6 "" [1 uses])
(note 104 167 105 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 5 (set (reg:SI 0 ax [179])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 y+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:26 90 {*movsi_internal}
     (nil))
(insn 106 105 107 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [179])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 blocksize+0 S4 A32]))) /home/kai/git_repos/obme/obmc.cpp:26 7 {*cmpsi_1}
     (nil))
(jump_insn 107 106 108 5 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 170)
            (pc))) /home/kai/git_repos/obme/obmc.cpp:26 612 {*jcc_1}
     (nil)
 -> 170)
;;  succ:       10
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 108 107 109 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 109 108 161 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 x+0 S4 A32])
        (const_int 0 [0])) /home/kai/git_repos/obme/obmc.cpp:27 90 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              8 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 180
(code_label 161 109 110 7 5 "" [1 uses])
(note 110 161 111 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 111 110 112 7 (set (reg:SI 0 ax [180])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 x+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:27 90 {*movsi_internal}
     (nil))
(insn 112 111 113 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [180])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 blocksize+0 S4 A32]))) /home/kai/git_repos/obme/obmc.cpp:27 7 {*cmpsi_1}
     (nil))
(jump_insn 113 112 114 7 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 164)
            (pc))) /home/kai/git_repos/obme/obmc.cpp:27 612 {*jcc_1}
     (nil)
 -> 164)
;;  succ:       9
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198
(note 114 113 115 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 115 114 116 8 (set (reg:SI 1 dx [181])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 cX+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:29 90 {*movsi_internal}
     (nil))
(insn 116 115 117 8 (set (reg:SI 0 ax [182])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 x+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:29 90 {*movsi_internal}
     (nil))
(insn 117 116 118 8 (parallel [
            (set (reg:SI 2 cx [orig:109 D.34928 ] [109])
                (plus:SI (reg:SI 1 dx [181])
                    (reg:SI 0 ax [182])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:29 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 cX+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 x+0 S4 A32]))
        (nil)))
(insn 118 117 119 8 (set (reg:SI 1 dx [183])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 cY+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:29 90 {*movsi_internal}
     (nil))
(insn 119 118 120 8 (set (reg:SI 0 ax [184])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 y+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:29 90 {*movsi_internal}
     (nil))
(insn 120 119 121 8 (parallel [
            (set (reg:SI 0 ax [orig:110 D.34928 ] [110])
                (plus:SI (reg:SI 0 ax [184])
                    (reg:SI 1 dx [183])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:29 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 cY+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -44 [0xffffffffffffffd4])) [0 y+0 S4 A32]))
        (nil)))
(insn 121 120 122 8 (parallel [
            (set (reg:SI 0 ax [orig:111 D.34928 ] [111])
                (mult:SI (reg:SI 0 ax [orig:110 D.34928 ] [110])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -76 [0xffffffffffffffb4])) [0 width+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:29 305 {*mulsi3_1}
     (nil))
(insn 122 121 123 8 (parallel [
            (set (reg:SI 0 ax [orig:112 D.34928 ] [112])
                (plus:SI (reg:SI 0 ax [orig:111 D.34928 ] [111])
                    (reg:SI 2 cx [orig:109 D.34928 ] [109])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:29 217 {*addsi_1}
     (nil))
(insn 123 122 124 8 (set (reg:DI 1 dx [orig:113 D.34932 ] [113])
        (sign_extend:DI (reg:SI 0 ax [orig:112 D.34928 ] [112]))) /home/kai/git_repos/obme/obmc.cpp:29 142 {*extendsidi2_rex64}
     (nil))
(insn 124 123 125 8 (set (reg/f:DI 0 ax [185])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 currFrame+0 S8 A64])) /home/kai/git_repos/obme/obmc.cpp:29 89 {*movdi_internal}
     (nil))
(insn 125 124 126 8 (parallel [
            (set (reg/f:DI 2 cx [orig:114 D.34933 ] [114])
                (plus:DI (reg:DI 1 dx [orig:113 D.34932 ] [113])
                    (reg/f:DI 0 ax [185])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:29 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 currFrame+0 S8 A64])
            (reg:DI 1 dx [orig:113 D.34932 ] [113]))
        (nil)))
(insn 126 125 127 8 (set (reg:SI 1 dx [186])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 cX+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:29 90 {*movsi_internal}
     (nil))
(insn 127 126 128 8 (set (reg:SI 0 ax [187])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 x+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:29 90 {*movsi_internal}
     (nil))
(insn 128 127 129 8 (parallel [
            (set (reg:SI 4 si [orig:115 D.34928 ] [115])
                (plus:SI (reg:SI 1 dx [186])
                    (reg:SI 0 ax [187])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:29 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 cX+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 x+0 S4 A32]))
        (nil)))
(insn 129 128 130 8 (set (reg:SI 1 dx [188])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 cY+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:29 90 {*movsi_internal}
     (nil))
(insn 130 129 131 8 (set (reg:SI 0 ax [189])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 y+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:29 90 {*movsi_internal}
     (nil))
(insn 131 130 132 8 (parallel [
            (set (reg:SI 0 ax [orig:116 D.34928 ] [116])
                (plus:SI (reg:SI 0 ax [189])
                    (reg:SI 1 dx [188])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:29 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 cY+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -44 [0xffffffffffffffd4])) [0 y+0 S4 A32]))
        (nil)))
(insn 132 131 133 8 (parallel [
            (set (reg:SI 0 ax [orig:117 D.34928 ] [117])
                (mult:SI (reg:SI 0 ax [orig:116 D.34928 ] [116])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -76 [0xffffffffffffffb4])) [0 width+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:29 305 {*mulsi3_1}
     (nil))
(insn 133 132 134 8 (parallel [
            (set (reg:SI 0 ax [orig:118 D.34928 ] [118])
                (plus:SI (reg:SI 0 ax [orig:117 D.34928 ] [117])
                    (reg:SI 4 si [orig:115 D.34928 ] [115])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:29 217 {*addsi_1}
     (nil))
(insn 134 133 135 8 (set (reg:DI 1 dx [orig:119 D.34932 ] [119])
        (sign_extend:DI (reg:SI 0 ax [orig:118 D.34928 ] [118]))) /home/kai/git_repos/obme/obmc.cpp:29 142 {*extendsidi2_rex64}
     (nil))
(insn 135 134 136 8 (set (reg/f:DI 0 ax [190])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 currFrame+0 S8 A64])) /home/kai/git_repos/obme/obmc.cpp:29 89 {*movdi_internal}
     (nil))
(insn 136 135 137 8 (parallel [
            (set (reg/f:DI 0 ax [orig:120 D.34933 ] [120])
                (plus:DI (reg/f:DI 0 ax [190])
                    (reg:DI 1 dx [orig:119 D.34932 ] [119])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:29 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 currFrame+0 S8 A64])
            (reg:DI 1 dx [orig:119 D.34932 ] [119]))
        (nil)))
(insn 137 136 138 8 (set (reg:QI 0 ax [orig:121 D.34934 ] [121])
        (mem:QI (reg/f:DI 0 ax [orig:120 D.34933 ] [120]) [0 *_59+0 S1 A8])) /home/kai/git_repos/obme/obmc.cpp:29 93 {*movqi_internal}
     (nil))
(insn 138 137 139 8 (set (reg:QI 5 di [orig:122 D.34935 ] [122])
        (reg:QI 0 ax [orig:121 D.34934 ] [121])) /home/kai/git_repos/obme/obmc.cpp:29 93 {*movqi_internal}
     (nil))
(insn 139 138 140 8 (set (reg:SI 1 dx [191])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 mvX+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:29 90 {*movsi_internal}
     (nil))
(insn 140 139 141 8 (set (reg:SI 0 ax [192])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 x+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:29 90 {*movsi_internal}
     (nil))
(insn 141 140 142 8 (parallel [
            (set (reg:SI 4 si [orig:123 D.34928 ] [123])
                (plus:SI (reg:SI 1 dx [191])
                    (reg:SI 0 ax [192])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:29 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 mvX+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 x+0 S4 A32]))
        (nil)))
(insn 142 141 143 8 (set (reg:SI 1 dx [193])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 mvY+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:29 90 {*movsi_internal}
     (nil))
(insn 143 142 144 8 (set (reg:SI 0 ax [194])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 y+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:29 90 {*movsi_internal}
     (nil))
(insn 144 143 145 8 (parallel [
            (set (reg:SI 0 ax [orig:124 D.34928 ] [124])
                (plus:SI (reg:SI 0 ax [194])
                    (reg:SI 1 dx [193])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:29 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [0 mvY+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -44 [0xffffffffffffffd4])) [0 y+0 S4 A32]))
        (nil)))
(insn 145 144 146 8 (parallel [
            (set (reg:SI 0 ax [orig:125 D.34928 ] [125])
                (mult:SI (reg:SI 0 ax [orig:124 D.34928 ] [124])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -76 [0xffffffffffffffb4])) [0 width+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:29 305 {*mulsi3_1}
     (nil))
(insn 146 145 147 8 (parallel [
            (set (reg:SI 0 ax [orig:126 D.34928 ] [126])
                (plus:SI (reg:SI 0 ax [orig:125 D.34928 ] [125])
                    (reg:SI 4 si [orig:123 D.34928 ] [123])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:29 217 {*addsi_1}
     (nil))
(insn 147 146 148 8 (set (reg:DI 1 dx [orig:127 D.34932 ] [127])
        (sign_extend:DI (reg:SI 0 ax [orig:126 D.34928 ] [126]))) /home/kai/git_repos/obme/obmc.cpp:29 142 {*extendsidi2_rex64}
     (nil))
(insn 148 147 149 8 (set (reg/f:DI 0 ax [195])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 ref+0 S8 A64])) /home/kai/git_repos/obme/obmc.cpp:29 89 {*movdi_internal}
     (nil))
(insn 149 148 150 8 (parallel [
            (set (reg/f:DI 0 ax [orig:128 D.34933 ] [128])
                (plus:DI (reg/f:DI 0 ax [195])
                    (reg:DI 1 dx [orig:127 D.34932 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:29 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 ref+0 S8 A64])
            (reg:DI 1 dx [orig:127 D.34932 ] [127]))
        (nil)))
(insn 150 149 151 8 (set (reg:QI 0 ax [orig:129 D.34934 ] [129])
        (mem:QI (reg/f:DI 0 ax [orig:128 D.34933 ] [128]) [0 *_67+0 S1 A8])) /home/kai/git_repos/obme/obmc.cpp:29 93 {*movqi_internal}
     (nil))
(insn 151 150 152 8 (set (reg:SI 0 ax [orig:130 D.34928 ] [130])
        (sign_extend:SI (reg:QI 0 ax [orig:129 D.34934 ] [129]))) /home/kai/git_repos/obme/obmc.cpp:29 148 {extendqisi2}
     (nil))
(insn 152 151 190 8 (set (reg:SI 1 dx [196])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 ratio+0 S4 A32])) /home/kai/git_repos/obme/obmc.cpp:29 90 {*movsi_internal}
     (nil))
(insn 190 152 153 8 (set (reg:SI 4 si [orig:131 D.34928 ] [131])
        (reg:SI 1 dx [196])) /home/kai/git_repos/obme/obmc.cpp:29 90 {*movsi_internal}
     (nil))
(insn 153 190 154 8 (parallel [
            (set (reg:SI 4 si [orig:131 D.34928 ] [131])
                (mult:SI (reg:SI 4 si [orig:131 D.34928 ] [131])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [0 ratio+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:29 305 {*mulsi3_1}
     (nil))
(insn 154 153 156 8 (parallel [
            (set (reg:SI 0 ax [197])
                (div:SI (reg:SI 0 ax [orig:130 D.34928 ] [130])
                    (reg:SI 4 si [orig:131 D.34928 ] [131])))
            (set (reg:SI 1 dx [198])
                (mod:SI (reg:SI 0 ax [orig:130 D.34928 ] [130])
                    (reg:SI 4 si [orig:131 D.34928 ] [131])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:29 341 {*divmodsi4}
     (nil))
(insn 156 154 157 8 (set (reg:QI 0 ax [orig:133 D.34935 ] [133])
        (reg:QI 0 ax [orig:132 D.34928 ] [132])) /home/kai/git_repos/obme/obmc.cpp:29 93 {*movqi_internal}
     (nil))
(insn 157 156 159 8 (parallel [
            (set (reg:QI 0 ax [orig:134 D.34935 ] [134])
                (plus:QI (reg:QI 0 ax [orig:133 D.34935 ] [133])
                    (reg:QI 5 di [orig:122 D.34935 ] [122])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:29 221 {*addqi_1}
     (nil))
(insn 159 157 160 8 (set (mem:QI (reg/f:DI 2 cx [orig:114 D.34933 ] [114]) [0 *_53+0 S1 A8])
        (reg:QI 0 ax [orig:135 D.34934 ] [135])) /home/kai/git_repos/obme/obmc.cpp:29 93 {*movqi_internal}
     (nil))
(insn 160 159 180 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -40 [0xffffffffffffffd8])) [0 x+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [0 x+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:27 217 {*addsi_1}
     (nil))
(jump_insn 180 160 181 8 (set (pc)
        (label_ref 161)) /home/kai/git_repos/obme/obmc.cpp:27 654 {jump}
     (nil)
 -> 161)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 181 180 164)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 164 181 165 9 4 "" [1 uses])
(note 165 164 166 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 166 165 182 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -44 [0xffffffffffffffd4])) [0 y+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -44 [0xffffffffffffffd4])) [0 y+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:26 217 {*addsi_1}
     (nil))
(jump_insn 182 166 183 9 (set (pc)
        (label_ref 167)) /home/kai/git_repos/obme/obmc.cpp:26 654 {jump}
     (nil)
 -> 167)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 183 182 170)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 170 183 171 10 3 "" [1 uses])
(note 171 170 172 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 172 171 184 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obmc.cpp:14 217 {*addsi_1}
     (nil))
(jump_insn 184 172 185 10 (set (pc)
        (label_ref 173)) /home/kai/git_repos/obme/obmc.cpp:14 654 {jump}
     (nil)
 -> 173)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 185 184 187)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 11, flags: (NEW, RTL, MODIFIED)
;;  pred:       3
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 187 185 186 12 8 "" [1 uses])
(note 186 187 188 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 188 186 178 12 (const_int 0 [0]) /home/kai/git_repos/obme/obmc.cpp:33 684 {nop}
     (nil))
;;  succ:       11 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 [100.0%]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 178 188 179 11 1 "" [0 uses])
(note 179 178 189 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 189 179 0 NOTE_INSN_DELETED)

;; Function void __static_initialization_and_destruction_0(int, int) (_Z41__static_initialization_and_destruction_0ii, funcdef_no=1565, decl_uid=34766, cgraph_uid=581, symbol_order=607)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rBwBz {*call}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rBwBz {*call_value}

********** Pseudo live ranges #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


void __static_initialization_and_destruction_0(int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={3d} r1={4d,1u} r2={3d} r4={4d,2u} r5={5d,3u} r6={1d,10u} r7={1d,8u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={4d,2u} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 195{168d,27u,0e} in 13{11 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 __initialize_p+0 S4 A32])
        (reg:SI 5 di [ __initialize_p ])) /home/kai/git_repos/obme/obmc.cpp:33 90 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 __priority+0 S4 A32])
        (reg:SI 4 si [ __priority ])) /home/kai/git_repos/obme/obmc.cpp:33 90 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 __initialize_p+0 S4 A32])
            (const_int 1 [0x1]))) /home/kai/git_repos/obme/obmc.cpp:33 7 {*cmpsi_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 25)
            (pc))) /home/kai/git_repos/obme/obmc.cpp:33 612 {*jcc_1}
     (nil)
 -> 25)
;;  succ:       3 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 __priority+0 S4 A32])
            (const_int 65535 [0xffff]))) /home/kai/git_repos/obme/obmc.cpp:33 7 {*cmpsi_1}
     (nil))
(jump_insn 11 10 12 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 25)
            (pc))) /home/kai/git_repos/obme/obmc.cpp:33 612 {*jcc_1}
     (nil)
 -> 25)
;;  succ:       4 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 4 (set (reg:DI 5 di)
        (symbol_ref:DI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 0x7fbe9848e7e0 __ioinit>)) /usr/include/c++/5/iostream:74 89 {*movdi_internal}
     (nil))
(call_insn 14 13 15 4 (call (mem:QI (symbol_ref:DI ("_ZNSt8ios_base4InitC1Ev") [flags 0x41]  <function_decl 0x7fbe98797e58 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/iostream:74 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 14 16 4 (set (reg:DI 1 dx)
        (symbol_ref:DI ("__dso_handle") [flags 0x42]  <var_decl 0x7fbe9820bab0 __dso_handle>)) /usr/include/c++/5/iostream:74 89 {*movdi_internal}
     (nil))
(insn 16 15 17 4 (set (reg:DI 4 si)
        (symbol_ref:DI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 0x7fbe9848e7e0 __ioinit>)) /usr/include/c++/5/iostream:74 89 {*movdi_internal}
     (nil))
(insn 17 16 18 4 (set (reg:DI 5 di)
        (symbol_ref:DI ("_ZNSt8ios_base4InitD1Ev") [flags 0x41]  <function_decl 0x7fbe987aa0d8 __comp_dtor >)) /usr/include/c++/5/iostream:74 89 {*movdi_internal}
     (nil))
(call_insn 18 17 25 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_atexit") [flags 0x41]  <function_decl 0x7fbe98214000 __cxa_atexit>) [0 __cxa_atexit S1 A8])
            (const_int 0 [0]))) /usr/include/c++/5/iostream:74 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 5, flags: (NEW, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              2
;;              3
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 25 18 23 6 11 "" [2 uses])
(note 23 25 24 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 21 6 (const_int 0 [0]) /home/kai/git_repos/obme/obmc.cpp:33 684 {nop}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 21 24 22 5 9 "" [0 uses])
(note 22 21 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 26 22 0 NOTE_INSN_DELETED)

;; Function (static initializers for /home/kai/git_repos/obme/obmc.cpp) (_GLOBAL__sub_I__Z4obmcPPcS_P6mvinfoiiii, funcdef_no=1566, decl_uid=34772, cgraph_uid=582, symbol_order=729)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rBwBz {*call}

********** Pseudo live ranges #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


(static initializers for /home/kai/git_repos/obme/obmc.cpp)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 4[si] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={3d,1u} r5={3d,1u} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 100{92d,8u,0e} in 3{2 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 4 si)
        (const_int 65535 [0xffff])) /home/kai/git_repos/obme/obmc.cpp:33 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:SI 5 di)
        (const_int 1 [0x1])) /home/kai/git_repos/obme/obmc.cpp:33 90 {*movsi_internal}
     (nil))
(call_insn 7 6 10 2 (call (mem:QI (symbol_ref:DI ("_Z41__static_initialization_and_destruction_0ii") [flags 0x3]  <function_decl 0x7fbe9820dd80 __static_initialization_and_destruction_0>) [0 __static_initialization_and_destruction_0 S1 A8])
        (const_int 0 [0])) /home/kai/git_repos/obme/obmc.cpp:33 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 10 7 0 NOTE_INSN_DELETED)
