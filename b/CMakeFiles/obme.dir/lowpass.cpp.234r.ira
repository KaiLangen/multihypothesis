
;; Function void lowpassFilter(imgpel*, imgpel*, int, int, int) (_Z13lowpassFilterPcS_iii, funcdef_no=0, decl_uid=2339, cgraph_uid=0, symbol_order=0)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 21 n_edges 28 count 21 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r136: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r136,l0) best AREG, allocno GENERAL_REGS
    r135: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r135,l0) best DREG, allocno GENERAL_REGS
    r134: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r134,l0) best AREG, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a1(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:5
  a2(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:4
  a3(r134,l0) costs: AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 GENERAL_REGS:2 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a4(r136,l0) costs: AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 GENERAL_REGS:2 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a5(r135,l0) costs: AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 GENERAL_REGS:2 SSE_FIRST_REG:13 NO_REX_SSE_REGS:13 SSE_REGS:13 MMX_REGS:13 INT_SSE_REGS:13 ALL_REGS:208 MEM:4
  a6(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a7(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a8(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a9(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a10(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a11(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a12(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a13(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a14(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a15(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a16(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a17(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a18(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a19(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a20(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a21(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a22(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a23(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a24(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a25(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a26(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a27(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a28(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a29(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a30(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a31(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a32(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a33(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a34(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a35(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a36(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a37(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a38(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a39(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a40(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a41(r103,l0) costs: AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 GENERAL_REGS:2 SSE_FIRST_REG:30 NO_REX_SSE_REGS:30 SSE_REGS:30 MMX_REGS:40 INT_SSE_REGS:32 ALL_REGS:522 MEM:12
  a42(r104,l0) costs: AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 GENERAL_REGS:2 SSE_FIRST_REG:23 NO_REX_SSE_REGS:23 SSE_REGS:23 MMX_REGS:28 INT_SSE_REGS:24 ALL_REGS:418 MEM:8

   Insn 138(l0): point = 1
   Insn 27(l0): point = 4
   Insn 26(l0): point = 6
   Insn 25(l0): point = 8
   Insn 134(l0): point = 11
   Insn 120(l0): point = 13
   Insn 33(l0): point = 16
   Insn 32(l0): point = 18
   Insn 31(l0): point = 20
   Insn 29(l0): point = 23
   Insn 132(l0): point = 26
   Insn 114(l0): point = 28
   Insn 113(l0): point = 30
   Insn 112(l0): point = 32
   Insn 111(l0): point = 34
   Insn 110(l0): point = 36
   Insn 109(l0): point = 38
   Insn 108(l0): point = 40
   Insn 107(l0): point = 42
   Insn 106(l0): point = 44
   Insn 105(l0): point = 46
   Insn 104(l0): point = 48
   Insn 103(l0): point = 50
   Insn 102(l0): point = 52
   Insn 48(l0): point = 55
   Insn 47(l0): point = 57
   Insn 46(l0): point = 59
   Insn 45(l0): point = 61
   Insn 44(l0): point = 63
   Insn 42(l0): point = 66
   Insn 41(l0): point = 68
   Insn 40(l0): point = 70
   Insn 36(l0): point = 72
   Insn 35(l0): point = 74
   Insn 130(l0): point = 77
   Insn 96(l0): point = 79
   Insn 61(l0): point = 82
   Insn 60(l0): point = 84
   Insn 59(l0): point = 86
   Insn 58(l0): point = 88
   Insn 57(l0): point = 90
   Insn 55(l0): point = 93
   Insn 54(l0): point = 95
   Insn 53(l0): point = 97
   Insn 128(l0): point = 100
   Insn 90(l0): point = 102
   Insn 64(l0): point = 105
   Insn 63(l0): point = 107
   Insn 68(l0): point = 110
   Insn 67(l0): point = 112
   Insn 66(l0): point = 114
   Insn 71(l0): point = 117
   Insn 70(l0): point = 119
   Insn 75(l0): point = 122
   Insn 74(l0): point = 124
   Insn 73(l0): point = 126
   Insn 87(l0): point = 129
   Insn 86(l0): point = 131
   Insn 85(l0): point = 133
   Insn 84(l0): point = 135
   Insn 83(l0): point = 137
   Insn 82(l0): point = 139
   Insn 81(l0): point = 141
   Insn 80(l0): point = 143
   Insn 79(l0): point = 145
   Insn 78(l0): point = 147
   Insn 77(l0): point = 149
   Insn 23(l0): point = 152
   Insn 22(l0): point = 154
   Insn 21(l0): point = 156
   Insn 20(l0): point = 158
   Insn 16(l0): point = 160
   Insn 15(l0): point = 162
   Insn 14(l0): point = 164
   Insn 13(l0): point = 166
   Insn 12(l0): point = 168
   Insn 11(l0): point = 170
   Insn 10(l0): point = 172
   Insn 6(l0): point = 174
   Insn 5(l0): point = 176
   Insn 4(l0): point = 178
   Insn 3(l0): point = 180
   Insn 2(l0): point = 182
 a0(r99): [31..40]
 a1(r101): [31..32]
 a2(r100): [33..34]
 a3(r134): [35..36]
 a4(r136): [37..38]
 a5(r135): [36..36]
 a6(r133): [41..42]
 a7(r98): [41..44]
 a8(r97): [45..46]
 a9(r132): [47..48]
 a10(r96): [47..50]
 a11(r131): [51..52]
 a12(r95): [132..133]
 a13(r94): [134..135]
 a14(r93): [136..137]
 a15(r130): [138..139]
 a16(r92): [138..141]
 a17(r91): [142..143]
 a18(r129): [144..145]
 a19(r90): [144..147]
 a20(r128): [148..149]
 a21(r127): [125..126]
 a22(r126): [113..114]
 a23(r89): [85..86]
 a24(r125): [87..88]
 a25(r124): [87..90]
 a26(r122): [94..95]
 a27(r123): [96..97]
 a28(r88): [58..59]
 a29(r119): [60..61]
 a30(r118): [60..63]
 a31(r116): [67..68]
 a32(r117): [69..70]
 a33(r113): [19..20]
 a34(r112): [7..8]
 a35(r110): [155..156]
 a36(r87): [157..160]
 a37(r111): [157..158]
 a38(r107): [161..162]
 a39(r106): [165..166]
 a40(r105): [167..168]
 a41(r103): [169..172]
 a42(r104): [169..170]
Compressing live ranges: from 185 to 66 - 35%
Ranges after the compression:
 a0(r99): [4..11]
 a1(r101): [4..5]
 a2(r100): [6..7]
 a3(r134): [8..9]
 a4(r136): [10..11]
 a5(r135): [9..9]
 a6(r133): [12..13]
 a7(r98): [12..13]
 a8(r97): [14..15]
 a9(r132): [16..17]
 a10(r96): [16..17]
 a11(r131): [18..19]
 a12(r95): [40..41]
 a13(r94): [42..43]
 a14(r93): [44..45]
 a15(r130): [46..47]
 a16(r92): [46..47]
 a17(r91): [48..49]
 a18(r129): [50..51]
 a19(r90): [50..51]
 a20(r128): [52..53]
 a21(r127): [38..39]
 a22(r126): [36..37]
 a23(r89): [28..29]
 a24(r125): [30..31]
 a25(r124): [30..31]
 a26(r122): [32..33]
 a27(r123): [34..35]
 a28(r88): [20..21]
 a29(r119): [22..23]
 a30(r118): [22..23]
 a31(r116): [24..25]
 a32(r117): [26..27]
 a33(r113): [2..3]
 a34(r112): [0..1]
 a35(r110): [54..55]
 a36(r87): [56..57]
 a37(r111): [56..57]
 a38(r107): [58..59]
 a39(r106): [60..61]
 a40(r105): [62..63]
 a41(r103): [64..65]
 a42(r104): [64..65]
  pref0:a4(r136)<-hr0@1
  pref1:a5(r135)<-hr1@1
  pref2:a3(r134)<-hr0@1
  regions=1, blocks=21, points=66
    allocnos=43 (big 0), copies=0, conflicts=0, ranges=43
Disposition:
   36:r87  l0     1   28:r88  l0     0   23:r89  l0     0   19:r90  l0     1
   17:r91  l0     0   16:r92  l0     1   14:r93  l0     0   13:r94  l0     0
   12:r95  l0     0   10:r96  l0     1    8:r97  l0     0    7:r98  l0     1
    0:r99  l0     2    2:r100 l0     0    1:r101 l0     0   41:r103 l0     0
   42:r104 l0     1   40:r105 l0     0   39:r106 l0     0   38:r107 l0     0
   35:r110 l0     0   37:r111 l0     0   34:r112 l0     0   33:r113 l0     0
   31:r116 l0     0   32:r117 l0     0   30:r118 l0     1   29:r119 l0     0
   26:r122 l0     0   27:r123 l0     0   25:r124 l0     1   24:r125 l0     0
   22:r126 l0     0   21:r127 l0     0   20:r128 l0     0   18:r129 l0     0
   15:r130 l0     0   11:r131 l0     0    9:r132 l0     0    6:r133 l0     0
    3:r134 l0     0    5:r135 l0     1    4:r136 l0     0
+++Costs: overall 4, reg 4, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void lowpassFilter(imgpel*, imgpel*, int, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 1[dx] 2[cx] 4[si] 5[di] 6[bp] 17[flags] 37[r8]
;;  ref usage 	r0={1d} r1={1d,1u} r2={1d,1u} r4={1d,1u} r5={1d,1u} r6={1d,20u} r7={1d,20u} r16={1d,19u} r17={30d,8u} r20={1d,79u,14e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d,1u} r38={1d} r87={1d,1u,1e} r88={1d,1u} r89={1d,1u} r90={1d,1u,1e} r91={1d,1u} r92={1d,1u,1e} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u,1e} r97={1d,1u} r98={1d,1u,1e} r99={1d,1u} r100={1d,1u} r101={1d,1u} r103={1d,2u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d} r136={1d,2u} 
;;    total ref usage 306{92d,195u,19e} in 83{83 regular + 0 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 17 [flags] 87 103 104 105 106 107 110 111
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 src+0 S8 A64])
        (reg:DI 5 di [ src ])) /home/kai/git_repos/obme/lowpass.cpp:6 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ src ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 dst+0 S8 A64])
        (reg:DI 4 si [ dst ])) /home/kai/git_repos/obme/lowpass.cpp:6 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ dst ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -52 [0xffffffffffffffcc])) [0 boxSize+0 S4 A32])
        (reg:SI 1 dx [ boxSize ])) /home/kai/git_repos/obme/lowpass.cpp:6 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ boxSize ])
        (nil)))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 width+0 S4 A32])
        (reg:SI 2 cx [ width ])) /home/kai/git_repos/obme/lowpass.cpp:6 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ width ])
        (nil)))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -60 [0xffffffffffffffc4])) [0 height+0 S4 A32])
        (reg:SI 37 r8 [ height ])) /home/kai/git_repos/obme/lowpass.cpp:6 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [ height ])
        (nil)))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg:SI 103)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -52 [0xffffffffffffffcc])) [0 boxSize+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:7 90 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg:SI 104)
                (lshiftrt:SI (reg:SI 103)
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:7 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 12 11 13 2 (parallel [
            (set (reg:SI 105)
                (plus:SI (reg:SI 104)
                    (reg:SI 103)))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:7 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 104)
        (expr_list:REG_DEAD (reg:SI 103)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 13 12 14 2 (parallel [
            (set (reg:SI 106)
                (ashiftrt:SI (reg:SI 105)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:7 545 {*ashrsi3_1}
     (expr_list:REG_DEAD (reg:SI 105)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 14 13 15 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 left+0 S4 A32])
        (reg:SI 106)) /home/kai/git_repos/obme/lowpass.cpp:7 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 106)
        (nil)))
(insn 15 14 16 2 (set (reg:SI 107)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 left+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:8 90 {*movsi_internal}
     (nil))
(insn 16 15 20 2 (parallel [
            (set (reg:SI 87 [ D.2421 ])
                (plus:SI (reg:SI 107)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:8 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 107)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 left+0 S4 A32])
                    (const_int 1 [0x1]))
                (nil)))))
(insn 20 16 21 2 (set (reg:SI 111)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -52 [0xffffffffffffffcc])) [0 boxSize+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:8 90 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (parallel [
            (set (reg:SI 110)
                (minus:SI (reg:SI 111)
                    (reg:SI 87 [ D.2421 ])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:8 260 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 111)
        (expr_list:REG_DEAD (reg:SI 87 [ D.2421 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                                (const_int -52 [0xffffffffffffffcc])) [0 boxSize+0 S4 A32])
                        (reg:SI 87 [ D.2421 ]))
                    (nil))))))
(insn 22 21 23 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 right+0 S4 A32])
        (reg:SI 110)) /home/kai/git_repos/obme/lowpass.cpp:8 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 110)
        (nil)))
(insn 23 22 121 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 y+0 S4 A32])
        (const_int 0 [0])) /home/kai/git_repos/obme/lowpass.cpp:10 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              18 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 112
(code_label 121 23 24 3 10 "" [1 uses])
(note 24 121 25 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 3 (set (reg:SI 112)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 y+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:10 90 {*movsi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 112)
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -60 [0xffffffffffffffc4])) [0 height+0 S4 A32]))) /home/kai/git_repos/obme/lowpass.cpp:10 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 112)
        (nil)))
(jump_insn 27 26 28 3 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 137)
            (pc))) /home/kai/git_repos/obme/lowpass.cpp:10 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 137)
;;  succ:       20
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 28 27 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 115 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 x+0 S4 A32])
        (const_int 0 [0])) /home/kai/git_repos/obme/lowpass.cpp:11 90 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              17 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 113
(code_label 115 29 30 5 9 "" [1 uses])
(note 30 115 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 5 (set (reg:SI 113)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 x+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:11 90 {*movsi_internal}
     (nil))
(insn 32 31 33 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 113)
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 width+0 S4 A32]))) /home/kai/git_repos/obme/lowpass.cpp:11 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 113)
        (nil)))
(jump_insn 33 32 34 5 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 118)
            (pc))) /home/kai/git_repos/obme/lowpass.cpp:11 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 118)
;;  succ:       18
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 116 117
(note 34 33 35 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 6 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 sum+0 S4 A32])
        (const_int 0 [0])) /home/kai/git_repos/obme/lowpass.cpp:12 90 {*movsi_internal}
     (nil))
(insn 36 35 40 6 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 total+0 S4 A32])
        (const_int 0 [0])) /home/kai/git_repos/obme/lowpass.cpp:13 90 {*movsi_internal}
     (nil))
(insn 40 36 41 6 (set (reg:SI 117)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 y+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:16 90 {*movsi_internal}
     (nil))
(insn 41 40 42 6 (parallel [
            (set (reg:SI 116)
                (minus:SI (reg:SI 117)
                    (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 left+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:16 260 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 117)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -32 [0xffffffffffffffe0])) [0 y+0 S4 A32])
                    (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 left+0 S4 A32]))
                (nil)))))
(insn 42 41 97 6 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
        (reg:SI 116)) /home/kai/git_repos/obme/lowpass.cpp:16 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 116)
        (nil)))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              16 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 118 119
(code_label 97 42 43 7 8 "" [1 uses])
(note 43 97 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 7 (set (reg:SI 118)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 y+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:16 90 {*movsi_internal}
     (nil))
(insn 45 44 46 7 (set (reg:SI 119)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 right+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:16 90 {*movsi_internal}
     (nil))
(insn 46 45 47 7 (parallel [
            (set (reg:SI 88 [ D.2421 ])
                (plus:SI (reg:SI 118)
                    (reg:SI 119)))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:16 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 119)
        (expr_list:REG_DEAD (reg:SI 118)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                                (const_int -32 [0xffffffffffffffe0])) [0 y+0 S4 A32])
                        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                                (const_int -4 [0xfffffffffffffffc])) [0 right+0 S4 A32]))
                    (nil))))))
(insn 47 46 48 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 88 [ D.2421 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32]))) /home/kai/git_repos/obme/lowpass.cpp:16 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 88 [ D.2421 ])
        (nil)))
(jump_insn 48 47 49 7 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 100)
            (pc))) /home/kai/git_repos/obme/lowpass.cpp:16 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 100)
;;  succ:       17
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 122 123
(note 49 48 53 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 53 49 54 8 (set (reg:SI 123)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 x+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:17 90 {*movsi_internal}
     (nil))
(insn 54 53 55 8 (parallel [
            (set (reg:SI 122)
                (minus:SI (reg:SI 123)
                    (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 left+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:17 260 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 123)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -28 [0xffffffffffffffe4])) [0 x+0 S4 A32])
                    (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 left+0 S4 A32]))
                (nil)))))
(insn 55 54 91 8 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (reg:SI 122)) /home/kai/git_repos/obme/lowpass.cpp:17 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 122)
        (nil)))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              15 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 124 125
(code_label 91 55 56 9 7 "" [1 uses])
(note 56 91 57 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 58 9 (set (reg:SI 124)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 x+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:17 90 {*movsi_internal}
     (nil))
(insn 58 57 59 9 (set (reg:SI 125)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 right+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:17 90 {*movsi_internal}
     (nil))
(insn 59 58 60 9 (parallel [
            (set (reg:SI 89 [ D.2421 ])
                (plus:SI (reg:SI 124)
                    (reg:SI 125)))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:17 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 125)
        (expr_list:REG_DEAD (reg:SI 124)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                                (const_int -28 [0xffffffffffffffe4])) [0 x+0 S4 A32])
                        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                                (const_int -4 [0xfffffffffffffffc])) [0 right+0 S4 A32]))
                    (nil))))))
(insn 60 59 61 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 89 [ D.2421 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32]))) /home/kai/git_repos/obme/lowpass.cpp:17 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 89 [ D.2421 ])
        (nil)))
(jump_insn 61 60 62 9 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 94)
            (pc))) /home/kai/git_repos/obme/lowpass.cpp:17 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 94)
;;  succ:       16
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 62 61 63 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 10 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int 0 [0]))) /home/kai/git_repos/obme/lowpass.cpp:18 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 64 63 65 10 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 88)
            (pc))) /home/kai/git_repos/obme/lowpass.cpp:18 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (nil))
 -> 88)
;;  succ:       11 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 126
(note 65 64 66 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 11 (set (reg:SI 126)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:18 90 {*movsi_internal}
     (nil))
(insn 67 66 68 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 126)
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 width+0 S4 A32]))) /home/kai/git_repos/obme/lowpass.cpp:18 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 126)
        (nil)))
(jump_insn 68 67 69 11 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 88)
            (pc))) /home/kai/git_repos/obme/lowpass.cpp:18 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 88)
;;  succ:       12 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 69 68 70 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 71 12 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
            (const_int 0 [0]))) /home/kai/git_repos/obme/lowpass.cpp:18 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 71 70 72 12 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 88)
            (pc))) /home/kai/git_repos/obme/lowpass.cpp:18 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (nil))
 -> 88)
;;  succ:       13 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 127
(note 72 71 73 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 74 13 (set (reg:SI 127)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:19 90 {*movsi_internal}
     (nil))
(insn 74 73 75 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 127)
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -60 [0xffffffffffffffc4])) [0 height+0 S4 A32]))) /home/kai/git_repos/obme/lowpass.cpp:19 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 127)
        (nil)))
(jump_insn 75 74 76 13 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 88)
            (pc))) /home/kai/git_repos/obme/lowpass.cpp:19 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 88)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 93 94 95 128 129 130
(note 76 75 77 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 14 (set (reg:SI 128)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:20 90 {*movsi_internal}
     (nil))
(insn 78 77 79 14 (parallel [
            (set (reg:SI 90 [ D.2421 ])
                (mult:SI (reg:SI 128)
                    (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -56 [0xffffffffffffffc8])) [0 width+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:20 305 {*mulsi3_1}
     (expr_list:REG_DEAD (reg:SI 128)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 79 78 80 14 (set (reg:SI 129)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:20 90 {*movsi_internal}
     (nil))
(insn 80 79 81 14 (parallel [
            (set (reg:SI 91 [ D.2421 ])
                (plus:SI (reg:SI 90 [ D.2421 ])
                    (reg:SI 129)))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:20 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 129)
        (expr_list:REG_DEAD (reg:SI 90 [ D.2421 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:SI (reg:SI 90 [ D.2421 ])
                        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32]))
                    (nil))))))
(insn 81 80 82 14 (set (reg:DI 92 [ D.2422 ])
        (sign_extend:DI (reg:SI 91 [ D.2421 ]))) /home/kai/git_repos/obme/lowpass.cpp:20 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 91 [ D.2421 ])
        (nil)))
(insn 82 81 83 14 (set (reg/f:DI 130)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 src+0 S8 A64])) /home/kai/git_repos/obme/lowpass.cpp:20 89 {*movdi_internal}
     (nil))
(insn 83 82 84 14 (parallel [
            (set (reg/f:DI 93 [ D.2423 ])
                (plus:DI (reg:DI 92 [ D.2422 ])
                    (reg/f:DI 130)))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:20 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 130)
        (expr_list:REG_DEAD (reg:DI 92 [ D.2422 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -40 [0xffffffffffffffd8])) [0 src+0 S8 A64])
                        (reg:DI 92 [ D.2422 ]))
                    (nil))))))
(insn 84 83 85 14 (set (reg:QI 94 [ D.2424 ])
        (mem:QI (reg/f:DI 93 [ D.2423 ]) [0 *_32+0 S1 A8])) /home/kai/git_repos/obme/lowpass.cpp:20 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 93 [ D.2423 ])
        (nil)))
(insn 85 84 86 14 (set (reg:SI 95 [ D.2421 ])
        (sign_extend:SI (reg:QI 94 [ D.2424 ]))) /home/kai/git_repos/obme/lowpass.cpp:20 148 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 94 [ D.2424 ])
        (nil)))
(insn 86 85 87 14 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -24 [0xffffffffffffffe8])) [0 sum+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 sum+0 S4 A32])
                    (reg:SI 95 [ D.2421 ])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:20 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 95 [ D.2421 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 87 86 88 14 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -20 [0xffffffffffffffec])) [0 total+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -20 [0xffffffffffffffec])) [0 total+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:21 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;;              11
;;              12
;;              13
;;              14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 88 87 89 15 6 "" [4 uses])
(note 89 88 90 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 128 15 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:17 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 128 90 129 15 (set (pc)
        (label_ref 91)) /home/kai/git_repos/obme/lowpass.cpp:17 654 {jump}
     (nil)
 -> 91)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 129 128 94)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 94 129 95 16 5 "" [1 uses])
(note 95 94 96 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 130 16 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:16 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 130 96 131 16 (set (pc)
        (label_ref 97)) /home/kai/git_repos/obme/lowpass.cpp:16 654 {jump}
     (nil)
 -> 97)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 131 130 100)
;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 96 97 98 99 100 101 131 132 133 134 135 136
(code_label 100 131 101 17 4 "" [1 uses])
(note 101 100 102 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 103 17 (set (reg:SI 131)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 y+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:24 90 {*movsi_internal}
     (nil))
(insn 103 102 104 17 (parallel [
            (set (reg:SI 96 [ D.2421 ])
                (mult:SI (reg:SI 131)
                    (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -56 [0xffffffffffffffc8])) [0 width+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:24 305 {*mulsi3_1}
     (expr_list:REG_DEAD (reg:SI 131)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 104 103 105 17 (set (reg:SI 132)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 x+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:24 90 {*movsi_internal}
     (nil))
(insn 105 104 106 17 (parallel [
            (set (reg:SI 97 [ D.2421 ])
                (plus:SI (reg:SI 96 [ D.2421 ])
                    (reg:SI 132)))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:24 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 132)
        (expr_list:REG_DEAD (reg:SI 96 [ D.2421 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:SI (reg:SI 96 [ D.2421 ])
                        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                                (const_int -28 [0xffffffffffffffe4])) [0 x+0 S4 A32]))
                    (nil))))))
(insn 106 105 107 17 (set (reg:DI 98 [ D.2422 ])
        (sign_extend:DI (reg:SI 97 [ D.2421 ]))) /home/kai/git_repos/obme/lowpass.cpp:24 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 97 [ D.2421 ])
        (nil)))
(insn 107 106 108 17 (set (reg/f:DI 133)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 dst+0 S8 A64])) /home/kai/git_repos/obme/lowpass.cpp:24 89 {*movdi_internal}
     (nil))
(insn 108 107 109 17 (parallel [
            (set (reg/f:DI 99 [ D.2423 ])
                (plus:DI (reg:DI 98 [ D.2422 ])
                    (reg/f:DI 133)))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:24 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 133)
        (expr_list:REG_DEAD (reg:DI 98 [ D.2422 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -48 [0xffffffffffffffd0])) [0 dst+0 S8 A64])
                        (reg:DI 98 [ D.2422 ]))
                    (nil))))))
(insn 109 108 110 17 (set (reg:SI 136)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 sum+0 S4 A32])) /home/kai/git_repos/obme/lowpass.cpp:24 90 {*movsi_internal}
     (nil))
(insn 110 109 111 17 (parallel [
            (set (reg:SI 134)
                (div:SI (reg:SI 136)
                    (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -20 [0xffffffffffffffec])) [0 total+0 S4 A32])))
            (set (reg:SI 135)
                (mod:SI (reg:SI 136)
                    (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -20 [0xffffffffffffffec])) [0 total+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:24 341 {*divmodsi4}
     (expr_list:REG_DEAD (reg:SI 136)
        (expr_list:REG_UNUSED (reg:SI 135)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 111 110 112 17 (set (reg:SI 100 [ D.2421 ])
        (reg:SI 134)) /home/kai/git_repos/obme/lowpass.cpp:24 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 134)
        (nil)))
(insn 112 111 113 17 (set (reg:QI 101 [ D.2424 ])
        (subreg:QI (reg:SI 100 [ D.2421 ]) 0)) /home/kai/git_repos/obme/lowpass.cpp:24 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 100 [ D.2421 ])
        (nil)))
(insn 113 112 114 17 (set (mem:QI (reg/f:DI 99 [ D.2423 ]) [0 *_43+0 S1 A8])
        (reg:QI 101 [ D.2424 ])) /home/kai/git_repos/obme/lowpass.cpp:24 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 101 [ D.2424 ])
        (expr_list:REG_DEAD (reg/f:DI 99 [ D.2423 ])
            (nil))))
(insn 114 113 132 17 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -28 [0xffffffffffffffe4])) [0 x+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -28 [0xffffffffffffffe4])) [0 x+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:11 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 132 114 133 17 (set (pc)
        (label_ref 115)) /home/kai/git_repos/obme/lowpass.cpp:11 654 {jump}
     (nil)
 -> 115)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 133 132 118)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 118 133 119 18 3 "" [1 uses])
(note 119 118 120 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 120 119 134 18 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -32 [0xffffffffffffffe0])) [0 y+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -32 [0xffffffffffffffe0])) [0 y+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/lowpass.cpp:10 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 134 120 135 18 (set (pc)
        (label_ref 121)) /home/kai/git_repos/obme/lowpass.cpp:10 654 {jump}
     (nil)
 -> 121)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 135 134 137)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 19, flags: (NEW, RTL, MODIFIED)
;;  pred:       3
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 137 135 136 20 11 "" [1 uses])
(note 136 137 138 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 138 136 126 20 (const_int 0 [0]) /home/kai/git_repos/obme/lowpass.cpp:26 684 {nop}
     (nil))
;;  succ:       19 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 [100.0%]  (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 126 138 127 19 1 "" [0 uses])
(note 127 126 0 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

