
;; Function int calcSAD(imgpel*, imgpel*, int, int) (_Z7calcSADPcS_ii, funcdef_no=1384, decl_uid=33301, cgraph_uid=400, symbol_order=402)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 25:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 29
	 Choosing alt 0 in insn 29:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 30:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 31:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 35:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 39
	 Choosing alt 0 in insn 39:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 40:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 41:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 44:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=115 from oldreg=99, assigning class GENERAL_REGS to r115
   44: {r115:SI=r115:SI-r98:SI;clobber flags:CC;}
      REG_DEAD r98:SI
      REG_DEAD r97:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   76: r115:SI=r97:SI
    Inserting insn reload after:
   77: r99:SI=r115:SI

            0 Costly set: reject++
            1 Costly set: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =*d  (1) *a {ashrsi3_cvt}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =rm  (1) 0  (2) re {*subsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            alt=1,overall=12,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 48:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 49:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 55:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 69: point = 0
   Insn 68: point = 0
   Insn 64: point = 1
   Insn 61: point = 3
  BB 3
   Insn 14: point = 4
   Insn 13: point = 4
   Insn 12: point = 5
  BB 7
   Insn 73: point = 6
   Insn 55: point = 6
  BB 5
   Insn 20: point = 6
   Insn 19: point = 6
   Insn 18: point = 7
  BB 6
   Insn 71: point = 8
   Insn 49: point = 8
   Insn 48: point = 8
   Insn 47: point = 9
   Insn 46: point = 10
   Insn 45: point = 12
   Insn 77: point = 13
	Hard reg 0 is preferable by r115 with profit 1
   Insn 44: point = 15
   Insn 76: point = 16
	Hard reg 0 is preferable by r115 with profit 1
	Hard reg 1 is preferable by r115 with profit 1
   Insn 43: point = 18
   Insn 42: point = 19
   Insn 41: point = 20
   Insn 40: point = 21
   Insn 39: point = 23
   Insn 38: point = 25
   Insn 37: point = 26
   Insn 36: point = 28
   Insn 35: point = 30
   Insn 34: point = 32
   Insn 33: point = 33
   Insn 32: point = 35
   Insn 31: point = 36
   Insn 30: point = 37
   Insn 29: point = 39
   Insn 28: point = 41
   Insn 27: point = 42
   Insn 26: point = 44
   Insn 25: point = 46
   Insn 24: point = 48
   Insn 23: point = 49
   Insn 22: point = 51
  BB 4
   Insn 16: point = 52
  BB 2
   Insn 10: point = 52
   Insn 9: point = 52
   Insn 5: point = 52
   Insn 4: point = 52
   Insn 3: point = 52
   Insn 2: point = 52
 r87: [43..49]
 r88: [45..46]
 r89: [43..44]
 r90: [40..42]
 r91: [38..39]
 r92: [27..33]
 r93: [29..30]
 r94: [27..28]
 r95: [24..26]
 r96: [22..23]
 r97: [17..19]
 r98: [15..18]
 r99: [11..13]
 r100: [8..10]
 r101: [2..3]
 r102: [0..1]
 r103: [4..5]
 r104: [6..7]
 r105: [50..51]
 r106: [47..48]
 r107: [40..41]
 r108: [36..37]
 r109: [34..35]
 r110: [31..32]
 r111: [24..25]
 r112: [20..21]
 r113: [9..12]
 r115: [14..16]
Compressing live ranges: from 52 to 44 - 84%
Ranges after the compression:
 r87: [36..41]
 r88: [38..39]
 r89: [36..37]
 r90: [34..35]
 r91: [32..33]
 r92: [22..27]
 r93: [24..25]
 r94: [22..23]
 r95: [20..21]
 r96: [18..19]
 r97: [14..15]
 r98: [12..15]
 r99: [10..11]
 r100: [8..9]
 r101: [2..3]
 r102: [0..1]
 r103: [4..5]
 r104: [6..7]
 r105: [42..43]
 r106: [40..41]
 r107: [34..35]
 r108: [30..31]
 r109: [28..29]
 r110: [26..27]
 r111: [20..21]
 r112: [16..17]
 r113: [8..11]
 r115: [12..13]

********** Assignment #1: **********

	 Assigning to 115 (cl=GENERAL_REGS, orig=99, freq=3, tfirst=115, tfreq=3)...
	   Assign 1 to reload r115 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 23
changing reg in insn 27
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 33
changing reg in insn 37
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 47
changing reg in insn 46
changing reg in insn 48
changing reg in insn 47
changing reg in insn 61
changing reg in insn 64
changing reg in insn 64
changing reg in insn 68
changing reg in insn 12
changing reg in insn 13
changing reg in insn 18
changing reg in insn 19
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 28
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 38
changing reg in insn 40
changing reg in insn 41
changing reg in insn 45
changing reg in insn 47
deleting insn with uid = 76.
starting the processing of deferred insns
ending the processing of deferred insns


int calcSAD(imgpel*, imgpel*, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 17[flags]
;;  ref usage 	r0={24d,25u} r1={8d,9u,2e} r2={1d,1u} r4={1d,1u} r5={1d,1u} r6={1d,38u} r7={1d,8u} r17={15d,2u} r20={1d,1u,2e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 153{63d,86u,4e} in 49{49 regular + 0 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 blk1+0 S8 A64])
        (reg:DI 5 di [ blk1 ])) /home/kai/git_repos/obme/obme.cpp:9 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 blk2+0 S8 A64])
        (reg:DI 4 si [ blk2 ])) /home/kai/git_repos/obme/obme.cpp:9 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 width+0 S4 A32])
        (reg:SI 1 dx [ width ])) /home/kai/git_repos/obme/obme.cpp:9 90 {*movsi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 blocksize+0 S4 A32])
        (reg:SI 2 cx [ blocksize ])) /home/kai/git_repos/obme/obme.cpp:9 90 {*movsi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 sad+0 S4 A32])
        (const_int 0 [0])) /home/kai/git_repos/obme/obme.cpp:10 90 {*movsi_internal}
     (nil))
(insn 10 9 56 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 y+0 S4 A32])
        (const_int 0 [0])) /home/kai/git_repos/obme/obme.cpp:11 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              7 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 103
(code_label 56 10 11 3 5 "" [1 uses])
(note 11 56 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg:SI 0 ax [103])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 y+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:11 90 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [103])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 blocksize+0 S4 A32]))) /home/kai/git_repos/obme/obme.cpp:11 7 {*cmpsi_1}
     (nil))
(jump_insn 14 13 15 3 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 59)
            (pc))) /home/kai/git_repos/obme/obme.cpp:11 612 {*jcc_1}
     (nil)
 -> 59)
;;  succ:       8
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 50 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 x+0 S4 A32])
        (const_int 0 [0])) /home/kai/git_repos/obme/obme.cpp:12 90 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              6 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 104
(code_label 50 16 17 5 4 "" [1 uses])
(note 17 50 18 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 5 (set (reg:SI 0 ax [104])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 x+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:12 90 {*movsi_internal}
     (nil))
(insn 19 18 20 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [104])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 blocksize+0 S4 A32]))) /home/kai/git_repos/obme/obme.cpp:12 7 {*cmpsi_1}
     (nil))
(jump_insn 20 19 21 5 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 53)
            (pc))) /home/kai/git_repos/obme/obme.cpp:12 612 {*jcc_1}
     (nil)
 -> 53)
;;  succ:       7
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 105 106 107 108 109 110 111 112 113
(note 21 20 22 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 6 (set (reg:SI 0 ax [105])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 x+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:14 90 {*movsi_internal}
     (nil))
(insn 23 22 24 6 (set (reg:DI 1 dx [orig:87 D.35021 ] [87])
        (sign_extend:DI (reg:SI 0 ax [105]))) /home/kai/git_repos/obme/obme.cpp:14 142 {*extendsidi2_rex64}
     (nil))
(insn 24 23 25 6 (set (reg:SI 0 ax [106])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 y+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:14 90 {*movsi_internal}
     (nil))
(insn 25 24 26 6 (parallel [
            (set (reg:SI 0 ax [orig:88 D.35022 ] [88])
                (mult:SI (reg:SI 0 ax [106])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [0 width+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:14 305 {*mulsi3_1}
     (nil))
(insn 26 25 27 6 (set (reg:DI 0 ax [orig:89 D.35021 ] [89])
        (sign_extend:DI (reg:SI 0 ax [orig:88 D.35022 ] [88]))) /home/kai/git_repos/obme/obme.cpp:14 142 {*extendsidi2_rex64}
     (nil))
(insn 27 26 28 6 (parallel [
            (set (reg:DI 1 dx [orig:90 D.35021 ] [90])
                (plus:DI (reg:DI 1 dx [orig:87 D.35021 ] [87])
                    (reg:DI 0 ax [orig:89 D.35021 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:14 218 {*adddi_1}
     (nil))
(insn 28 27 29 6 (set (reg/f:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 blk1+0 S8 A64])) /home/kai/git_repos/obme/obme.cpp:14 89 {*movdi_internal}
     (nil))
(insn 29 28 30 6 (parallel [
            (set (reg/f:DI 0 ax [orig:91 D.35023 ] [91])
                (plus:DI (reg/f:DI 0 ax [107])
                    (reg:DI 1 dx [orig:90 D.35021 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:14 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 blk1+0 S8 A64])
            (reg:DI 1 dx [orig:90 D.35021 ] [90]))
        (nil)))
(insn 30 29 31 6 (set (reg:QI 0 ax [108])
        (mem:QI (reg/f:DI 0 ax [orig:91 D.35023 ] [91]) [0 *_15+0 S1 A8])) /home/kai/git_repos/obme/obme.cpp:14 93 {*movqi_internal}
     (nil))
(insn 31 30 32 6 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -14 [0xfffffffffffffff2])) [0 pel1+0 S1 A8])
        (reg:QI 0 ax [108])) /home/kai/git_repos/obme/obme.cpp:14 93 {*movqi_internal}
     (nil))
(insn 32 31 33 6 (set (reg:SI 0 ax [109])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 x+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:15 90 {*movsi_internal}
     (nil))
(insn 33 32 34 6 (set (reg:DI 1 dx [orig:92 D.35021 ] [92])
        (sign_extend:DI (reg:SI 0 ax [109]))) /home/kai/git_repos/obme/obme.cpp:15 142 {*extendsidi2_rex64}
     (nil))
(insn 34 33 35 6 (set (reg:SI 0 ax [110])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 y+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:15 90 {*movsi_internal}
     (nil))
(insn 35 34 36 6 (parallel [
            (set (reg:SI 0 ax [orig:93 D.35022 ] [93])
                (mult:SI (reg:SI 0 ax [110])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [0 width+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:15 305 {*mulsi3_1}
     (nil))
(insn 36 35 37 6 (set (reg:DI 0 ax [orig:94 D.35021 ] [94])
        (sign_extend:DI (reg:SI 0 ax [orig:93 D.35022 ] [93]))) /home/kai/git_repos/obme/obme.cpp:15 142 {*extendsidi2_rex64}
     (nil))
(insn 37 36 38 6 (parallel [
            (set (reg:DI 1 dx [orig:95 D.35021 ] [95])
                (plus:DI (reg:DI 1 dx [orig:92 D.35021 ] [92])
                    (reg:DI 0 ax [orig:94 D.35021 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:15 218 {*adddi_1}
     (nil))
(insn 38 37 39 6 (set (reg/f:DI 0 ax [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 blk2+0 S8 A64])) /home/kai/git_repos/obme/obme.cpp:15 89 {*movdi_internal}
     (nil))
(insn 39 38 40 6 (parallel [
            (set (reg/f:DI 0 ax [orig:96 D.35023 ] [96])
                (plus:DI (reg/f:DI 0 ax [111])
                    (reg:DI 1 dx [orig:95 D.35021 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:15 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 blk2+0 S8 A64])
            (reg:DI 1 dx [orig:95 D.35021 ] [95]))
        (nil)))
(insn 40 39 41 6 (set (reg:QI 0 ax [112])
        (mem:QI (reg/f:DI 0 ax [orig:96 D.35023 ] [96]) [0 *_23+0 S1 A8])) /home/kai/git_repos/obme/obme.cpp:15 93 {*movqi_internal}
     (nil))
(insn 41 40 42 6 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -13 [0xfffffffffffffff3])) [0 pel2+0 S1 A8])
        (reg:QI 0 ax [112])) /home/kai/git_repos/obme/obme.cpp:15 93 {*movqi_internal}
     (nil))
(insn 42 41 43 6 (set (reg:SI 1 dx [orig:97 D.35022 ] [97])
        (sign_extend:SI (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -14 [0xfffffffffffffff2])) [0 pel1+0 S1 A8]))) /home/kai/git_repos/obme/obme.cpp:16 148 {extendqisi2}
     (nil))
(insn 43 42 44 6 (set (reg:SI 0 ax [orig:98 D.35022 ] [98])
        (sign_extend:SI (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -13 [0xfffffffffffffff3])) [0 pel2+0 S1 A8]))) /home/kai/git_repos/obme/obme.cpp:16 148 {extendqisi2}
     (nil))
(insn 44 43 77 6 (parallel [
            (set (reg:SI 1 dx [orig:99 D.35022 ] [99])
                (minus:SI (reg:SI 1 dx [orig:99 D.35022 ] [99])
                    (reg:SI 0 ax [orig:98 D.35022 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:16 260 {*subsi_1}
     (nil))
(insn 77 44 45 6 (set (reg:SI 0 ax [orig:99 D.35022 ] [99])
        (reg:SI 1 dx [orig:99 D.35022 ] [99])) /home/kai/git_repos/obme/obme.cpp:16 90 {*movsi_internal}
     (nil))
(insn 45 77 46 6 (parallel [
            (set (reg:SI 1 dx [113])
                (ashiftrt:SI (reg:SI 0 ax [orig:99 D.35022 ] [99])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:16 538 {ashrsi3_cvt}
     (nil))
(insn 46 45 47 6 (parallel [
            (set (reg:SI 0 ax [orig:100 D.35022 ] [100])
                (xor:SI (reg:SI 0 ax [orig:99 D.35022 ] [99])
                    (reg:SI 1 dx [113])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:16 400 {*xorsi_1}
     (nil))
(insn 47 46 48 6 (parallel [
            (set (reg:SI 0 ax [orig:100 D.35022 ] [100])
                (minus:SI (reg:SI 0 ax [orig:100 D.35022 ] [100])
                    (reg:SI 1 dx [113])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:16 260 {*subsi_1}
     (nil))
(insn 48 47 49 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 sad+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 sad+0 S4 A32])
                    (reg:SI 0 ax [orig:100 D.35022 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:16 217 {*addsi_1}
     (nil))
(insn 49 48 71 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 x+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 x+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:12 217 {*addsi_1}
     (nil))
(jump_insn 71 49 72 6 (set (pc)
        (label_ref 50)) /home/kai/git_repos/obme/obme.cpp:12 654 {jump}
     (nil)
 -> 50)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 72 71 53)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 53 72 54 7 3 "" [1 uses])
(note 54 53 55 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 73 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 y+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 y+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:11 217 {*addsi_1}
     (nil))
(jump_insn 73 55 74 7 (set (pc)
        (label_ref 56)) /home/kai/git_repos/obme/obme.cpp:11 654 {jump}
     (nil)
 -> 56)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 74 73 59)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 101 102
(code_label 59 74 60 8 2 "" [1 uses])
(note 60 59 61 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 61 60 64 8 (set (reg:SI 0 ax [orig:101 D.35022 ] [101])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 sad+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:18 90 {*movsi_internal}
     (nil))
(insn 64 61 68 8 (set (reg:SI 0 ax [orig:102 <retval> ] [102])
        (reg:SI 0 ax [orig:101 D.35022 ] [101])) /home/kai/git_repos/obme/obme.cpp:18 90 {*movsi_internal}
     (nil))
(insn 68 64 69 8 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:102 <retval> ] [102])) /home/kai/git_repos/obme/obme.cpp:19 90 {*movsi_internal}
     (nil))
(insn 69 68 75 8 (use (reg/i:SI 0 ax)) /home/kai/git_repos/obme/obme.cpp:19 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 75 69 0 NOTE_INSN_DELETED)

;; Function void ES(imgpel*, imgpel*, mvinfo&, int, int, int, int, int) (_Z2ESPcS_R6mvinfoiiiii, funcdef_no=1385, decl_uid=33320, cgraph_uid=401, symbol_order=403)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=104, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=88, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
            1 Early clobber: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =a  (1) =&d  (2) 0  (3) rm {*divmodsi4}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
            1 Early clobber: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =a  (1) =&d  (2) 0  (3) rm {*divmodsi4}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =rm  (1) 0 {*negsi2_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =rm  (1) 0 {*negsi2_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 54
	 Choosing alt 0 in insn 54:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) r  (1) 0  (2) rm {*subsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) r  (1) 0  (2) rm {*subsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 84:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=163 from oldreg=89, assigning class GENERAL_REGS to r163
   84: {r163:SI=r163:SI*[frame:DI-0x54];clobber flags:CC;}
      REG_DEAD r131:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  167: r163:SI=r131:SI
    Inserting insn reload after:
  168: r89:SI=r163:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 86
	 Choosing alt 0 in insn 86:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 88:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 91:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 102:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 108:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=164 from oldreg=96, assigning class GENERAL_REGS to r164
  108: {r164:SI=r164:SI*[frame:DI-0x54];clobber flags:CC;}
      REG_DEAD r139:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  169: r164:SI=r139:SI
    Inserting insn reload after:
  170: r96:SI=r164:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 113
	 Choosing alt 0 in insn 113:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 116:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 119:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 125:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =r  (1) g {*movsi_internal}
            1 Early clobber: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =a  (1) =&d  (2) 0  (3) rm {*divmodsi4}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 133:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) g {*movsi_internal}
            1 Early clobber: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =a  (1) =&d  (2) 0  (3) rm {*divmodsi4}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 136:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 137:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 139:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 140:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 142:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=15,losers=2,rld_nregs=2
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 144:  (0) r  (1) 0  (2) rm {*subsi_1}
      Creating newreg=165 from oldreg=97, assigning class GENERAL_REGS to r165
  144: {r165:SI=r165:SI-[frame:DI-0x10];clobber flags:CC;}
      REG_DEAD r157:SI
      REG_UNUSED flags:CC
      REG_EQUAL [frame:DI-0x8]-[frame:DI-0x10]
    Inserting insn reload before:
  171: r165:SI=r157:SI
    Inserting insn reload after:
  172: r97:SI=r165:SI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 145:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 146:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=15,losers=2,rld_nregs=2
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 148:  (0) r  (1) 0  (2) rm {*subsi_1}
      Creating newreg=166 from oldreg=98, assigning class GENERAL_REGS to r166
  148: {r166:SI=r166:SI-[frame:DI-0x14];clobber flags:CC;}
      REG_DEAD r159:SI
      REG_UNUSED flags:CC
      REG_EQUAL [frame:DI-0xc]-[frame:DI-0x14]
    Inserting insn reload before:
  173: r166:SI=r159:SI
    Inserting insn reload after:
  174: r98:SI=r166:SI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 149:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 150:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 151:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 153:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 17
EBB 14
EBB 15
EBB 16

********** Pseudo live ranges #1: **********

  BB 16
   Insn 156: point = 0
   Insn 153: point = 0
   Insn 152: point = 1
   Insn 151: point = 2
   Insn 150: point = 3
   Insn 149: point = 4
   Insn 174: point = 5
	Hard reg 1 is preferable by r166 with profit 1
   Insn 148: point = 7
   Insn 173: point = 7
	Hard reg 1 is preferable by r166 with profit 1
	Hard reg 0 is preferable by r166 with profit 1
   Insn 147: point = 9
   Insn 146: point = 10
   Insn 145: point = 11
   Insn 172: point = 12
	Hard reg 1 is preferable by r165 with profit 1
   Insn 144: point = 14
   Insn 171: point = 14
	Hard reg 1 is preferable by r165 with profit 1
	Hard reg 0 is preferable by r165 with profit 1
   Insn 143: point = 16
   Insn 142: point = 17
   Insn 141: point = 18
   Insn 140: point = 19
   Insn 139: point = 20
   Insn 138: point = 21
   Insn 137: point = 22
   Insn 136: point = 23
   Insn 135: point = 24
   Insn 134: point = 26
   Insn 133: point = 27
   Insn 132: point = 28
   Insn 131: point = 30
  BB 3
   Insn 27: point = 31
   Insn 26: point = 31
   Insn 25: point = 32
  BB 15
   Insn 159: point = 33
   Insn 125: point = 33
  BB 5
   Insn 38: point = 33
   Insn 37: point = 33
   Insn 36: point = 34
  BB 14
   Insn 157: point = 35
   Insn 119: point = 35
  BB 17
   Insn 165: point = 35
  BB 13
   Insn 161: point = 35
   Insn 116: point = 35
   Insn 115: point = 36
   Insn 114: point = 37
   Insn 113: point = 38
   Insn 112: point = 40
   Insn 170: point = 41
	Hard reg 1 is preferable by r164 with profit 1
   Insn 108: point = 43
   Insn 169: point = 43
	Hard reg 1 is preferable by r164 with profit 1
	Hard reg 0 is preferable by r164 with profit 1
   Insn 107: point = 45
  BB 12
   Insn 105: point = 46
   Insn 104: point = 46
   Insn 103: point = 47
   Insn 102: point = 48
   Insn 101: point = 49
   Insn 100: point = 50
   Insn 99: point = 50
   Insn 98: point = 51
   Insn 97: point = 52
   Insn 96: point = 53
   Insn 95: point = 54
   Insn 94: point = 55
   Insn 93: point = 56
   Insn 92: point = 58
   Insn 91: point = 59
   Insn 90: point = 61
   Insn 89: point = 62
   Insn 88: point = 64
   Insn 87: point = 65
   Insn 86: point = 67
   Insn 85: point = 69
   Insn 168: point = 70
	Hard reg 1 is preferable by r163 with profit 1
   Insn 84: point = 72
   Insn 167: point = 72
	Hard reg 1 is preferable by r163 with profit 1
	Hard reg 0 is preferable by r163 with profit 1
   Insn 83: point = 74
  BB 11
   Insn 76: point = 75
   Insn 75: point = 75
  BB 10
   Insn 73: point = 75
   Insn 72: point = 75
  BB 9
   Insn 70: point = 75
   Insn 69: point = 75
   Insn 68: point = 76
   Insn 67: point = 78
  BB 8
   Insn 65: point = 79
   Insn 64: point = 79
  BB 7
   Insn 62: point = 79
   Insn 61: point = 79
   Insn 60: point = 80
   Insn 59: point = 82
  BB 6
   Insn 57: point = 83
   Insn 56: point = 83
   Insn 55: point = 83
   Insn 54: point = 84
   Insn 53: point = 86
   Insn 52: point = 87
   Insn 47: point = 88
   Insn 46: point = 89
   Insn 45: point = 91
   Insn 44: point = 92
  BB 4
   Insn 34: point = 93
   Insn 33: point = 94
   Insn 32: point = 96
  BB 2
   Insn 23: point = 97
   Insn 22: point = 98
   Insn 21: point = 100
   Insn 17: point = 101
   Insn 16: point = 102
   Insn 15: point = 104
   Insn 14: point = 105
   Insn 13: point = 106
   Insn 12: point = 108
   Insn 11: point = 109
   Insn 7: point = 109
   Insn 6: point = 109
   Insn 5: point = 109
   Insn 4: point = 109
   Insn 3: point = 109
   Insn 2: point = 109
 r87: [79..80]
 r88: [75..76]
 r89: [68..70]
 r90: [66..67]
 r91: [63..65]
 r92: [51..62]
 r93: [57..59]
 r94: [50..56]
 r95: [48..49]
 r96: [39..41]
 r97: [10..12]
 r98: [3..5]
 r100: [105..106]
 r101: [106..107]
 r102: [107..108]
 r104: [103..104]
 r105: [101..103]
 r106: [102..102]
 r109: [97..98]
 r110: [99..100]
 r111: [31..32]
 r114: [93..94]
 r115: [95..96]
 r116: [33..34]
 r120: [88..89]
 r121: [90..92]
 r122: [90..91]
 r126: [83..84]
 r127: [85..87]
 r128: [85..86]
 r129: [81..82]
 r130: [77..78]
 r131: [73..74]
 r132: [68..69]
 r133: [63..64]
 r134: [60..61]
 r135: [57..58]
 r136: [53..55]
 r137: [52..54]
 r138: [46..47]
 r139: [44..45]
 r142: [37..38]
 r143: [39..40]
 r144: [35..36]
 r146: [29..30]
 r147: [27..29]
 r148: [28..28]
 r150: [23..24]
 r151: [24..25]
 r152: [25..26]
 r153: [20..22]
 r154: [20..21]
 r155: [17..19]
 r156: [17..18]
 r157: [15..16]
 r158: [10..11]
 r159: [8..9]
 r160: [3..4]
 r161: [0..2]
 r162: [0..1]
 r163: [71..72]
 r164: [42..43]
 r165: [13..14]
 r166: [6..7]
Compressing live ranges: from 109 to 92 - 84%
Ranges after the compression:
 r87: [64..65]
 r88: [60..61]
 r89: [54..55]
 r90: [52..53]
 r91: [50..51]
 r92: [44..49]
 r93: [46..47]
 r94: [44..45]
 r95: [42..43]
 r96: [34..35]
 r97: [8..9]
 r98: [2..3]
 r100: [88..89]
 r101: [89..90]
 r102: [90..91]
 r104: [86..87]
 r105: [84..86]
 r106: [85..85]
 r109: [80..81]
 r110: [82..83]
 r111: [26..27]
 r114: [76..77]
 r115: [78..79]
 r116: [28..29]
 r120: [72..73]
 r121: [74..75]
 r122: [74..75]
 r126: [68..69]
 r127: [70..71]
 r128: [70..71]
 r129: [66..67]
 r130: [62..63]
 r131: [58..59]
 r132: [54..55]
 r133: [50..51]
 r134: [48..49]
 r135: [46..47]
 r136: [44..45]
 r137: [44..45]
 r138: [40..41]
 r139: [38..39]
 r142: [32..33]
 r143: [34..35]
 r144: [30..31]
 r146: [24..25]
 r147: [22..24]
 r148: [23..23]
 r150: [18..19]
 r151: [19..20]
 r152: [20..21]
 r153: [16..17]
 r154: [16..17]
 r155: [14..15]
 r156: [14..15]
 r157: [12..13]
 r158: [8..9]
 r159: [6..7]
 r160: [2..3]
 r161: [0..1]
 r162: [0..1]
 r163: [56..57]
 r164: [36..37]
 r165: [10..11]
 r166: [4..5]

********** Assignment #1: **********

	 Assigning to 163 (cl=GENERAL_REGS, orig=89, freq=3, tfirst=163, tfreq=3)...
	   Assign 0 to reload r163 (freq=3)
	 Assigning to 164 (cl=GENERAL_REGS, orig=96, freq=3, tfirst=164, tfreq=3)...
	   Assign 0 to reload r164 (freq=3)
	 Assigning to 165 (cl=GENERAL_REGS, orig=97, freq=3, tfirst=165, tfreq=3)...
	   Assign 0 to reload r165 (freq=3)
	 Assigning to 166 (cl=GENERAL_REGS, orig=98, freq=3, tfirst=166, tfreq=3)...
	   Assign 0 to reload r166 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=104, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=88, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 60
changing reg in insn 61
changing reg in insn 68
changing reg in insn 69
changing reg in insn 86
changing reg in insn 86
changing reg in insn 87
changing reg in insn 87
changing reg in insn 89
changing reg in insn 89
changing reg in insn 89
changing reg in insn 98
changing reg in insn 91
changing reg in insn 93
changing reg in insn 93
changing reg in insn 93
changing reg in insn 99
changing reg in insn 101
changing reg in insn 102
changing reg in insn 113
changing reg in insn 146
changing reg in insn 150
changing reg in insn 13
changing reg in insn 14
changing reg in insn 13
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 16
changing reg in insn 22
changing reg in insn 23
changing reg in insn 21
changing reg in insn 22
changing reg in insn 25
changing reg in insn 26
changing reg in insn 33
changing reg in insn 34
changing reg in insn 32
changing reg in insn 33
changing reg in insn 36
changing reg in insn 37
changing reg in insn 46
changing reg in insn 47
changing reg in insn 44
changing reg in insn 45
changing reg in insn 54
changing reg in insn 55
changing reg in insn 52
changing reg in insn 53
changing reg in insn 59
changing reg in insn 60
changing reg in insn 67
changing reg in insn 68
changing reg in insn 83
changing reg in insn 85
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 96
changing reg in insn 95
changing reg in insn 97
changing reg in insn 103
changing reg in insn 104
changing reg in insn 107
changing reg in insn 113
changing reg in insn 114
changing reg in insn 112
changing reg in insn 115
changing reg in insn 116
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 132
changing reg in insn 133
changing reg in insn 132
changing reg in insn 135
changing reg in insn 136
changing reg in insn 135
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 137
changing reg in insn 139
changing reg in insn 138
changing reg in insn 139
changing reg in insn 140
changing reg in insn 142
changing reg in insn 141
changing reg in insn 142
changing reg in insn 143
changing reg in insn 145
changing reg in insn 146
changing reg in insn 147
changing reg in insn 149
changing reg in insn 150
changing reg in insn 151
changing reg in insn 153
changing reg in insn 152
changing reg in insn 153
deleting insn with uid = 167.
deleting insn with uid = 98.
deleting insn with uid = 99.
deleting insn with uid = 101.
deleting insn with uid = 169.
deleting insn with uid = 171.
deleting insn with uid = 173.
starting the processing of deferred insns
ending the processing of deferred insns


void ES(imgpel*, imgpel*, mvinfo&, int, int, int, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9]
;;  ref usage 	r0={47d,48u} r1={19d,16u,4e} r2={3d,2u} r4={3d,2u} r5={3d,2u} r6={1d,97u} r7={1d,18u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={3e} r17={30d,9u} r18={1d} r19={1d} r20={1d,1u,15e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d,1u} r38={2d,1u} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 403{184d,197u,22e} in 110{109 regular + 1 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 17 [flags] 100 101 102 104 105 106 109 110
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 trg+0 S8 A64])
        (reg:DI 5 di [ trg ])) /home/kai/git_repos/obme/obme.cpp:23 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 ref+0 S8 A64])
        (reg:DI 4 si [ ref ])) /home/kai/git_repos/obme/obme.cpp:23 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 mv+0 S8 A64])
        (reg:DI 1 dx [ mv ])) /home/kai/git_repos/obme/obme.cpp:23 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 p+0 S4 A32])
        (reg:SI 2 cx [ p ])) /home/kai/git_repos/obme/obme.cpp:23 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 center+0 S4 A32])
        (reg:SI 37 r8 [ center ])) /home/kai/git_repos/obme/obme.cpp:23 90 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 width+0 S4 A32])
        (reg:SI 38 r9 [ width ])) /home/kai/git_repos/obme/obme.cpp:23 90 {*movsi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 mincost+0 S4 A32])
        (const_int -1 [0xffffffffffffffff])) /home/kai/git_repos/obme/obme.cpp:27 90 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 0 ax [102])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 center+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:28 90 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg:SI 0 ax [100])
                (div:SI (reg:SI 0 ax [102])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -84 [0xffffffffffffffac])) [0 width+0 S4 A32])))
            (set (reg:SI 1 dx [101])
                (mod:SI (reg:SI 0 ax [102])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -84 [0xffffffffffffffac])) [0 width+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:28 341 {*divmodsi4}
     (nil))
(insn 14 13 15 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 cy+0 S4 A32])
        (reg:SI 0 ax [100])) /home/kai/git_repos/obme/obme.cpp:28 90 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:SI 0 ax [104])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 center+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:29 90 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (parallel [
            (set (reg:SI 0 ax [106])
                (div:SI (reg:SI 0 ax [104])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -84 [0xffffffffffffffac])) [0 width+0 S4 A32])))
            (set (reg:SI 1 dx [105])
                (mod:SI (reg:SI 0 ax [104])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -84 [0xffffffffffffffac])) [0 width+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:29 341 {*divmodsi4}
     (nil))
(insn 17 16 21 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 cx+0 S4 A32])
        (reg:SI 1 dx [105])) /home/kai/git_repos/obme/obme.cpp:29 90 {*movsi_internal}
     (nil))
(insn 21 17 22 2 (set (reg:SI 0 ax [110])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 p+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:30 90 {*movsi_internal}
     (nil))
(insn 22 21 23 2 (parallel [
            (set (reg:SI 0 ax [109])
                (neg:SI (reg:SI 0 ax [110])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:30 455 {*negsi2_1}
     (expr_list:REG_EQUAL (neg:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -76 [0xffffffffffffffb4])) [0 p+0 S4 A32]))
        (nil)))
(insn 23 22 126 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
        (reg:SI 0 ax [109])) /home/kai/git_repos/obme/obme.cpp:30 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              15 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 111
(code_label 126 23 24 3 14 "" [1 uses])
(note 24 126 25 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 3 (set (reg:SI 0 ax [111])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:30 90 {*movsi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [111])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [0 p+0 S4 A32]))) /home/kai/git_repos/obme/obme.cpp:30 7 {*cmpsi_1}
     (nil))
(jump_insn 27 26 28 3 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 129)
            (pc))) /home/kai/git_repos/obme/obme.cpp:30 612 {*jcc_1}
     (nil)
 -> 129)
;;  succ:       16
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 114 115
(note 28 27 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 32 28 33 4 (set (reg:SI 0 ax [115])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 p+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:32 90 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (parallel [
            (set (reg:SI 0 ax [114])
                (neg:SI (reg:SI 0 ax [115])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:32 455 {*negsi2_1}
     (expr_list:REG_EQUAL (neg:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -76 [0xffffffffffffffb4])) [0 p+0 S4 A32]))
        (nil)))
(insn 34 33 120 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
        (reg:SI 0 ax [114])) /home/kai/git_repos/obme/obme.cpp:32 90 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              14 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 116
(code_label 120 34 35 5 13 "" [1 uses])
(note 35 120 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 5 (set (reg:SI 0 ax [116])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:32 90 {*movsi_internal}
     (nil))
(insn 37 36 38 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [116])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [0 p+0 S4 A32]))) /home/kai/git_repos/obme/obme.cpp:32 7 {*cmpsi_1}
     (nil))
(jump_insn 38 37 39 5 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 123)
            (pc))) /home/kai/git_repos/obme/obme.cpp:32 612 {*jcc_1}
     (nil)
 -> 123)
;;  succ:       15
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 120 121 122 126 127 128
(note 39 38 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 44 39 45 6 (set (reg:SI 1 dx [121])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 cy+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:34 90 {*movsi_internal}
     (nil))
(insn 45 44 46 6 (set (reg:SI 0 ax [122])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:34 90 {*movsi_internal}
     (nil))
(insn 46 45 47 6 (parallel [
            (set (reg:SI 0 ax [120])
                (plus:SI (reg:SI 0 ax [122])
                    (reg:SI 1 dx [121])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:34 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 cy+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32]))
        (nil)))
(insn 47 46 52 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 y+0 S4 A32])
        (reg:SI 0 ax [120])) /home/kai/git_repos/obme/obme.cpp:34 90 {*movsi_internal}
     (nil))
(insn 52 47 53 6 (set (reg:SI 1 dx [127])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 cx+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:35 90 {*movsi_internal}
     (nil))
(insn 53 52 54 6 (set (reg:SI 0 ax [128])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:35 90 {*movsi_internal}
     (nil))
(insn 54 53 55 6 (parallel [
            (set (reg:SI 0 ax [126])
                (plus:SI (reg:SI 0 ax [128])
                    (reg:SI 1 dx [127])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:35 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [0 cx+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32]))
        (nil)))
(insn 55 54 56 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 x+0 S4 A32])
        (reg:SI 0 ax [126])) /home/kai/git_repos/obme/obme.cpp:35 90 {*movsi_internal}
     (nil))
(insn 56 55 57 6 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 x+0 S4 A32])
            (const_int 0 [0]))) /home/kai/git_repos/obme/obme.cpp:38 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 57 56 58 6 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 164)
            (pc))) /home/kai/git_repos/obme/obme.cpp:38 612 {*jcc_1}
     (nil)
 -> 164)
;;  succ:       17
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 129
(note 58 57 59 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 7 (set (reg:SI 0 ax [129])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 width+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:38 90 {*movsi_internal}
     (nil))
(insn 60 59 61 7 (parallel [
            (set (reg:SI 0 ax [orig:87 D.35024 ] [87])
                (minus:SI (reg:SI 0 ax [129])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int 24 [0x18])) [0 blocksize+0 S4 A64])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:38 260 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -84 [0xffffffffffffffac])) [0 width+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 blocksize+0 S4 A64]))
        (nil)))
(insn 61 60 62 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:87 D.35024 ] [87])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 x+0 S4 A32]))) /home/kai/git_repos/obme/obme.cpp:38 7 {*cmpsi_1}
     (nil))
(jump_insn 62 61 63 7 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 164)
            (pc))) /home/kai/git_repos/obme/obme.cpp:38 612 {*jcc_1}
     (nil)
 -> 164)
;;  succ:       17
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 63 62 64 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 8 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 y+0 S4 A32])
            (const_int 0 [0]))) /home/kai/git_repos/obme/obme.cpp:38 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 65 64 66 8 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 164)
            (pc))) /home/kai/git_repos/obme/obme.cpp:38 612 {*jcc_1}
     (nil)
 -> 164)
;;  succ:       17
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 130
(note 66 65 67 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 9 (set (reg:SI 0 ax [130])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 height+0 S4 A64])) /home/kai/git_repos/obme/obme.cpp:39 90 {*movsi_internal}
     (nil))
(insn 68 67 69 9 (parallel [
            (set (reg:SI 0 ax [orig:88 D.35024 ] [88])
                (minus:SI (reg:SI 0 ax [130])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int 24 [0x18])) [0 blocksize+0 S4 A64])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:39 260 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (reg/f:DI 16 argp) [0 height+0 S4 A64])
            (mem/c:SI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 blocksize+0 S4 A64]))
        (nil)))
(insn 69 68 70 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:88 D.35024 ] [88])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 y+0 S4 A32]))) /home/kai/git_repos/obme/obme.cpp:39 7 {*cmpsi_1}
     (nil))
(jump_insn 70 69 71 9 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 164)
            (pc))) /home/kai/git_repos/obme/obme.cpp:39 612 {*jcc_1}
     (nil)
 -> 164)
;;  succ:       17
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 71 70 72 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) /home/kai/git_repos/obme/obme.cpp:39 7 {*cmpsi_1}
     (nil))
(jump_insn 73 72 74 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 81)
            (pc))) /home/kai/git_repos/obme/obme.cpp:39 612 {*jcc_1}
     (nil)
 -> 81)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 74 73 75 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
            (const_int 1 [0x1]))) /home/kai/git_repos/obme/obme.cpp:40 7 {*cmpsi_1}
     (nil))
(jump_insn 76 75 81 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 164)
            (pc))) /home/kai/git_repos/obme/obme.cpp:40 612 {*jcc_1}
     (nil)
 -> 164)
;;  succ:       17
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;;              11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 91 92 93 94 95 131 132 133 134 135 136 137 138
(code_label 81 76 82 12 11 "" [1 uses])
(note 82 81 83 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 12 (set (reg:SI 0 ax [131])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 y+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:45 90 {*movsi_internal}
     (nil))
(insn 84 83 168 12 (parallel [
            (set (reg:SI 0 ax [orig:89 D.35024 ] [89])
                (mult:SI (reg:SI 0 ax [orig:89 D.35024 ] [89])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -84 [0xffffffffffffffac])) [0 width+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:45 305 {*mulsi3_1}
     (nil))
(insn 168 84 85 12 (set (reg:SI 1 dx [orig:89 D.35024 ] [89])
        (reg:SI 0 ax [orig:89 D.35024 ] [89])) /home/kai/git_repos/obme/obme.cpp:45 90 {*movsi_internal}
     (nil))
(insn 85 168 86 12 (set (reg:SI 0 ax [132])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 x+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:45 90 {*movsi_internal}
     (nil))
(insn 86 85 87 12 (parallel [
            (set (reg:SI 0 ax [orig:90 D.35024 ] [90])
                (plus:SI (reg:SI 0 ax [132])
                    (reg:SI 1 dx [orig:89 D.35024 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:45 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:89 D.35024 ] [89])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 x+0 S4 A32]))
        (nil)))
(insn 87 86 88 12 (set (reg:DI 1 dx [orig:91 D.35025 ] [91])
        (sign_extend:DI (reg:SI 0 ax [orig:90 D.35024 ] [90]))) /home/kai/git_repos/obme/obme.cpp:44 142 {*extendsidi2_rex64}
     (nil))
(insn 88 87 89 12 (set (reg/f:DI 0 ax [133])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 ref+0 S8 A64])) /home/kai/git_repos/obme/obme.cpp:44 89 {*movdi_internal}
     (nil))
(insn 89 88 90 12 (parallel [
            (set (reg/f:DI 4 si [orig:92 D.35026 ] [92])
                (plus:DI (reg:DI 1 dx [orig:91 D.35025 ] [91])
                    (reg/f:DI 0 ax [133])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:44 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 ref+0 S8 A64])
            (reg:DI 1 dx [orig:91 D.35025 ] [91]))
        (nil)))
(insn 90 89 91 12 (set (reg:SI 0 ax [134])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 center+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:44 90 {*movsi_internal}
     (nil))
(insn 91 90 92 12 (set (reg:DI 1 dx [orig:93 D.35025 ] [93])
        (sign_extend:DI (reg:SI 0 ax [134]))) /home/kai/git_repos/obme/obme.cpp:44 142 {*extendsidi2_rex64}
     (nil))
(insn 92 91 93 12 (set (reg/f:DI 0 ax [135])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 trg+0 S8 A64])) /home/kai/git_repos/obme/obme.cpp:44 89 {*movdi_internal}
     (nil))
(insn 93 92 94 12 (parallel [
            (set (reg/f:DI 5 di [orig:94 D.35026 ] [94])
                (plus:DI (reg:DI 1 dx [orig:93 D.35025 ] [93])
                    (reg/f:DI 0 ax [135])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:44 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 trg+0 S8 A64])
            (reg:DI 1 dx [orig:93 D.35025 ] [93]))
        (nil)))
(insn 94 93 95 12 (set (reg:SI 1 dx [136])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 blocksize+0 S4 A64])) /home/kai/git_repos/obme/obme.cpp:44 90 {*movsi_internal}
     (nil))
(insn 95 94 96 12 (set (reg:SI 0 ax [137])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 width+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:44 90 {*movsi_internal}
     (nil))
(insn 96 95 97 12 (set (reg:SI 2 cx)
        (reg:SI 1 dx [136])) /home/kai/git_repos/obme/obme.cpp:44 90 {*movsi_internal}
     (nil))
(insn 97 96 100 12 (set (reg:SI 1 dx)
        (reg:SI 0 ax [137])) /home/kai/git_repos/obme/obme.cpp:44 90 {*movsi_internal}
     (nil))
(call_insn 100 97 102 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z7calcSADPcS_ii") [flags 0x3]  <function_decl 0x7f86e163cca8 calcSAD>) [0 calcSAD S1 A8])
            (const_int 0 [0]))) /home/kai/git_repos/obme/obme.cpp:44 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (nil))))))
(insn 102 100 103 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 cost+0 S4 A32])
        (reg:SI 0 ax [orig:95 D.35024 ] [95])) /home/kai/git_repos/obme/obme.cpp:47 90 {*movsi_internal}
     (nil))
(insn 103 102 104 12 (set (reg:SI 0 ax [138])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 cost+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:48 90 {*movsi_internal}
     (nil))
(insn 104 103 105 12 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [138])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 mincost+0 S4 A32]))) /home/kai/git_repos/obme/obme.cpp:48 7 {*cmpsi_1}
     (nil))
(jump_insn 105 104 106 12 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 117)
            (pc))) /home/kai/git_repos/obme/obme.cpp:48 612 {*jcc_1}
     (nil)
 -> 117)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 96 139 142 143 144
(note 106 105 107 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 107 106 108 13 (set (reg:SI 0 ax [139])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 y+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:49 90 {*movsi_internal}
     (nil))
(insn 108 107 170 13 (parallel [
            (set (reg:SI 0 ax [orig:96 D.35024 ] [96])
                (mult:SI (reg:SI 0 ax [orig:96 D.35024 ] [96])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -84 [0xffffffffffffffac])) [0 width+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:49 305 {*mulsi3_1}
     (nil))
(insn 170 108 112 13 (set (reg:SI 1 dx [orig:96 D.35024 ] [96])
        (reg:SI 0 ax [orig:96 D.35024 ] [96])) /home/kai/git_repos/obme/obme.cpp:49 90 {*movsi_internal}
     (nil))
(insn 112 170 113 13 (set (reg:SI 0 ax [143])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 x+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:49 90 {*movsi_internal}
     (nil))
(insn 113 112 114 13 (parallel [
            (set (reg:SI 0 ax [142])
                (plus:SI (reg:SI 0 ax [143])
                    (reg:SI 1 dx [orig:96 D.35024 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:49 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:96 D.35024 ] [96])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 x+0 S4 A32]))
        (nil)))
(insn 114 113 115 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 loc+0 S4 A32])
        (reg:SI 0 ax [142])) /home/kai/git_repos/obme/obme.cpp:49 90 {*movsi_internal}
     (nil))
(insn 115 114 116 13 (set (reg:SI 0 ax [144])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 cost+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:50 90 {*movsi_internal}
     (nil))
(insn 116 115 161 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 mincost+0 S4 A32])
        (reg:SI 0 ax [144])) /home/kai/git_repos/obme/obme.cpp:50 90 {*movsi_internal}
     (nil))
(jump_insn 161 116 162 13 (set (pc)
        (label_ref 117)) 654 {jump}
     (nil)
 -> 117)
;;  succ:       14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 162 161 164)
;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 14, flags: (NEW, RTL, MODIFIED)
;;  pred:       6
;;              11
;;              9
;;              8
;;              7
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 164 162 163 17 15 "" [5 uses])
(note 163 164 165 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 165 163 117 17 (const_int 0 [0]) /home/kai/git_repos/obme/obme.cpp:42 684 {nop}
     (nil))
;;  succ:       14 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;;              12
;;              17 [100.0%]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 117 165 118 14 12 "" [2 uses])
(note 118 117 119 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 119 118 157 14 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:32 217 {*addsi_1}
     (nil))
(jump_insn 157 119 158 14 (set (pc)
        (label_ref 120)) /home/kai/git_repos/obme/obme.cpp:32 654 {jump}
     (nil)
 -> 120)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 158 157 123)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 123 158 124 15 9 "" [1 uses])
(note 124 123 125 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 125 124 159 15 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:30 217 {*addsi_1}
     (nil))
(jump_insn 159 125 160 15 (set (pc)
        (label_ref 126)) /home/kai/git_repos/obme/obme.cpp:30 654 {jump}
     (nil)
 -> 126)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 160 159 129)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97 98 146 147 148 150 151 152 153 154 155 156 157 158 159 160 161 162
(code_label 129 160 130 16 8 "" [1 uses])
(note 130 129 131 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 131 130 132 16 (set (reg:SI 0 ax [146])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 loc+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:56 90 {*movsi_internal}
     (nil))
(insn 132 131 133 16 (parallel [
            (set (reg:SI 0 ax [148])
                (div:SI (reg:SI 0 ax [146])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -84 [0xffffffffffffffac])) [0 width+0 S4 A32])))
            (set (reg:SI 1 dx [147])
                (mod:SI (reg:SI 0 ax [146])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -84 [0xffffffffffffffac])) [0 width+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:56 341 {*divmodsi4}
     (nil))
(insn 133 132 134 16 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 x+0 S4 A32])
        (reg:SI 1 dx [147])) /home/kai/git_repos/obme/obme.cpp:56 90 {*movsi_internal}
     (nil))
(insn 134 133 135 16 (set (reg:SI 0 ax [152])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 loc+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:57 90 {*movsi_internal}
     (nil))
(insn 135 134 136 16 (parallel [
            (set (reg:SI 0 ax [150])
                (div:SI (reg:SI 0 ax [152])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -84 [0xffffffffffffffac])) [0 width+0 S4 A32])))
            (set (reg:SI 1 dx [151])
                (mod:SI (reg:SI 0 ax [152])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -84 [0xffffffffffffffac])) [0 width+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:57 341 {*divmodsi4}
     (nil))
(insn 136 135 137 16 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 y+0 S4 A32])
        (reg:SI 0 ax [150])) /home/kai/git_repos/obme/obme.cpp:57 90 {*movsi_internal}
     (nil))
(insn 137 136 138 16 (set (reg/f:DI 0 ax [153])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 mv+0 S8 A64])) /home/kai/git_repos/obme/obme.cpp:58 89 {*movdi_internal}
     (nil))
(insn 138 137 139 16 (set (reg:SI 1 dx [154])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 cx+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:58 90 {*movsi_internal}
     (nil))
(insn 139 138 140 16 (set (mem/j:SI (reg/f:DI 0 ax [153]) [0 mv_46(D)->iCx+0 S4 A32])
        (reg:SI 1 dx [154])) /home/kai/git_repos/obme/obme.cpp:58 90 {*movsi_internal}
     (nil))
(insn 140 139 141 16 (set (reg/f:DI 0 ax [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 mv+0 S8 A64])) /home/kai/git_repos/obme/obme.cpp:59 89 {*movdi_internal}
     (nil))
(insn 141 140 142 16 (set (reg:SI 1 dx [156])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 cy+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:59 90 {*movsi_internal}
     (nil))
(insn 142 141 143 16 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [155])
                (const_int 4 [0x4])) [0 mv_46(D)->iCy+0 S4 A32])
        (reg:SI 1 dx [156])) /home/kai/git_repos/obme/obme.cpp:59 90 {*movsi_internal}
     (nil))
(insn 143 142 144 16 (set (reg:SI 0 ax [157])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 x+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:61 90 {*movsi_internal}
     (nil))
(insn 144 143 172 16 (parallel [
            (set (reg:SI 0 ax [orig:97 D.35024 ] [97])
                (minus:SI (reg:SI 0 ax [orig:97 D.35024 ] [97])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 cx+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:61 260 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 x+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [0 cx+0 S4 A32]))
        (nil)))
(insn 172 144 145 16 (set (reg:SI 1 dx [orig:97 D.35024 ] [97])
        (reg:SI 0 ax [orig:97 D.35024 ] [97])) /home/kai/git_repos/obme/obme.cpp:61 90 {*movsi_internal}
     (nil))
(insn 145 172 146 16 (set (reg/f:DI 0 ax [158])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 mv+0 S8 A64])) /home/kai/git_repos/obme/obme.cpp:61 89 {*movdi_internal}
     (nil))
(insn 146 145 147 16 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [158])
                (const_int 8 [0x8])) [0 mv_46(D)->iMvx+0 S4 A32])
        (reg:SI 1 dx [orig:97 D.35024 ] [97])) /home/kai/git_repos/obme/obme.cpp:61 90 {*movsi_internal}
     (nil))
(insn 147 146 148 16 (set (reg:SI 0 ax [159])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 y+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:62 90 {*movsi_internal}
     (nil))
(insn 148 147 174 16 (parallel [
            (set (reg:SI 0 ax [orig:98 D.35024 ] [98])
                (minus:SI (reg:SI 0 ax [orig:98 D.35024 ] [98])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 cy+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:62 260 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 y+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 cy+0 S4 A32]))
        (nil)))
(insn 174 148 149 16 (set (reg:SI 1 dx [orig:98 D.35024 ] [98])
        (reg:SI 0 ax [orig:98 D.35024 ] [98])) /home/kai/git_repos/obme/obme.cpp:62 90 {*movsi_internal}
     (nil))
(insn 149 174 150 16 (set (reg/f:DI 0 ax [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 mv+0 S8 A64])) /home/kai/git_repos/obme/obme.cpp:62 89 {*movdi_internal}
     (nil))
(insn 150 149 151 16 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [160])
                (const_int 12 [0xc])) [0 mv_46(D)->iMvy+0 S4 A32])
        (reg:SI 1 dx [orig:98 D.35024 ] [98])) /home/kai/git_repos/obme/obme.cpp:62 90 {*movsi_internal}
     (nil))
(insn 151 150 152 16 (set (reg/f:DI 0 ax [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 mv+0 S8 A64])) /home/kai/git_repos/obme/obme.cpp:63 89 {*movdi_internal}
     (nil))
(insn 152 151 153 16 (set (reg:SI 1 dx [162])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 mincost+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:63 90 {*movsi_internal}
     (nil))
(insn 153 152 156 16 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [161])
                (const_int 16 [0x10])) [0 mv_46(D)->SAD+0 S4 A32])
        (reg:SI 1 dx [162])) /home/kai/git_repos/obme/obme.cpp:63 90 {*movsi_internal}
     (nil))
(insn 156 153 166 16 (const_int 0 [0]) /home/kai/git_repos/obme/obme.cpp:64 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 166 156 0 NOTE_INSN_DELETED)

;; Function void obme(imgpel**, imgpel*, mvinfo*, int, int, int, int, int) (_Z4obmePPcS_P6mvinfoiiiii, funcdef_no=1386, decl_uid=33288, cgraph_uid=402, symbol_order=404)

      Creating newreg=135
Removing SCRATCH in insn #9 (nop 2)
rescanning insn with uid = 9.
      Creating newreg=136
Removing SCRATCH in insn #126 (nop 3)
rescanning insn with uid = 126.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=128, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=112, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r135
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 38:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=137 from oldreg=91, assigning class GENERAL_REGS to r137
   38: {r137:SI=r137:SI*[frame:DI-0x60];clobber flags:CC;}
      REG_DEAD r106:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  144: r137:SI=r106:SI
    Inserting insn reload after:
  145: r91:SI=r137:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 43
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 49
	 Choosing alt 0 in insn 49:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 54:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =X  (1) re {*pushsi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =X  (1) re {*pushsi2_rex64} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) rBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 81
	 Choosing alt 0 in insn 81:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 83:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 85:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 87:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 96:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 104:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 110:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            alt=1,overall=12,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 112:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            alt=1,overall=12,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 119:  (0) rm  (1) 0  (2) re {*addsi_1}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r136
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 16
EBB 13
EBB 14
EBB 15

********** Pseudo live ranges #1: **********

  BB 14
   Insn 128: point = 0
  BB 15
  BB 13
   Insn 127: point = 0
   Insn 126: point = 0
  BB 16
   Insn 142: point = 1
  BB 3
   Insn 20: point = 1
   Insn 19: point = 1
   Insn 18: point = 2
   Insn 17: point = 4
   Insn 16: point = 6
  BB 12
   Insn 138: point = 7
   Insn 119: point = 7
   Insn 118: point = 8
  BB 5
   Insn 28: point = 9
   Insn 27: point = 9
   Insn 26: point = 10
   Insn 25: point = 12
   Insn 24: point = 14
  BB 11
   Insn 136: point = 15
   Insn 112: point = 15
   Insn 111: point = 16
   Insn 110: point = 17
  BB 7
   Insn 35: point = 17
   Insn 34: point = 17
   Insn 33: point = 18
  BB 10
   Insn 134: point = 19
   Insn 104: point = 19
  BB 9
   Insn 101: point = 19
   Insn 100: point = 20
   Insn 99: point = 21
   Insn 98: point = 22
   Insn 97: point = 23
   Insn 96: point = 25
   Insn 95: point = 26
   Insn 94: point = 28
   Insn 93: point = 30
   Insn 92: point = 32
   Insn 91: point = 33
   Insn 90: point = 33
   Insn 89: point = 34
   Insn 88: point = 36
   Insn 87: point = 37
   Insn 86: point = 38
   Insn 85: point = 39
   Insn 84: point = 40
   Insn 83: point = 41
   Insn 82: point = 42
   Insn 81: point = 43
   Insn 80: point = 45
   Insn 79: point = 46
   Insn 78: point = 48
   Insn 77: point = 50
   Insn 76: point = 52
   Insn 75: point = 53
   Insn 74: point = 53
   Insn 73: point = 54
   Insn 72: point = 56
  BB 8
   Insn 70: point = 57
   Insn 69: point = 57
   Insn 68: point = 58
   Insn 67: point = 59
   Insn 66: point = 59
   Insn 65: point = 59
   Insn 64: point = 60
   Insn 63: point = 61
   Insn 62: point = 62
   Insn 61: point = 63
   Insn 60: point = 64
   Insn 59: point = 65
   Insn 58: point = 66
   Insn 57: point = 67
   Insn 56: point = 68
   Insn 55: point = 69
   Insn 54: point = 70
   Insn 53: point = 71
   Insn 52: point = 72
   Insn 51: point = 73
   Insn 50: point = 74
   Insn 49: point = 76
   Insn 48: point = 78
   Insn 47: point = 79
   Insn 46: point = 81
   Insn 45: point = 83
   Insn 44: point = 84
   Insn 43: point = 85
   Insn 42: point = 87
   Insn 145: point = 88
	Hard reg 1 is preferable by r137 with profit 1
   Insn 38: point = 90
   Insn 144: point = 90
	Hard reg 1 is preferable by r137 with profit 1
	Hard reg 0 is preferable by r137 with profit 1
   Insn 37: point = 92
  BB 6
   Insn 31: point = 93
   Insn 30: point = 93
  BB 4
   Insn 22: point = 93
  BB 2
   Insn 14: point = 93
   Insn 13: point = 93
   Insn 12: point = 93
   Insn 9: point = 93
   Insn 7: point = 95
   Insn 6: point = 95
   Insn 5: point = 95
   Insn 4: point = 95
   Insn 3: point = 95
   Insn 2: point = 95
 r87: [3..4]
 r88: [1..2]
 r89: [11..12]
 r90: [9..10]
 r91: [86..88]
 r92: [80..81]
 r93: [77..79]
 r94: [75..76]
 r95: [60..74]
 r96: [57..58]
 r97: [52..54]
 r98: [44..46]
 r99: [37..43]
 r100: [32..34]
 r101: [24..26]
 r102: [21..23]
 r103: [5..6]
 r104: [13..14]
 r105: [17..18]
 r106: [91..92]
 r109: [84..85]
 r110: [86..87]
 r111: [82..83]
 r112: [77..78]
 r113: [64..73]
 r114: [63..72]
 r115: [62..71]
 r116: [61..70]
 r117: [59..69]
 r118: [67..68]
 r119: [65..66]
 r120: [55..56]
 r121: [51..53] [47..48]
 r122: [49..50]
 r123: [44..45]
 r124: [41..42]
 r125: [39..40]
 r126: [37..38]
 r127: [35..36]
 r128: [31..33] [27..28]
 r129: [29..30]
 r130: [24..25]
 r131: [21..22]
 r132: [19..20]
 r133: [15..16]
 r134: [7..8]
 r135: [93..94]
 r136: [0..0]
 r137: [89..90]
Compressing live ranges: from 95 to 73 - 76%
Ranges after the compression:
 r87: [3..4]
 r88: [1..2]
 r89: [11..12]
 r90: [9..10]
 r91: [65..66]
 r92: [59..60]
 r93: [57..58]
 r94: [55..56]
 r95: [51..54]
 r96: [49..50]
 r97: [45..46]
 r98: [39..40]
 r99: [33..38]
 r100: [29..30]
 r101: [23..24]
 r102: [21..22]
 r103: [5..6]
 r104: [13..14]
 r105: [17..18]
 r106: [69..70]
 r109: [63..64]
 r110: [65..66]
 r111: [61..62]
 r112: [57..58]
 r113: [51..54]
 r114: [51..54]
 r115: [51..54]
 r116: [51..54]
 r117: [51..54]
 r118: [53..54]
 r119: [51..52]
 r120: [47..48]
 r121: [45..46] [41..42]
 r122: [43..44]
 r123: [39..40]
 r124: [37..38]
 r125: [35..36]
 r126: [33..34]
 r127: [31..32]
 r128: [29..30] [25..26]
 r129: [27..28]
 r130: [23..24]
 r131: [21..22]
 r132: [19..20]
 r133: [15..16]
 r134: [7..8]
 r135: [71..72]
 r136: [0..0]
 r137: [67..68]

********** Assignment #1: **********

	 Assigning to 137 (cl=GENERAL_REGS, orig=91, freq=3, tfirst=137, tfreq=3)...
	   Assign 0 to reload r137 (freq=3)
	 Assigning to 135 (cl=INDEX_REGS, orig=135, freq=1, tfirst=135, tfreq=1)...
	   Assign 0 to reload r135 (freq=1)
	 Assigning to 136 (cl=INDEX_REGS, orig=136, freq=1, tfirst=136, tfreq=1)...
	   Assign 0 to reload r136 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=128, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=112, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 43
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 64
changing reg in insn 68
changing reg in insn 69
changing reg in insn 73
changing reg in insn 76
changing reg in insn 74
changing reg in insn 76
changing reg in insn 79
changing reg in insn 81
changing reg in insn 81
changing reg in insn 87
changing reg in insn 85
changing reg in insn 83
changing reg in insn 89
changing reg in insn 92
changing reg in insn 90
changing reg in insn 92
changing reg in insn 95
changing reg in insn 97
changing reg in insn 97
changing reg in insn 97
changing reg in insn 99
changing reg in insn 16
changing reg in insn 17
changing reg in insn 24
changing reg in insn 25
changing reg in insn 33
changing reg in insn 34
changing reg in insn 37
changing reg in insn 43
changing reg in insn 44
changing reg in insn 42
changing reg in insn 45
changing reg in insn 46
changing reg in insn 48
changing reg in insn 51
changing reg in insn 60
changing reg in insn 52
changing reg in insn 61
changing reg in insn 53
changing reg in insn 62
changing reg in insn 54
changing reg in insn 63
changing reg in insn 55
changing reg in insn 65
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 72
changing reg in insn 73
changing reg in insn 78
changing reg in insn 76
changing reg in insn 75
changing reg in insn 74
changing reg in insn 79
changing reg in insn 77
changing reg in insn 76
changing reg in insn 75
changing reg in insn 77
changing reg in insn 78
changing reg in insn 80
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 94
changing reg in insn 92
changing reg in insn 91
changing reg in insn 90
changing reg in insn 95
changing reg in insn 93
changing reg in insn 92
changing reg in insn 91
changing reg in insn 93
changing reg in insn 94
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 111
changing reg in insn 112
changing reg in insn 118
changing reg in insn 119
changing reg in insn 9
changing reg in insn 126
deleting insn with uid = 144.
deleting insn with uid = 60.
deleting insn with uid = 61.
deleting insn with uid = 62.
deleting insn with uid = 63.
deleting insn with uid = 64.
deleting insn with uid = 78.
deleting insn with uid = 94.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 66.
verify found no changes in insn with uid = 128.


void obme(imgpel**, imgpel*, mvinfo*, int, int, int, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9]
;;  ref usage 	r0={39d,36u} r1={14d,14u,6e} r2={4d,2u} r4={4d,2u} r5={6d,4u} r6={1d,73u} r7={4d,24u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={2e} r17={30d,5u} r18={2d} r19={2d} r20={1d,1u,6e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={4d,2u} r38={4d,2u} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 426{247d,165u,14e} in 94{92 regular + 2 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 17 [flags]
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 refFrame+0 S8 A64])
        (reg:DI 5 di [ refFrame ])) /home/kai/git_repos/obme/obme.cpp:68 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 currFrame+0 S8 A64])
        (reg:DI 4 si [ currFrame ])) /home/kai/git_repos/obme/obme.cpp:68 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mvs+0 S8 A64])
        (reg:DI 1 dx [ mvs ])) /home/kai/git_repos/obme/obme.cpp:68 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 nRefs+0 S4 A32])
        (reg:SI 2 cx [ nRefs ])) /home/kai/git_repos/obme/obme.cpp:68 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 width+0 S4 A32])
        (reg:SI 37 r8 [ width ])) /home/kai/git_repos/obme/obme.cpp:68 90 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 height+0 S4 A32])
        (reg:SI 38 r9 [ height ])) /home/kai/git_repos/obme/obme.cpp:68 90 {*movsi_internal}
     (nil))
(note 8 7 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 8 12 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.35033+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [135])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:68 986 {stack_tls_protect_set_di}
     (nil))
(insn 12 9 13 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 cnt+0 S4 A32])
        (const_int 0 [0])) /home/kai/git_repos/obme/obme.cpp:72 90 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 p+0 S4 A32])
        (const_int 7 [0x7])) /home/kai/git_repos/obme/obme.cpp:73 90 {*movsi_internal}
     (nil))
(insn 14 13 120 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 x+0 S4 A32])
        (const_int 0 [0])) /home/kai/git_repos/obme/obme.cpp:76 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              12 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 103
(code_label 120 14 15 3 23 "" [1 uses])
(note 15 120 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 3 (set (reg:SI 0 ax [103])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 width+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:76 90 {*movsi_internal}
     (nil))
(insn 17 16 18 3 (parallel [
            (set (reg:SI 0 ax [orig:87 D.35027 ] [87])
                (minus:SI (reg:SI 0 ax [103])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int 16 [0x10])) [0 blocksize+0 S4 A64])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:76 260 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])) [0 width+0 S4 A32])
            (mem/c:SI (reg/f:DI 16 argp) [0 blocksize+0 S4 A64]))
        (nil)))
(insn 18 17 19 3 (parallel [
            (set (reg:SI 0 ax [orig:88 D.35027 ] [88])
                (plus:SI (reg:SI 0 ax [orig:87 D.35027 ] [87])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:76 217 {*addsi_1}
     (nil))
(insn 19 18 20 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:88 D.35027 ] [88])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [0 x+0 S4 A32]))) /home/kai/git_repos/obme/obme.cpp:76 7 {*cmpsi_1}
     (nil))
(jump_insn 20 19 21 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 141)
            (pc))) /home/kai/git_repos/obme/obme.cpp:76 612 {*jcc_1}
     (nil)
 -> 141)
;;  succ:       16
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 113 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 y+0 S4 A32])
        (const_int 0 [0])) /home/kai/git_repos/obme/obme.cpp:77 90 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              11 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 104
(code_label 113 22 23 5 22 "" [1 uses])
(note 23 113 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 5 (set (reg:SI 0 ax [104])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 height+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:77 90 {*movsi_internal}
     (nil))
(insn 25 24 26 5 (parallel [
            (set (reg:SI 0 ax [orig:89 D.35027 ] [89])
                (minus:SI (reg:SI 0 ax [104])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int 16 [0x10])) [0 blocksize+0 S4 A64])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:77 260 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -100 [0xffffffffffffff9c])) [0 height+0 S4 A32])
            (mem/c:SI (reg/f:DI 16 argp) [0 blocksize+0 S4 A64]))
        (nil)))
(insn 26 25 27 5 (parallel [
            (set (reg:SI 0 ax [orig:90 D.35027 ] [90])
                (plus:SI (reg:SI 0 ax [orig:89 D.35027 ] [89])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:77 217 {*addsi_1}
     (nil))
(insn 27 26 28 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:90 D.35027 ] [90])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [0 y+0 S4 A32]))) /home/kai/git_repos/obme/obme.cpp:77 7 {*cmpsi_1}
     (nil))
(jump_insn 28 27 29 5 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 116)
            (pc))) /home/kai/git_repos/obme/obme.cpp:77 612 {*jcc_1}
     (nil)
 -> 116)
;;  succ:       12
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 29 28 30 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 sad+0 S4 A32])
        (const_int -1 [0xffffffffffffffff])) /home/kai/git_repos/obme/obme.cpp:78 90 {*movsi_internal}
     (nil))
(insn 31 30 105 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 i+0 S4 A32])
        (const_int 0 [0])) /home/kai/git_repos/obme/obme.cpp:79 90 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              10 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 105
(code_label 105 31 32 7 21 "" [1 uses])
(note 32 105 33 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 7 (set (reg:SI 0 ax [105])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 i+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:79 90 {*movsi_internal}
     (nil))
(insn 34 33 35 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [105])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [0 nRefs+0 S4 A32]))) /home/kai/git_repos/obme/obme.cpp:79 7 {*cmpsi_1}
     (nil))
(jump_insn 35 34 36 7 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 108)
            (pc))) /home/kai/git_repos/obme/obme.cpp:79 612 {*jcc_1}
     (nil)
 -> 108)
;;  succ:       11
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91 92 93 94 95 96 106 109 110 111 112 113 114 115 116 117 118 119
(note 36 35 37 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 8 (set (reg:SI 0 ax [106])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 y+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:80 90 {*movsi_internal}
     (nil))
(insn 38 37 145 8 (parallel [
            (set (reg:SI 0 ax [orig:91 D.35027 ] [91])
                (mult:SI (reg:SI 0 ax [orig:91 D.35027 ] [91])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -96 [0xffffffffffffffa0])) [0 width+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:80 305 {*mulsi3_1}
     (nil))
(insn 145 38 42 8 (set (reg:SI 1 dx [orig:91 D.35027 ] [91])
        (reg:SI 0 ax [orig:91 D.35027 ] [91])) /home/kai/git_repos/obme/obme.cpp:80 90 {*movsi_internal}
     (nil))
(insn 42 145 43 8 (set (reg:SI 0 ax [110])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 x+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:80 90 {*movsi_internal}
     (nil))
(insn 43 42 44 8 (parallel [
            (set (reg:SI 0 ax [109])
                (plus:SI (reg:SI 0 ax [110])
                    (reg:SI 1 dx [orig:91 D.35027 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:80 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:91 D.35027 ] [91])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -52 [0xffffffffffffffcc])) [0 x+0 S4 A32]))
        (nil)))
(insn 44 43 45 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 idx+0 S4 A32])
        (reg:SI 0 ax [109])) /home/kai/git_repos/obme/obme.cpp:80 90 {*movsi_internal}
     (nil))
(insn 45 44 46 8 (set (reg:SI 0 ax [111])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 i+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:81 90 {*movsi_internal}
     (nil))
(insn 46 45 47 8 (set (reg:DI 0 ax [orig:92 D.35028 ] [92])
        (sign_extend:DI (reg:SI 0 ax [111]))) /home/kai/git_repos/obme/obme.cpp:81 142 {*extendsidi2_rex64}
     (nil))
(insn 47 46 48 8 (parallel [
            (set (reg:DI 1 dx [orig:93 D.35028 ] [93])
                (ashift:DI (reg:DI 0 ax [orig:92 D.35028 ] [92])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:81 512 {*ashldi3_1}
     (nil))
(insn 48 47 49 8 (set (reg/f:DI 0 ax [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 refFrame+0 S8 A64])) /home/kai/git_repos/obme/obme.cpp:81 89 {*movdi_internal}
     (nil))
(insn 49 48 50 8 (parallel [
            (set (reg/f:DI 0 ax [orig:94 D.35029 ] [94])
                (plus:DI (reg/f:DI 0 ax [112])
                    (reg:DI 1 dx [orig:93 D.35028 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:81 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 refFrame+0 S8 A64])
            (reg:DI 1 dx [orig:93 D.35028 ] [93]))
        (nil)))
(insn 50 49 51 8 (set (reg/f:DI 4 si [orig:95 D.35030 ] [95])
        (mem/f:DI (reg/f:DI 0 ax [orig:94 D.35029 ] [94]) [0 *_32+0 S8 A64])) /home/kai/git_repos/obme/obme.cpp:81 89 {*movdi_internal}
     (nil))
(insn 51 50 52 8 (set (reg:SI 38 r9 [113])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 width+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:81 90 {*movsi_internal}
     (nil))
(insn 52 51 53 8 (set (reg:SI 37 r8 [114])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 idx+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:81 90 {*movsi_internal}
     (nil))
(insn 53 52 54 8 (set (reg:SI 2 cx [115])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 p+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:81 90 {*movsi_internal}
     (nil))
(insn 54 53 55 8 (parallel [
            (set (reg:DI 1 dx [116])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:81 218 {*adddi_1}
     (nil))
(insn 55 54 56 8 (set (reg:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 currFrame+0 S8 A64])) /home/kai/git_repos/obme/obme.cpp:81 89 {*movdi_internal}
     (nil))
(insn 56 55 57 8 (set (reg:SI 5 di [118])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 blocksize+0 S4 A64])) /home/kai/git_repos/obme/obme.cpp:81 90 {*movsi_internal}
     (nil))
(insn 57 56 58 8 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [0  S4 A32])
        (reg:SI 5 di [118])) /home/kai/git_repos/obme/obme.cpp:81 69 {*pushsi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 58 57 59 8 (set (reg:SI 5 di [119])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 height+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:81 90 {*movsi_internal}
     (nil))
(insn 59 58 65 8 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [0  S4 A32])
        (reg:SI 5 di [119])) /home/kai/git_repos/obme/obme.cpp:81 69 {*pushsi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 65 59 66 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [117])) /home/kai/git_repos/obme/obme.cpp:81 89 {*movdi_internal}
     (nil))
(call_insn 66 65 67 8 (call (mem:QI (symbol_ref:DI ("_Z2ESPcS_R6mvinfoiiiii") [flags 0x3]  <function_decl 0x7f86e163ce58 ES>) [0 ES S1 A8])
        (const_int 16 [0x10])) /home/kai/git_repos/obme/obme.cpp:81 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:SI (use (reg:SI 37 r8))
                        (expr_list:SI (use (reg:SI 38 r9))
                            (nil))))))))
(insn 67 66 68 8 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:81 218 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 68 67 69 8 (set (reg:SI 0 ax [orig:96 D.35031 ] [96])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 mv.SAD+0 S4 A64])) /home/kai/git_repos/obme/obme.cpp:82 90 {*movsi_internal}
     (nil))
(insn 69 68 70 8 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:96 D.35031 ] [96])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -60 [0xffffffffffffffc4])) [0 sad+0 S4 A32]))) /home/kai/git_repos/obme/obme.cpp:82 7 {*cmpsi_1}
     (nil))
(jump_insn 70 69 71 8 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 102)
            (pc))) /home/kai/git_repos/obme/obme.cpp:82 612 {*jcc_1}
     (nil)
 -> 102)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97 98 99 100 101 102 120 121 122 123 124 125 126 127 128 129 130 131 132
(note 71 70 72 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 9 (set (reg:SI 0 ax [120])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 cnt+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:84 90 {*movsi_internal}
     (nil))
(insn 73 72 74 9 (set (reg:DI 1 dx [orig:97 D.35028 ] [97])
        (sign_extend:DI (reg:SI 0 ax [120]))) /home/kai/git_repos/obme/obme.cpp:84 142 {*extendsidi2_rex64}
     (nil))
(insn 74 73 75 9 (set (reg:DI 0 ax [121])
        (reg:DI 1 dx [orig:97 D.35028 ] [97])) /home/kai/git_repos/obme/obme.cpp:84 89 {*movdi_internal}
     (nil))
(insn 75 74 76 9 (parallel [
            (set (reg:DI 0 ax [121])
                (ashift:DI (reg:DI 0 ax [121])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:84 512 {*ashldi3_1}
     (nil))
(insn 76 75 77 9 (parallel [
            (set (reg:DI 0 ax [121])
                (plus:DI (reg:DI 0 ax [121])
                    (reg:DI 1 dx [orig:97 D.35028 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:84 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:97 D.35028 ] [97])
            (const_int 3 [0x3]))
        (nil)))
(insn 77 76 79 9 (parallel [
            (set (reg:DI 0 ax [122])
                (ashift:DI (reg:DI 0 ax [121])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:84 512 {*ashldi3_1}
     (nil))
(insn 79 77 80 9 (set (reg:DI 1 dx [orig:98 D.35028 ] [98])
        (reg:DI 0 ax [121])) /home/kai/git_repos/obme/obme.cpp:84 89 {*movdi_internal}
     (nil))
(insn 80 79 81 9 (set (reg/f:DI 0 ax [123])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mvs+0 S8 A64])) /home/kai/git_repos/obme/obme.cpp:84 89 {*movdi_internal}
     (nil))
(insn 81 80 82 9 (parallel [
            (set (reg/f:DI 0 ax [orig:99 D.35032 ] [99])
                (plus:DI (reg/f:DI 0 ax [123])
                    (reg:DI 1 dx [orig:98 D.35028 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:84 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -88 [0xffffffffffffffa8])) [0 mvs+0 S8 A64])
            (reg:DI 1 dx [orig:98 D.35028 ] [98]))
        (nil)))
(insn 82 81 83 9 (set (reg:DI 1 dx [124])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 mv+0 S8 A64])) /home/kai/git_repos/obme/obme.cpp:84 89 {*movdi_internal}
     (nil))
(insn 83 82 84 9 (set (mem:DI (reg/f:DI 0 ax [orig:99 D.35032 ] [99]) [0 *_40+0 S8 A32])
        (reg:DI 1 dx [124])) /home/kai/git_repos/obme/obme.cpp:84 89 {*movdi_internal}
     (nil))
(insn 84 83 85 9 (set (reg:DI 1 dx [125])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 mv+8 S8 A64])) /home/kai/git_repos/obme/obme.cpp:84 89 {*movdi_internal}
     (nil))
(insn 85 84 86 9 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:99 D.35032 ] [99])
                (const_int 8 [0x8])) [0 *_40+8 S8 A32])
        (reg:DI 1 dx [125])) /home/kai/git_repos/obme/obme.cpp:84 89 {*movdi_internal}
     (nil))
(insn 86 85 87 9 (set (reg:DI 1 dx [126])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 mv+16 S8 A64])) /home/kai/git_repos/obme/obme.cpp:84 89 {*movdi_internal}
     (nil))
(insn 87 86 88 9 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:99 D.35032 ] [99])
                (const_int 16 [0x10])) [0 *_40+16 S8 A32])
        (reg:DI 1 dx [126])) /home/kai/git_repos/obme/obme.cpp:84 89 {*movdi_internal}
     (nil))
(insn 88 87 89 9 (set (reg:SI 0 ax [127])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 cnt+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:85 90 {*movsi_internal}
     (nil))
(insn 89 88 90 9 (set (reg:DI 1 dx [orig:100 D.35028 ] [100])
        (sign_extend:DI (reg:SI 0 ax [127]))) /home/kai/git_repos/obme/obme.cpp:85 142 {*extendsidi2_rex64}
     (nil))
(insn 90 89 91 9 (set (reg:DI 0 ax [128])
        (reg:DI 1 dx [orig:100 D.35028 ] [100])) /home/kai/git_repos/obme/obme.cpp:85 89 {*movdi_internal}
     (nil))
(insn 91 90 92 9 (parallel [
            (set (reg:DI 0 ax [128])
                (ashift:DI (reg:DI 0 ax [128])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:85 512 {*ashldi3_1}
     (nil))
(insn 92 91 93 9 (parallel [
            (set (reg:DI 0 ax [128])
                (plus:DI (reg:DI 0 ax [128])
                    (reg:DI 1 dx [orig:100 D.35028 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:85 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:100 D.35028 ] [100])
            (const_int 3 [0x3]))
        (nil)))
(insn 93 92 95 9 (parallel [
            (set (reg:DI 0 ax [129])
                (ashift:DI (reg:DI 0 ax [128])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:85 512 {*ashldi3_1}
     (nil))
(insn 95 93 96 9 (set (reg:DI 1 dx [orig:101 D.35028 ] [101])
        (reg:DI 0 ax [128])) /home/kai/git_repos/obme/obme.cpp:85 89 {*movdi_internal}
     (nil))
(insn 96 95 97 9 (set (reg/f:DI 0 ax [130])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mvs+0 S8 A64])) /home/kai/git_repos/obme/obme.cpp:85 89 {*movdi_internal}
     (nil))
(insn 97 96 98 9 (parallel [
            (set (reg/f:DI 1 dx [orig:102 D.35032 ] [102])
                (plus:DI (reg:DI 1 dx [orig:101 D.35028 ] [101])
                    (reg/f:DI 0 ax [130])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:85 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -88 [0xffffffffffffffa8])) [0 mvs+0 S8 A64])
            (reg:DI 1 dx [orig:101 D.35028 ] [101]))
        (nil)))
(insn 98 97 99 9 (set (reg:SI 0 ax [131])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 i+0 S4 A32])) /home/kai/git_repos/obme/obme.cpp:85 90 {*movsi_internal}
     (nil))
(insn 99 98 100 9 (set (mem/j:SI (plus:DI (reg/f:DI 1 dx [orig:102 D.35032 ] [102])
                (const_int 20 [0x14])) [0 _44->frame+0 S4 A32])
        (reg:SI 0 ax [131])) /home/kai/git_repos/obme/obme.cpp:85 90 {*movsi_internal}
     (nil))
(insn 100 99 101 9 (set (reg:SI 0 ax [132])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 mv.SAD+0 S4 A64])) /home/kai/git_repos/obme/obme.cpp:86 90 {*movsi_internal}
     (nil))
(insn 101 100 102 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 sad+0 S4 A32])
        (reg:SI 0 ax [132])) /home/kai/git_repos/obme/obme.cpp:86 90 {*movsi_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;;              9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 102 101 103 10 20 "" [1 uses])
(note 103 102 104 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 134 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -44 [0xffffffffffffffd4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -44 [0xffffffffffffffd4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:79 217 {*addsi_1}
     (nil))
(jump_insn 134 104 135 10 (set (pc)
        (label_ref 105)) /home/kai/git_repos/obme/obme.cpp:79 654 {jump}
     (nil)
 -> 105)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 135 134 108)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 133
(code_label 108 135 109 11 19 "" [1 uses])
(note 109 108 110 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 110 109 111 11 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -56 [0xffffffffffffffc8])) [0 cnt+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -56 [0xffffffffffffffc8])) [0 cnt+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:89 217 {*addsi_1}
     (nil))
(insn 111 110 112 11 (set (reg:SI 0 ax [133])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 overlap+0 S4 A64])) /home/kai/git_repos/obme/obme.cpp:77 90 {*movsi_internal}
     (nil))
(insn 112 111 136 11 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [0 y+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [0 y+0 S4 A32])
                    (reg:SI 0 ax [133])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:77 217 {*addsi_1}
     (nil))
(jump_insn 136 112 137 11 (set (pc)
        (label_ref 113)) /home/kai/git_repos/obme/obme.cpp:77 654 {jump}
     (nil)
 -> 113)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 137 136 116)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 134
(code_label 116 137 117 12 18 "" [1 uses])
(note 117 116 118 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 118 117 119 12 (set (reg:SI 0 ax [134])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 overlap+0 S4 A64])) /home/kai/git_repos/obme/obme.cpp:76 90 {*movsi_internal}
     (nil))
(insn 119 118 138 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -52 [0xffffffffffffffcc])) [0 x+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -52 [0xffffffffffffffcc])) [0 x+0 S4 A32])
                    (reg:SI 0 ax [134])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/obme.cpp:76 217 {*addsi_1}
     (nil))
(jump_insn 138 119 139 12 (set (pc)
        (label_ref 120)) /home/kai/git_repos/obme/obme.cpp:76 654 {jump}
     (nil)
 -> 120)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 139 138 141)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 13, flags: (NEW, RTL, MODIFIED)
;;  pred:       3
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 141 139 140 16 25 "" [1 uses])
(note 140 141 142 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 142 140 125 16 (const_int 0 [0]) /home/kai/git_repos/obme/obme.cpp:92 684 {nop}
     (nil))
;;  succ:       13 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 [100.0%]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 125 142 131 13 16 "" [0 uses])
(note 131 125 126 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 126 131 127 13 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.35033+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 0 ax [136]))
        ]) /home/kai/git_repos/obme/obme.cpp:92 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 127 126 132 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 130)
            (pc))) /home/kai/git_repos/obme/obme.cpp:92 612 {*jcc_1}
     (nil)
 -> 130)
;;  succ:       15
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 132 127 128 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(call_insn 128 132 129 14 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f86e1400af8 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) /home/kai/git_repos/obme/obme.cpp:92 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 129 128 130)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 130 129 133 15 24 "" [1 uses])
(note 133 130 143 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 143 133 0 NOTE_INSN_DELETED)

;; Function void __static_initialization_and_destruction_0(int, int) (_Z41__static_initialization_and_destruction_0ii, funcdef_no=1567, decl_uid=34841, cgraph_uid=583, symbol_order=609)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rBwBz {*call}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rBwBz {*call_value}

********** Pseudo live ranges #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


void __static_initialization_and_destruction_0(int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={3d} r1={4d,1u} r2={3d} r4={4d,2u} r5={5d,3u} r6={1d,10u} r7={1d,8u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={4d,2u} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 195{168d,27u,0e} in 13{11 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 __initialize_p+0 S4 A32])
        (reg:SI 5 di [ __initialize_p ])) /home/kai/git_repos/obme/obme.cpp:92 90 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 __priority+0 S4 A32])
        (reg:SI 4 si [ __priority ])) /home/kai/git_repos/obme/obme.cpp:92 90 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 __initialize_p+0 S4 A32])
            (const_int 1 [0x1]))) /home/kai/git_repos/obme/obme.cpp:92 7 {*cmpsi_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 25)
            (pc))) /home/kai/git_repos/obme/obme.cpp:92 612 {*jcc_1}
     (nil)
 -> 25)
;;  succ:       3 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 __priority+0 S4 A32])
            (const_int 65535 [0xffff]))) /home/kai/git_repos/obme/obme.cpp:92 7 {*cmpsi_1}
     (nil))
(jump_insn 11 10 12 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 25)
            (pc))) /home/kai/git_repos/obme/obme.cpp:92 612 {*jcc_1}
     (nil)
 -> 25)
;;  succ:       4 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 4 (set (reg:DI 5 di)
        (symbol_ref:DI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 0x7f86e161e480 __ioinit>)) /usr/include/c++/5/iostream:74 89 {*movdi_internal}
     (nil))
(call_insn 14 13 15 4 (call (mem:QI (symbol_ref:DI ("_ZNSt8ios_base4InitC1Ev") [flags 0x41]  <function_decl 0x7f86e1948e58 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/iostream:74 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 14 16 4 (set (reg:DI 1 dx)
        (symbol_ref:DI ("__dso_handle") [flags 0x42]  <var_decl 0x7f86e13c4cf0 __dso_handle>)) /usr/include/c++/5/iostream:74 89 {*movdi_internal}
     (nil))
(insn 16 15 17 4 (set (reg:DI 4 si)
        (symbol_ref:DI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 0x7f86e161e480 __ioinit>)) /usr/include/c++/5/iostream:74 89 {*movdi_internal}
     (nil))
(insn 17 16 18 4 (set (reg:DI 5 di)
        (symbol_ref:DI ("_ZNSt8ios_base4InitD1Ev") [flags 0x41]  <function_decl 0x7f86e195c0d8 __comp_dtor >)) /usr/include/c++/5/iostream:74 89 {*movdi_internal}
     (nil))
(call_insn 18 17 25 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_atexit") [flags 0x41]  <function_decl 0x7f86e13ce000 __cxa_atexit>) [0 __cxa_atexit S1 A8])
            (const_int 0 [0]))) /usr/include/c++/5/iostream:74 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 5, flags: (NEW, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              2
;;              3
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 25 18 23 6 28 "" [2 uses])
(note 23 25 24 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 21 6 (const_int 0 [0]) /home/kai/git_repos/obme/obme.cpp:92 684 {nop}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 21 24 22 5 26 "" [0 uses])
(note 22 21 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 26 22 0 NOTE_INSN_DELETED)

;; Function (static initializers for /home/kai/git_repos/obme/obme.cpp) (_GLOBAL__sub_I__Z7calcSADPcS_ii, funcdef_no=1568, decl_uid=34847, cgraph_uid=584, symbol_order=731)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rBwBz {*call}

********** Pseudo live ranges #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


(static initializers for /home/kai/git_repos/obme/obme.cpp)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 4[si] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={3d,1u} r5={3d,1u} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 100{92d,8u,0e} in 3{2 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 4 si)
        (const_int 65535 [0xffff])) /home/kai/git_repos/obme/obme.cpp:92 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:SI 5 di)
        (const_int 1 [0x1])) /home/kai/git_repos/obme/obme.cpp:92 90 {*movsi_internal}
     (nil))
(call_insn 7 6 10 2 (call (mem:QI (symbol_ref:DI ("_Z41__static_initialization_and_destruction_0ii") [flags 0x3]  <function_decl 0x7f86e13c9d80 __static_initialization_and_destruction_0>) [0 __static_initialization_and_destruction_0 S1 A8])
        (const_int 0 [0])) /home/kai/git_repos/obme/obme.cpp:92 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 10 7 0 NOTE_INSN_DELETED)
