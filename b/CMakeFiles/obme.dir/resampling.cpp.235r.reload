
;; Function void bilinear(imgpel*, imgpel*, int, int, int, int) (_Z8bilinearPcS_iiii, funcdef_no=0, decl_uid=2346, cgraph_uid=0, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) ?mr {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 53:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 61:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) ?mr {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 72:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=228 from oldreg=89, assigning class GENERAL_REGS to r228
   72: {r228:SI=r228:SI*[frame:DI-0x4c];clobber flags:CC;}
      REG_DEAD r175:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  263: r228:SI=r175:SI
    Inserting insn reload after:
  264: r89:SI=r228:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 74
	 Choosing alt 0 in insn 74:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 77
	 Choosing alt 0 in insn 77:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 78:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) qm {extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 82:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 87:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 89:  (0) r  (1) 0  (2) mr {*mulsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 90
	 Choosing alt 0 in insn 90:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 91:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 93
	 Choosing alt 0 in insn 93:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 94:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) qm {extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 102:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 106:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 111:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 112:  (0) r  (1) 0  (2) mr {*mulsi3_1}
      Creating newreg=229 from oldreg=103, assigning class GENERAL_REGS to r229
  112: {r229:SI=r229:SI*[frame:DI-0x4c];clobber flags:CC;}
      REG_DEAD r102:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  265: r229:SI=r102:SI
    Inserting insn reload after:
  266: r103:SI=r229:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 114
	 Choosing alt 0 in insn 114:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 115:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 117
	 Choosing alt 0 in insn 117:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 118:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) qm {extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 120:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 126:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 130:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 131:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 135:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 136:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 140:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 142:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 143:  (0) r  (1) 0  (2) mr {*mulsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 144
	 Choosing alt 0 in insn 144:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 145:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 146:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 147
	 Choosing alt 0 in insn 147:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 148:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =r  (1) qm {extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 150:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 156:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 160:  (0) r  (1) l  (2) M {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 163:  (0) r  (1) 0  (2) mr {*mulsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 164
	 Choosing alt 0 in insn 164:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 165:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 166:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 167
	 Choosing alt 0 in insn 167:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 170:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 173:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 176:  (0) r  (1) 0  (2) mr {*mulsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 177
	 Choosing alt 0 in insn 177:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 178:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 179:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 183
	 Choosing alt 0 in insn 183:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 184:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=230 from oldreg=207, assigning class GENERAL_REGS to r230
  184: {r230:SI=r230:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  267: r230:SI=r131:SI
    Inserting insn reload after:
  268: r207:SI=r230:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 185
	 Choosing alt 0 in insn 185:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 189:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 191:  (0) r  (1) l  (2) M {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 194:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 195:  (0) r  (1) 0  (2) mr {*mulsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 196
	 Choosing alt 0 in insn 196:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 197:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 198:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 202
	 Choosing alt 0 in insn 202:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 203:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=231 from oldreg=215, assigning class GENERAL_REGS to r231
  203: {r231:SI=r231:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  269: r231:SI=r141:SI
    Inserting insn reload after:
  270: r215:SI=r231:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 204
	 Choosing alt 0 in insn 204:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 208:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 211:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 214:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 215:  (0) r  (1) 0  (2) mr {*mulsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 216
	 Choosing alt 0 in insn 216:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 217:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 218:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 219:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 220:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 222:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 226
	 Choosing alt 0 in insn 226:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 228:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) =r  (2) rm  (3) 0 {*movsicc_noc}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 231:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 233:  (0) =q  (1) q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 234:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 235:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 241:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 27
EBB 26

********** Pseudo live ranges #1: **********

  BB 26
  BB 27
   Insn 261: point = 0
  BB 3
   Insn 15: point = 0
   Insn 14: point = 0
   Insn 13: point = 1
  BB 25
   Insn 257: point = 2
   Insn 241: point = 2
  BB 5
   Insn 21: point = 2
   Insn 20: point = 2
   Insn 19: point = 3
  BB 24
   Insn 255: point = 4
   Insn 235: point = 4
   Insn 234: point = 4
   Insn 233: point = 5
   Insn 232: point = 7
   Insn 231: point = 9
   Insn 230: point = 11
   Insn 229: point = 12
   Insn 228: point = 12
   Insn 227: point = 13
   Insn 226: point = 15
   Insn 225: point = 17
   Insn 224: point = 18
   Insn 223: point = 20
   Insn 222: point = 21
   Insn 221: point = 23
   Insn 220: point = 24
   Insn 219: point = 25
   Insn 218: point = 27
   Insn 217: point = 28
   Insn 216: point = 30
   Insn 215: point = 32
   Insn 214: point = 34
   Insn 213: point = 36
   Insn 212: point = 38
   Insn 211: point = 39
   Insn 210: point = 41
   Insn 209: point = 43
   Insn 208: point = 44
   Insn 207: point = 45
   Insn 206: point = 47
   Insn 205: point = 49
   Insn 204: point = 51
   Insn 270: point = 53
	Hard reg 2 is preferable by r231 with profit 1
   Insn 203: point = 55
   Insn 269: point = 55
   Insn 202: point = 56
   Insn 201: point = 58
   Insn 200: point = 59
   Insn 199: point = 60
   Insn 198: point = 62
   Insn 197: point = 63
   Insn 196: point = 65
   Insn 195: point = 67
   Insn 194: point = 69
   Insn 193: point = 71
   Insn 192: point = 73
   Insn 191: point = 74
   Insn 190: point = 76
   Insn 189: point = 77
   Insn 188: point = 78
   Insn 187: point = 80
   Insn 186: point = 82
   Insn 185: point = 84
   Insn 268: point = 86
	Hard reg 2 is preferable by r230 with profit 1
   Insn 184: point = 88
   Insn 267: point = 88
   Insn 183: point = 89
   Insn 182: point = 91
   Insn 181: point = 92
   Insn 180: point = 93
   Insn 179: point = 95
   Insn 178: point = 96
   Insn 177: point = 98
   Insn 176: point = 100
   Insn 175: point = 102
   Insn 174: point = 104
   Insn 173: point = 105
   Insn 172: point = 107
   Insn 171: point = 109
   Insn 170: point = 110
   Insn 169: point = 111
   Insn 168: point = 113
   Insn 167: point = 114
   Insn 166: point = 116
   Insn 165: point = 117
   Insn 164: point = 119
   Insn 163: point = 121
   Insn 162: point = 123
   Insn 161: point = 125
   Insn 160: point = 126
   Insn 159: point = 128
  BB 22
   Insn 253: point = 129
   Insn 150: point = 129
   Insn 149: point = 130
   Insn 148: point = 132
   Insn 147: point = 134
   Insn 146: point = 136
   Insn 145: point = 137
   Insn 144: point = 139
   Insn 143: point = 141
   Insn 142: point = 143
   Insn 141: point = 145
   Insn 140: point = 146
   Insn 139: point = 148
  BB 23
   Insn 156: point = 149
   Insn 155: point = 150
  BB 21
   Insn 137: point = 151
   Insn 136: point = 151
   Insn 135: point = 152
   Insn 134: point = 154
  BB 20
   Insn 132: point = 155
   Insn 131: point = 155
   Insn 130: point = 156
   Insn 129: point = 158
  BB 18
   Insn 251: point = 159
   Insn 120: point = 159
   Insn 119: point = 160
   Insn 118: point = 162
   Insn 117: point = 164
   Insn 116: point = 166
   Insn 115: point = 167
   Insn 114: point = 169
   Insn 113: point = 171
   Insn 266: point = 172
	Hard reg 1 is preferable by r229 with profit 1
   Insn 112: point = 174
   Insn 265: point = 174
	Hard reg 1 is preferable by r229 with profit 1
	Hard reg 0 is preferable by r229 with profit 1
   Insn 111: point = 176
   Insn 110: point = 178
  BB 19
   Insn 126: point = 179
   Insn 125: point = 180
  BB 17
   Insn 108: point = 181
   Insn 107: point = 181
   Insn 106: point = 182
   Insn 105: point = 184
  BB 15
   Insn 249: point = 185
   Insn 96: point = 185
   Insn 95: point = 186
   Insn 94: point = 188
   Insn 93: point = 190
   Insn 92: point = 192
   Insn 91: point = 193
   Insn 90: point = 195
   Insn 89: point = 197
   Insn 88: point = 199
   Insn 87: point = 200
   Insn 86: point = 202
  BB 16
   Insn 102: point = 203
   Insn 101: point = 204
  BB 14
   Insn 84: point = 205
   Insn 83: point = 205
   Insn 82: point = 206
   Insn 81: point = 208
   Insn 80: point = 209
   Insn 79: point = 210
   Insn 78: point = 212
   Insn 77: point = 214
   Insn 76: point = 216
   Insn 75: point = 217
   Insn 74: point = 219
   Insn 73: point = 221
   Insn 264: point = 222
	Hard reg 1 is preferable by r228 with profit 1
   Insn 72: point = 224
   Insn 263: point = 224
	Hard reg 1 is preferable by r228 with profit 1
	Hard reg 0 is preferable by r228 with profit 1
   Insn 71: point = 226
  BB 13
   Insn 68: point = 227
  BB 12
   Insn 66: point = 227
   Insn 65: point = 227
  BB 11
   Insn 62: point = 227
   Insn 61: point = 228
   Insn 60: point = 230
  BB 10
   Insn 55: point = 231
   Insn 54: point = 231
   Insn 53: point = 232
   Insn 52: point = 234
  BB 9
   Insn 49: point = 235
  BB 8
   Insn 47: point = 235
   Insn 46: point = 235
  BB 7
   Insn 43: point = 235
   Insn 42: point = 236
   Insn 41: point = 238
  BB 6
   Insn 36: point = 239
   Insn 35: point = 239
   Insn 34: point = 240
   Insn 33: point = 242
   Insn 32: point = 243
   Insn 31: point = 244
   Insn 30: point = 245
   Insn 29: point = 246
   Insn 28: point = 247
   Insn 27: point = 248
   Insn 26: point = 250
  BB 4
   Insn 17: point = 251
  BB 2
   Insn 11: point = 251
   Insn 7: point = 251
   Insn 6: point = 251
   Insn 5: point = 251
   Insn 4: point = 251
   Insn 3: point = 251
   Insn 2: point = 251
 r87: [239..240]
 r88: [231..232]
 r89: [220..222]
 r90: [218..219]
 r91: [215..217]
 r92: [213..214]
 r93: [211..212]
 r94: [205..206]
 r95: [196..200]
 r96: [196..197]
 r97: [194..195]
 r98: [191..193]
 r99: [189..190]
 r100: [187..188]
 r101: [181..182]
 r102: [175..176]
 r103: [170..172]
 r104: [168..169]
 r105: [165..167]
 r106: [163..164]
 r107: [161..162]
 r108: [155..156]
 r109: [151..152]
 r110: [140..146]
 r111: [142..143]
 r112: [140..141]
 r113: [138..139]
 r114: [135..137]
 r115: [133..134]
 r116: [131..132]
 r117: [120..126]
 r118: [122..123]
 r119: [120..121]
 r120: [118..119]
 r121: [115..117]
 r122: [110..114]
 r123: [110..111]
 r124: [106..107]
 r125: [99..105]
 r126: [101..102]
 r127: [99..100]
 r128: [97..98]
 r129: [94..96]
 r130: [77..93]
 r131: [85..89]
 r132: [79..80]
 r133: [77..78]
 r134: [66..74]
 r135: [70..71]
 r136: [68..69]
 r137: [66..67]
 r138: [64..65]
 r139: [61..63]
 r140: [44..60]
 r141: [52..56]
 r142: [46..47]
 r143: [44..45]
 r144: [40..41]
 r145: [31..39]
 r146: [35..36]
 r147: [33..34]
 r148: [31..32]
 r149: [29..30]
 r150: [26..28]
 r151: [4..25]
 r152: [19..21]
 r153: [16..18]
 r154: [14..15]
 r155: [6..7]
 r156: [4..5]
 r157: [0..1]
 r158: [2..3]
 r161: [247..248]
 r162: [249..250]
 r163: [245..246]
 r164: [243..244]
 r165: [241..242]
 r168: [235..236]
 r169: [237..238]
 r170: [233..234]
 r173: [227..228]
 r174: [229..230]
 r175: [225..226]
 r176: [220..221]
 r177: [215..216]
 r178: [209..210]
 r179: [207..208]
 r180: [201..202]
 r181: [198..199]
 r182: [191..192]
 r183: [185..186]
 r184: [203..204]
 r185: [183..184]
 r186: [177..178]
 r187: [170..171]
 r188: [165..166]
 r189: [159..160]
 r190: [179..180]
 r191: [157..158]
 r192: [153..154]
 r193: [147..148]
 r194: [144..145]
 r195: [135..136]
 r196: [129..130]
 r197: [149..150]
 r198: [127..128]
 r199: [124..125]
 r200: [115..116]
 r201: [112..113]
 r202: [108..109]
 r203: [103..104]
 r204: [94..95]
 r205: [90..92]
 r206: [90..91]
 r207: [85..86]
 r208: [83..84]
 r209: [81..82]
 r210: [75..76]
 r211: [72..73]
 r212: [61..62]
 r213: [57..59]
 r214: [57..58]
 r215: [52..53]
 r216: [50..51]
 r217: [48..49]
 r218: [42..43]
 r219: [37..38]
 r220: [26..27]
 r221: [22..24]
 r222: [22..23]
 r223: [19..20]
 r224: [16..17]
 r225: [10..13]
 r226: [11..12]
 r227: [8..9]
 r228: [223..224]
 r229: [173..174]
 r230: [87..88]
 r231: [54..55]
Compressing live ranges: from 251 to 222 - 88%
Ranges after the compression:
 r87: [210..211]
 r88: [202..203]
 r89: [192..193]
 r90: [190..191]
 r91: [188..189]
 r92: [186..187]
 r93: [184..185]
 r94: [178..179]
 r95: [170..173]
 r96: [170..171]
 r97: [168..169]
 r98: [166..167]
 r99: [164..165]
 r100: [162..163]
 r101: [156..157]
 r102: [150..151]
 r103: [146..147]
 r104: [144..145]
 r105: [142..143]
 r106: [140..141]
 r107: [138..139]
 r108: [132..133]
 r109: [128..129]
 r110: [118..123]
 r111: [120..121]
 r112: [118..119]
 r113: [116..117]
 r114: [114..115]
 r115: [112..113]
 r116: [110..111]
 r117: [100..105]
 r118: [102..103]
 r119: [100..101]
 r120: [98..99]
 r121: [96..97]
 r122: [92..95]
 r123: [92..93]
 r124: [88..89]
 r125: [82..87]
 r126: [84..85]
 r127: [82..83]
 r128: [80..81]
 r129: [78..79]
 r130: [64..77]
 r131: [72..75]
 r132: [66..67]
 r133: [64..65]
 r134: [54..61]
 r135: [58..59]
 r136: [56..57]
 r137: [54..55]
 r138: [52..53]
 r139: [50..51]
 r140: [36..49]
 r141: [44..47]
 r142: [38..39]
 r143: [36..37]
 r144: [32..33]
 r145: [24..31]
 r146: [28..29]
 r147: [26..27]
 r148: [24..25]
 r149: [22..23]
 r150: [20..21]
 r151: [4..19]
 r152: [16..17]
 r153: [14..15]
 r154: [12..13]
 r155: [6..7]
 r156: [4..5]
 r157: [0..1]
 r158: [2..3]
 r161: [218..219]
 r162: [220..221]
 r163: [216..217]
 r164: [214..215]
 r165: [212..213]
 r168: [206..207]
 r169: [208..209]
 r170: [204..205]
 r173: [198..199]
 r174: [200..201]
 r175: [196..197]
 r176: [192..193]
 r177: [188..189]
 r178: [182..183]
 r179: [180..181]
 r180: [174..175]
 r181: [172..173]
 r182: [166..167]
 r183: [160..161]
 r184: [176..177]
 r185: [158..159]
 r186: [152..153]
 r187: [146..147]
 r188: [142..143]
 r189: [136..137]
 r190: [154..155]
 r191: [134..135]
 r192: [130..131]
 r193: [124..125]
 r194: [122..123]
 r195: [114..115]
 r196: [108..109]
 r197: [126..127]
 r198: [106..107]
 r199: [104..105]
 r200: [96..97]
 r201: [94..95]
 r202: [90..91]
 r203: [86..87]
 r204: [78..79]
 r205: [76..77]
 r206: [76..77]
 r207: [72..73]
 r208: [70..71]
 r209: [68..69]
 r210: [62..63]
 r211: [60..61]
 r212: [50..51]
 r213: [48..49]
 r214: [48..49]
 r215: [44..45]
 r216: [42..43]
 r217: [40..41]
 r218: [34..35]
 r219: [30..31]
 r220: [20..21]
 r221: [18..19]
 r222: [18..19]
 r223: [16..17]
 r224: [14..15]
 r225: [10..11]
 r226: [10..11]
 r227: [8..9]
 r228: [194..195]
 r229: [148..149]
 r230: [74..75]
 r231: [46..47]

********** Assignment #1: **********

	 Assigning to 228 (cl=GENERAL_REGS, orig=89, freq=3, tfirst=228, tfreq=3)...
	   Assign 0 to reload r228 (freq=3)
	 Assigning to 229 (cl=GENERAL_REGS, orig=103, freq=3, tfirst=229, tfreq=3)...
	   Assign 0 to reload r229 (freq=3)
	 Assigning to 230 (cl=GENERAL_REGS, orig=207, freq=3, tfirst=230, tfreq=3)...
	   Assign 2 to reload r230 (freq=3)
	 Assigning to 231 (cl=GENERAL_REGS, orig=215, freq=3, tfirst=231, tfreq=3)...
	   Assign 2 to reload r231 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 34
changing reg in insn 35
changing reg in insn 53
changing reg in insn 54
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 82
changing reg in insn 83
changing reg in insn 87
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 93
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 106
changing reg in insn 107
changing reg in insn 111
changing reg in insn 114
changing reg in insn 114
changing reg in insn 115
changing reg in insn 115
changing reg in insn 117
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 119
changing reg in insn 130
changing reg in insn 131
changing reg in insn 135
changing reg in insn 136
changing reg in insn 140
changing reg in insn 142
changing reg in insn 143
changing reg in insn 143
changing reg in insn 144
changing reg in insn 145
changing reg in insn 145
changing reg in insn 147
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 149
changing reg in insn 160
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 164
changing reg in insn 165
changing reg in insn 165
changing reg in insn 167
changing reg in insn 167
changing reg in insn 170
changing reg in insn 169
changing reg in insn 170
changing reg in insn 172
changing reg in insn 173
changing reg in insn 173
changing reg in insn 175
changing reg in insn 176
changing reg in insn 176
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 180
changing reg in insn 180
changing reg in insn 180
changing reg in insn 189
changing reg in insn 183
changing reg in insn 187
changing reg in insn 188
changing reg in insn 189
changing reg in insn 191
changing reg in insn 193
changing reg in insn 194
changing reg in insn 194
changing reg in insn 195
changing reg in insn 195
changing reg in insn 196
changing reg in insn 197
changing reg in insn 197
changing reg in insn 199
changing reg in insn 199
changing reg in insn 199
changing reg in insn 208
changing reg in insn 202
changing reg in insn 206
changing reg in insn 207
changing reg in insn 208
changing reg in insn 210
changing reg in insn 211
changing reg in insn 211
changing reg in insn 213
changing reg in insn 214
changing reg in insn 214
changing reg in insn 215
changing reg in insn 215
changing reg in insn 216
changing reg in insn 217
changing reg in insn 217
changing reg in insn 219
changing reg in insn 219
changing reg in insn 219
changing reg in insn 234
changing reg in insn 222
changing reg in insn 224
changing reg in insn 224
changing reg in insn 224
changing reg in insn 226
changing reg in insn 226
changing reg in insn 227
changing reg in insn 232
changing reg in insn 233
changing reg in insn 234
changing reg in insn 13
changing reg in insn 14
changing reg in insn 19
changing reg in insn 20
changing reg in insn 27
changing reg in insn 28
changing reg in insn 26
changing reg in insn 27
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 42
changing reg in insn 43
changing reg in insn 41
changing reg in insn 42
changing reg in insn 52
changing reg in insn 53
changing reg in insn 61
changing reg in insn 62
changing reg in insn 60
changing reg in insn 61
changing reg in insn 71
changing reg in insn 73
changing reg in insn 76
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 92
changing reg in insn 95
changing reg in insn 96
changing reg in insn 101
changing reg in insn 102
changing reg in insn 105
changing reg in insn 106
changing reg in insn 110
changing reg in insn 111
changing reg in insn 113
changing reg in insn 116
changing reg in insn 119
changing reg in insn 120
changing reg in insn 125
changing reg in insn 126
changing reg in insn 129
changing reg in insn 130
changing reg in insn 134
changing reg in insn 135
changing reg in insn 139
changing reg in insn 140
changing reg in insn 141
changing reg in insn 142
changing reg in insn 146
changing reg in insn 149
changing reg in insn 150
changing reg in insn 155
changing reg in insn 156
changing reg in insn 159
changing reg in insn 160
changing reg in insn 161
changing reg in insn 162
changing reg in insn 166
changing reg in insn 168
changing reg in insn 171
changing reg in insn 172
changing reg in insn 174
changing reg in insn 175
changing reg in insn 179
changing reg in insn 180
changing reg in insn 181
changing reg in insn 182
changing reg in insn 185
changing reg in insn 186
changing reg in insn 186
changing reg in insn 187
changing reg in insn 190
changing reg in insn 191
changing reg in insn 192
changing reg in insn 193
changing reg in insn 198
changing reg in insn 199
changing reg in insn 200
changing reg in insn 201
changing reg in insn 204
changing reg in insn 205
changing reg in insn 205
changing reg in insn 206
changing reg in insn 209
changing reg in insn 210
changing reg in insn 212
changing reg in insn 213
changing reg in insn 218
changing reg in insn 219
changing reg in insn 220
changing reg in insn 222
changing reg in insn 221
changing reg in insn 222
changing reg in insn 223
changing reg in insn 224
changing reg in insn 225
changing reg in insn 230
changing reg in insn 227
changing reg in insn 231
changing reg in insn 230
changing reg in insn 229
changing reg in insn 228
changing reg in insn 228
changing reg in insn 230
changing reg in insn 231
changing reg in insn 232
deleting insn with uid = 263.
deleting insn with uid = 265.
deleting insn with uid = 268.
deleting insn with uid = 187.
deleting insn with uid = 270.
deleting insn with uid = 206.
deleting insn with uid = 227.
deleting insn with uid = 232.
starting the processing of deferred insns
ending the processing of deferred insns


void bilinear(imgpel*, imgpel*, int, int, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 17[flags] 37[r8] 38[r9]
;;  ref usage 	r0={106d,109u} r1={22d,22u,10e} r2={11d,11u,2e} r4={1d,1u} r5={1d,1u} r6={1d,120u} r7={1d,27u} r17={75d,11u} r20={1d,1u,39e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d,1u} r38={1d,1u} 
;;    total ref usage 585{229d,305u,51e} in 191{191 regular + 0 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 source+0 S8 A64])
        (reg:DI 5 di [ source ])) /home/kai/git_repos/obme/resampling.cpp:5 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 buffer+0 S8 A64])
        (reg:DI 4 si [ buffer ])) /home/kai/git_repos/obme/resampling.cpp:5 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 buffer_w+0 S4 A32])
        (reg:SI 1 dx [ buffer_w ])) /home/kai/git_repos/obme/resampling.cpp:5 90 {*movsi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 buffer_h+0 S4 A32])
        (reg:SI 2 cx [ buffer_h ])) /home/kai/git_repos/obme/resampling.cpp:5 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 picwidth+0 S4 A32])
        (reg:SI 37 r8 [ picwidth ])) /home/kai/git_repos/obme/resampling.cpp:5 90 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 picheight+0 S4 A32])
        (reg:SI 38 r9 [ picheight ])) /home/kai/git_repos/obme/resampling.cpp:5 90 {*movsi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 242 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])
        (const_int 0 [0])) /home/kai/git_repos/obme/resampling.cpp:6 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              25 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 157
(code_label 242 11 12 3 15 "" [1 uses])
(note 12 242 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg:SI 0 ax [157])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:6 90 {*movsi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [157])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 buffer_h+0 S4 A32]))) /home/kai/git_repos/obme/resampling.cpp:6 7 {*cmpsi_1}
     (nil))
(jump_insn 15 14 16 3 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 260)
            (pc))) /home/kai/git_repos/obme/resampling.cpp:6 612 {*jcc_1}
     (nil)
 -> 260)
;;  succ:       27
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 236 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32])
        (const_int 0 [0])) /home/kai/git_repos/obme/resampling.cpp:7 90 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              24 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 158
(code_label 236 17 18 5 14 "" [1 uses])
(note 18 236 19 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 5 (set (reg:SI 0 ax [158])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:7 90 {*movsi_internal}
     (nil))
(insn 20 19 21 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [158])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])) [0 buffer_w+0 S4 A32]))) /home/kai/git_repos/obme/resampling.cpp:7 7 {*cmpsi_1}
     (nil))
(jump_insn 21 20 22 5 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 239)
            (pc))) /home/kai/git_repos/obme/resampling.cpp:7 612 {*jcc_1}
     (nil)
 -> 239)
;;  succ:       25
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 161 162 163 164 165
(note 22 21 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 26 22 27 6 (set (reg:SI 0 ax [162])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 buffer_w+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:9 90 {*movsi_internal}
     (nil))
(insn 27 26 28 6 (parallel [
            (set (reg:SI 0 ax [161])
                (ashift:SI (reg:SI 0 ax [162])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:9 511 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -68 [0xffffffffffffffbc])) [0 buffer_w+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 28 27 29 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 buffer_r+0 S4 A32])
        (reg:SI 0 ax [161])) /home/kai/git_repos/obme/resampling.cpp:9 90 {*movsi_internal}
     (nil))
(insn 29 28 30 6 (set (reg:SI 0 ax [163])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:12 90 {*movsi_internal}
     (nil))
(insn 30 29 31 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S4 A32])
        (reg:SI 0 ax [163])) /home/kai/git_repos/obme/resampling.cpp:12 90 {*movsi_internal}
     (nil))
(insn 31 30 32 6 (set (reg:SI 0 ax [164])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:13 90 {*movsi_internal}
     (nil))
(insn 32 31 33 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 y+0 S4 A32])
        (reg:SI 0 ax [164])) /home/kai/git_repos/obme/resampling.cpp:13 90 {*movsi_internal}
     (nil))
(insn 33 32 34 6 (set (reg:SI 0 ax [165])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 picwidth+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:14 90 {*movsi_internal}
     (nil))
(insn 34 33 35 6 (parallel [
            (set (reg:SI 0 ax [orig:87 D.2483 ] [87])
                (plus:SI (reg:SI 0 ax [165])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:14 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -76 [0xffffffffffffffb4])) [0 picwidth+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 35 34 36 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:87 D.2483 ] [87])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 x+0 S4 A32]))) /home/kai/git_repos/obme/resampling.cpp:14 7 {*cmpsi_1}
     (nil))
(jump_insn 36 35 37 6 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) /home/kai/git_repos/obme/resampling.cpp:14 612 {*jcc_1}
     (nil)
 -> 44)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 168 169
(note 37 36 41 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 41 37 42 7 (set (reg:SI 0 ax [169])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 picwidth+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:14 90 {*movsi_internal}
     (nil))
(insn 42 41 43 7 (parallel [
            (set (reg:SI 0 ax [168])
                (plus:SI (reg:SI 0 ax [169])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:14 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -76 [0xffffffffffffffb4])) [0 picwidth+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 43 42 44 7 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S4 A32])
        (reg:SI 0 ax [168])) /home/kai/git_repos/obme/resampling.cpp:14 90 {*movsi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 44 43 45 8 4 "" [1 uses])
(note 45 44 46 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 8 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 x+0 S4 A32])
            (const_int 0 [0]))) /home/kai/git_repos/obme/resampling.cpp:15 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 47 46 48 8 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) /home/kai/git_repos/obme/resampling.cpp:15 612 {*jcc_1}
     (nil)
 -> 50)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 48 47 49 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S4 A32])
        (const_int 0 [0])) /home/kai/git_repos/obme/resampling.cpp:15 90 {*movsi_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;;              9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 170
(code_label 50 49 51 10 5 "" [1 uses])
(note 51 50 52 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 10 (set (reg:SI 0 ax [170])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 picheight+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:16 90 {*movsi_internal}
     (nil))
(insn 53 52 54 10 (parallel [
            (set (reg:SI 0 ax [orig:88 D.2483 ] [88])
                (plus:SI (reg:SI 0 ax [170])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:16 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 picheight+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 54 53 55 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:88 D.2483 ] [88])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 y+0 S4 A32]))) /home/kai/git_repos/obme/resampling.cpp:16 7 {*cmpsi_1}
     (nil))
(jump_insn 55 54 56 10 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 63)
            (pc))) /home/kai/git_repos/obme/resampling.cpp:16 612 {*jcc_1}
     (nil)
 -> 63)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 173 174
(note 56 55 60 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 60 56 61 11 (set (reg:SI 0 ax [174])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 picheight+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:16 90 {*movsi_internal}
     (nil))
(insn 61 60 62 11 (parallel [
            (set (reg:SI 0 ax [173])
                (plus:SI (reg:SI 0 ax [174])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:16 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 picheight+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 62 61 63 11 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 y+0 S4 A32])
        (reg:SI 0 ax [173])) /home/kai/git_repos/obme/resampling.cpp:16 90 {*movsi_internal}
     (nil))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;;              11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 63 62 64 12 6 "" [1 uses])
(note 64 63 65 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 12 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 y+0 S4 A32])
            (const_int 0 [0]))) /home/kai/git_repos/obme/resampling.cpp:17 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 66 65 67 12 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 69)
            (pc))) /home/kai/git_repos/obme/resampling.cpp:17 612 {*jcc_1}
     (nil)
 -> 69)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 67 66 68 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 y+0 S4 A32])
        (const_int 0 [0])) /home/kai/git_repos/obme/resampling.cpp:17 90 {*movsi_internal}
     (nil))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;;              13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 91 92 93 94 175 176 177 178 179
(code_label 69 68 70 14 7 "" [1 uses])
(note 70 69 71 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 14 (set (reg:SI 0 ax [175])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 y+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:18 90 {*movsi_internal}
     (nil))
(insn 72 71 264 14 (parallel [
            (set (reg:SI 0 ax [orig:89 D.2483 ] [89])
                (mult:SI (reg:SI 0 ax [orig:89 D.2483 ] [89])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -76 [0xffffffffffffffb4])) [0 picwidth+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:18 305 {*mulsi3_1}
     (nil))
(insn 264 72 73 14 (set (reg:SI 1 dx [orig:89 D.2483 ] [89])
        (reg:SI 0 ax [orig:89 D.2483 ] [89])) /home/kai/git_repos/obme/resampling.cpp:18 90 {*movsi_internal}
     (nil))
(insn 73 264 74 14 (set (reg:SI 0 ax [176])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:18 90 {*movsi_internal}
     (nil))
(insn 74 73 75 14 (parallel [
            (set (reg:SI 0 ax [orig:90 D.2483 ] [90])
                (plus:SI (reg:SI 0 ax [176])
                    (reg:SI 1 dx [orig:89 D.2483 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:18 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:89 D.2483 ] [89])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [0 x+0 S4 A32]))
        (nil)))
(insn 75 74 76 14 (set (reg:DI 1 dx [orig:91 D.2484 ] [91])
        (sign_extend:DI (reg:SI 0 ax [orig:90 D.2483 ] [90]))) /home/kai/git_repos/obme/resampling.cpp:18 142 {*extendsidi2_rex64}
     (nil))
(insn 76 75 77 14 (set (reg/f:DI 0 ax [177])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 source+0 S8 A64])) /home/kai/git_repos/obme/resampling.cpp:18 89 {*movdi_internal}
     (nil))
(insn 77 76 78 14 (parallel [
            (set (reg/f:DI 0 ax [orig:92 D.2485 ] [92])
                (plus:DI (reg/f:DI 0 ax [177])
                    (reg:DI 1 dx [orig:91 D.2484 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:18 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 source+0 S8 A64])
            (reg:DI 1 dx [orig:91 D.2484 ] [91]))
        (nil)))
(insn 78 77 79 14 (set (reg:QI 0 ax [orig:93 D.2486 ] [93])
        (mem:QI (reg/f:DI 0 ax [orig:92 D.2485 ] [92]) [0 *_32+0 S1 A8])) /home/kai/git_repos/obme/resampling.cpp:18 93 {*movqi_internal}
     (nil))
(insn 79 78 80 14 (set (reg:SI 0 ax [178])
        (sign_extend:SI (reg:QI 0 ax [orig:93 D.2486 ] [93]))) /home/kai/git_repos/obme/resampling.cpp:18 148 {extendqisi2}
     (nil))
(insn 80 79 81 14 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 a+0 S4 A32])
        (reg:SI 0 ax [178])) /home/kai/git_repos/obme/resampling.cpp:18 90 {*movsi_internal}
     (nil))
(insn 81 80 82 14 (set (reg:SI 0 ax [179])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:20 90 {*movsi_internal}
     (nil))
(insn 82 81 83 14 (parallel [
            (set (reg:SI 0 ax [orig:94 D.2483 ] [94])
                (plus:SI (reg:SI 0 ax [179])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:20 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [0 x+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 83 82 84 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:94 D.2483 ] [94])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [0 picwidth+0 S4 A32]))) /home/kai/git_repos/obme/resampling.cpp:20 7 {*cmpsi_1}
     (nil))
(jump_insn 84 83 85 14 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 99)
            (pc))) /home/kai/git_repos/obme/resampling.cpp:20 612 {*jcc_1}
     (nil)
 -> 99)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 95 96 97 98 99 100 180 181 182 183
(note 85 84 86 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 87 15 (set (reg:SI 0 ax [180])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:20 90 {*movsi_internal}
     (nil))
(insn 87 86 88 15 (parallel [
            (set (reg:SI 1 dx [orig:95 D.2483 ] [95])
                (plus:SI (reg:SI 0 ax [180])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:20 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [0 x+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 88 87 89 15 (set (reg:SI 0 ax [181])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 y+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:20 90 {*movsi_internal}
     (nil))
(insn 89 88 90 15 (parallel [
            (set (reg:SI 0 ax [orig:96 D.2483 ] [96])
                (mult:SI (reg:SI 0 ax [181])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -76 [0xffffffffffffffb4])) [0 picwidth+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:20 305 {*mulsi3_1}
     (nil))
(insn 90 89 91 15 (parallel [
            (set (reg:SI 0 ax [orig:97 D.2483 ] [97])
                (plus:SI (reg:SI 0 ax [orig:96 D.2483 ] [96])
                    (reg:SI 1 dx [orig:95 D.2483 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:20 217 {*addsi_1}
     (nil))
(insn 91 90 92 15 (set (reg:DI 1 dx [orig:98 D.2484 ] [98])
        (sign_extend:DI (reg:SI 0 ax [orig:97 D.2483 ] [97]))) /home/kai/git_repos/obme/resampling.cpp:20 142 {*extendsidi2_rex64}
     (nil))
(insn 92 91 93 15 (set (reg/f:DI 0 ax [182])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 source+0 S8 A64])) /home/kai/git_repos/obme/resampling.cpp:20 89 {*movdi_internal}
     (nil))
(insn 93 92 94 15 (parallel [
            (set (reg/f:DI 0 ax [orig:99 D.2485 ] [99])
                (plus:DI (reg/f:DI 0 ax [182])
                    (reg:DI 1 dx [orig:98 D.2484 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:20 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 source+0 S8 A64])
            (reg:DI 1 dx [orig:98 D.2484 ] [98]))
        (nil)))
(insn 94 93 95 15 (set (reg:QI 0 ax [orig:100 D.2486 ] [100])
        (mem:QI (reg/f:DI 0 ax [orig:99 D.2485 ] [99]) [0 *_40+0 S1 A8])) /home/kai/git_repos/obme/resampling.cpp:20 93 {*movqi_internal}
     (nil))
(insn 95 94 96 15 (set (reg:SI 0 ax [183])
        (sign_extend:SI (reg:QI 0 ax [orig:100 D.2486 ] [100]))) /home/kai/git_repos/obme/resampling.cpp:20 148 {extendqisi2}
     (nil))
(insn 96 95 249 15 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 b+0 S4 A32])
        (reg:SI 0 ax [183])) /home/kai/git_repos/obme/resampling.cpp:20 90 {*movsi_internal}
     (nil))
(jump_insn 249 96 250 15 (set (pc)
        (label_ref 103)) 654 {jump}
     (nil)
 -> 103)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 250 249 99)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 184
(code_label 99 250 100 16 8 "" [1 uses])
(note 100 99 101 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 101 100 102 16 (set (reg:SI 0 ax [184])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 a+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:21 90 {*movsi_internal}
     (nil))
(insn 102 101 103 16 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 b+0 S4 A32])
        (reg:SI 0 ax [184])) /home/kai/git_repos/obme/resampling.cpp:21 90 {*movsi_internal}
     (nil))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;;              15 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 101 185
(code_label 103 102 104 17 9 "" [1 uses])
(note 104 103 105 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 17 (set (reg:SI 0 ax [185])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 y+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:23 90 {*movsi_internal}
     (nil))
(insn 106 105 107 17 (parallel [
            (set (reg:SI 0 ax [orig:101 D.2483 ] [101])
                (plus:SI (reg:SI 0 ax [185])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:23 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 y+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 107 106 108 17 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:101 D.2483 ] [101])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [0 picheight+0 S4 A32]))) /home/kai/git_repos/obme/resampling.cpp:23 7 {*cmpsi_1}
     (nil))
(jump_insn 108 107 109 17 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 123)
            (pc))) /home/kai/git_repos/obme/resampling.cpp:23 612 {*jcc_1}
     (nil)
 -> 123)
;;  succ:       18 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 102 103 104 105 106 107 186 187 188 189
(note 109 108 110 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 110 109 111 18 (set (reg:SI 0 ax [186])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 y+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:23 90 {*movsi_internal}
     (nil))
(insn 111 110 112 18 (parallel [
            (set (reg:SI 0 ax [orig:102 D.2483 ] [102])
                (plus:SI (reg:SI 0 ax [186])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:23 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 y+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 112 111 266 18 (parallel [
            (set (reg:SI 0 ax [orig:103 D.2483 ] [103])
                (mult:SI (reg:SI 0 ax [orig:103 D.2483 ] [103])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -76 [0xffffffffffffffb4])) [0 picwidth+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:23 305 {*mulsi3_1}
     (nil))
(insn 266 112 113 18 (set (reg:SI 1 dx [orig:103 D.2483 ] [103])
        (reg:SI 0 ax [orig:103 D.2483 ] [103])) /home/kai/git_repos/obme/resampling.cpp:23 90 {*movsi_internal}
     (nil))
(insn 113 266 114 18 (set (reg:SI 0 ax [187])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:23 90 {*movsi_internal}
     (nil))
(insn 114 113 115 18 (parallel [
            (set (reg:SI 0 ax [orig:104 D.2483 ] [104])
                (plus:SI (reg:SI 0 ax [187])
                    (reg:SI 1 dx [orig:103 D.2483 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:23 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:103 D.2483 ] [103])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [0 x+0 S4 A32]))
        (nil)))
(insn 115 114 116 18 (set (reg:DI 1 dx [orig:105 D.2484 ] [105])
        (sign_extend:DI (reg:SI 0 ax [orig:104 D.2483 ] [104]))) /home/kai/git_repos/obme/resampling.cpp:23 142 {*extendsidi2_rex64}
     (nil))
(insn 116 115 117 18 (set (reg/f:DI 0 ax [188])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 source+0 S8 A64])) /home/kai/git_repos/obme/resampling.cpp:23 89 {*movdi_internal}
     (nil))
(insn 117 116 118 18 (parallel [
            (set (reg/f:DI 0 ax [orig:106 D.2485 ] [106])
                (plus:DI (reg/f:DI 0 ax [188])
                    (reg:DI 1 dx [orig:105 D.2484 ] [105])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:23 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 source+0 S8 A64])
            (reg:DI 1 dx [orig:105 D.2484 ] [105]))
        (nil)))
(insn 118 117 119 18 (set (reg:QI 0 ax [orig:107 D.2486 ] [107])
        (mem:QI (reg/f:DI 0 ax [orig:106 D.2485 ] [106]) [0 *_49+0 S1 A8])) /home/kai/git_repos/obme/resampling.cpp:23 93 {*movqi_internal}
     (nil))
(insn 119 118 120 18 (set (reg:SI 0 ax [189])
        (sign_extend:SI (reg:QI 0 ax [orig:107 D.2486 ] [107]))) /home/kai/git_repos/obme/resampling.cpp:23 148 {extendqisi2}
     (nil))
(insn 120 119 251 18 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 c+0 S4 A32])
        (reg:SI 0 ax [189])) /home/kai/git_repos/obme/resampling.cpp:23 90 {*movsi_internal}
     (nil))
(jump_insn 251 120 252 18 (set (pc)
        (label_ref 127)) 654 {jump}
     (nil)
 -> 127)
;;  succ:       20 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 252 251 123)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 190
(code_label 123 252 124 19 10 "" [1 uses])
(note 124 123 125 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 125 124 126 19 (set (reg:SI 0 ax [190])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 a+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:24 90 {*movsi_internal}
     (nil))
(insn 126 125 127 19 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 c+0 S4 A32])
        (reg:SI 0 ax [190])) /home/kai/git_repos/obme/resampling.cpp:24 90 {*movsi_internal}
     (nil))
;;  succ:       20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;;              18 [100.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 108 191
(code_label 127 126 128 20 11 "" [1 uses])
(note 128 127 129 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 20 (set (reg:SI 0 ax [191])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:26 90 {*movsi_internal}
     (nil))
(insn 130 129 131 20 (parallel [
            (set (reg:SI 0 ax [orig:108 D.2483 ] [108])
                (plus:SI (reg:SI 0 ax [191])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:26 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [0 x+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 131 130 132 20 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:108 D.2483 ] [108])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [0 picwidth+0 S4 A32]))) /home/kai/git_repos/obme/resampling.cpp:26 7 {*cmpsi_1}
     (nil))
(jump_insn 132 131 133 20 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 153)
            (pc))) /home/kai/git_repos/obme/resampling.cpp:26 612 {*jcc_1}
     (nil)
 -> 153)
;;  succ:       21 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 109 192
(note 133 132 134 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 134 133 135 21 (set (reg:SI 0 ax [192])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 y+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:26 90 {*movsi_internal}
     (nil))
(insn 135 134 136 21 (parallel [
            (set (reg:SI 0 ax [orig:109 D.2483 ] [109])
                (plus:SI (reg:SI 0 ax [192])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:26 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 y+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 136 135 137 21 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:109 D.2483 ] [109])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [0 picheight+0 S4 A32]))) /home/kai/git_repos/obme/resampling.cpp:26 7 {*cmpsi_1}
     (nil))
(jump_insn 137 136 138 21 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 153)
            (pc))) /home/kai/git_repos/obme/resampling.cpp:26 612 {*jcc_1}
     (nil)
 -> 153)
;;  succ:       22 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 110 111 112 113 114 115 116 193 194 195 196
(note 138 137 139 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 22 (set (reg:SI 0 ax [193])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 x+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:26 90 {*movsi_internal}
     (nil))
(insn 140 139 141 22 (parallel [
            (set (reg:SI 1 dx [orig:110 D.2483 ] [110])
                (plus:SI (reg:SI 0 ax [193])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:26 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [0 x+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 141 140 142 22 (set (reg:SI 0 ax [194])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 y+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:26 90 {*movsi_internal}
     (nil))
(insn 142 141 143 22 (parallel [
            (set (reg:SI 0 ax [orig:111 D.2483 ] [111])
                (plus:SI (reg:SI 0 ax [194])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:26 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 y+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 143 142 144 22 (parallel [
            (set (reg:SI 0 ax [orig:112 D.2483 ] [112])
                (mult:SI (reg:SI 0 ax [orig:111 D.2483 ] [111])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -76 [0xffffffffffffffb4])) [0 picwidth+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:26 305 {*mulsi3_1}
     (nil))
(insn 144 143 145 22 (parallel [
            (set (reg:SI 0 ax [orig:113 D.2483 ] [113])
                (plus:SI (reg:SI 0 ax [orig:112 D.2483 ] [112])
                    (reg:SI 1 dx [orig:110 D.2483 ] [110])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:26 217 {*addsi_1}
     (nil))
(insn 145 144 146 22 (set (reg:DI 1 dx [orig:114 D.2484 ] [114])
        (sign_extend:DI (reg:SI 0 ax [orig:113 D.2483 ] [113]))) /home/kai/git_repos/obme/resampling.cpp:26 142 {*extendsidi2_rex64}
     (nil))
(insn 146 145 147 22 (set (reg/f:DI 0 ax [195])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 source+0 S8 A64])) /home/kai/git_repos/obme/resampling.cpp:26 89 {*movdi_internal}
     (nil))
(insn 147 146 148 22 (parallel [
            (set (reg/f:DI 0 ax [orig:115 D.2485 ] [115])
                (plus:DI (reg/f:DI 0 ax [195])
                    (reg:DI 1 dx [orig:114 D.2484 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:26 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 source+0 S8 A64])
            (reg:DI 1 dx [orig:114 D.2484 ] [114]))
        (nil)))
(insn 148 147 149 22 (set (reg:QI 0 ax [orig:116 D.2486 ] [116])
        (mem:QI (reg/f:DI 0 ax [orig:115 D.2485 ] [115]) [0 *_60+0 S1 A8])) /home/kai/git_repos/obme/resampling.cpp:26 93 {*movqi_internal}
     (nil))
(insn 149 148 150 22 (set (reg:SI 0 ax [196])
        (sign_extend:SI (reg:QI 0 ax [orig:116 D.2486 ] [116]))) /home/kai/git_repos/obme/resampling.cpp:26 148 {extendqisi2}
     (nil))
(insn 150 149 253 22 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 d+0 S4 A32])
        (reg:SI 0 ax [196])) /home/kai/git_repos/obme/resampling.cpp:26 90 {*movsi_internal}
     (nil))
(jump_insn 253 150 254 22 (set (pc)
        (label_ref 157)) /home/kai/git_repos/obme/resampling.cpp:26 654 {jump}
     (nil)
 -> 157)
;;  succ:       24 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 254 253 153)
;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20
;;              21
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 197
(code_label 153 254 154 23 12 "" [2 uses])
(note 154 153 155 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 155 154 156 23 (set (reg:SI 0 ax [197])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 a+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:27 90 {*movsi_internal}
     (nil))
(insn 156 155 157 23 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 d+0 S4 A32])
        (reg:SI 0 ax [197])) /home/kai/git_repos/obme/resampling.cpp:27 90 {*movsi_internal}
     (nil))
;;  succ:       24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;;              22 [100.0%] 
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227
(code_label 157 156 158 24 13 "" [1 uses])
(note 158 157 159 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 159 158 160 24 (set (reg:SI 0 ax [198])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:29 90 {*movsi_internal}
     (nil))
(insn 160 159 161 24 (parallel [
            (set (reg:SI 1 dx [orig:117 D.2483 ] [117])
                (ashift:SI (reg:SI 0 ax [198])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:29 511 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 161 160 162 24 (set (reg:SI 0 ax [199])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:29 90 {*movsi_internal}
     (nil))
(insn 162 161 163 24 (parallel [
            (set (reg:SI 0 ax [orig:118 D.2483 ] [118])
                (ashift:SI (reg:SI 0 ax [199])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:29 511 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 163 162 164 24 (parallel [
            (set (reg:SI 0 ax [orig:119 D.2483 ] [119])
                (mult:SI (reg:SI 0 ax [orig:118 D.2483 ] [118])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 buffer_r+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:29 305 {*mulsi3_1}
     (nil))
(insn 164 163 165 24 (parallel [
            (set (reg:SI 0 ax [orig:120 D.2483 ] [120])
                (plus:SI (reg:SI 0 ax [orig:119 D.2483 ] [119])
                    (reg:SI 1 dx [orig:117 D.2483 ] [117])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:29 217 {*addsi_1}
     (nil))
(insn 165 164 166 24 (set (reg:DI 1 dx [orig:121 D.2484 ] [121])
        (sign_extend:DI (reg:SI 0 ax [orig:120 D.2483 ] [120]))) /home/kai/git_repos/obme/resampling.cpp:29 142 {*extendsidi2_rex64}
     (nil))
(insn 166 165 167 24 (set (reg/f:DI 0 ax [200])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 buffer+0 S8 A64])) /home/kai/git_repos/obme/resampling.cpp:29 89 {*movdi_internal}
     (nil))
(insn 167 166 168 24 (parallel [
            (set (reg/f:DI 0 ax [orig:122 D.2485 ] [122])
                (plus:DI (reg/f:DI 0 ax [200])
                    (reg:DI 1 dx [orig:121 D.2484 ] [121])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:29 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 buffer+0 S8 A64])
            (reg:DI 1 dx [orig:121 D.2484 ] [121]))
        (nil)))
(insn 168 167 169 24 (set (reg:SI 1 dx [201])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 a+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:29 90 {*movsi_internal}
     (nil))
(insn 169 168 170 24 (set (reg:QI 1 dx [orig:123 D.2486 ] [123])
        (reg:QI 1 dx [201])) /home/kai/git_repos/obme/resampling.cpp:29 93 {*movqi_internal}
     (nil))
(insn 170 169 171 24 (set (mem:QI (reg/f:DI 0 ax [orig:122 D.2485 ] [122]) [0 *_70+0 S1 A8])
        (reg:QI 1 dx [orig:123 D.2486 ] [123])) /home/kai/git_repos/obme/resampling.cpp:29 93 {*movqi_internal}
     (nil))
(insn 171 170 172 24 (set (reg:SI 0 ax [202])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:30 90 {*movsi_internal}
     (nil))
(insn 172 171 173 24 (parallel [
            (set (reg:SI 0 ax [orig:124 D.2483 ] [124])
                (ashift:SI (reg:SI 0 ax [202])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:30 511 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 173 172 174 24 (parallel [
            (set (reg:SI 1 dx [orig:125 D.2483 ] [125])
                (plus:SI (reg:SI 0 ax [orig:124 D.2483 ] [124])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:30 217 {*addsi_1}
     (nil))
(insn 174 173 175 24 (set (reg:SI 0 ax [203])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:30 90 {*movsi_internal}
     (nil))
(insn 175 174 176 24 (parallel [
            (set (reg:SI 0 ax [orig:126 D.2483 ] [126])
                (ashift:SI (reg:SI 0 ax [203])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:30 511 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 176 175 177 24 (parallel [
            (set (reg:SI 0 ax [orig:127 D.2483 ] [127])
                (mult:SI (reg:SI 0 ax [orig:126 D.2483 ] [126])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 buffer_r+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:30 305 {*mulsi3_1}
     (nil))
(insn 177 176 178 24 (parallel [
            (set (reg:SI 0 ax [orig:128 D.2483 ] [128])
                (plus:SI (reg:SI 0 ax [orig:127 D.2483 ] [127])
                    (reg:SI 1 dx [orig:125 D.2483 ] [125])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:30 217 {*addsi_1}
     (nil))
(insn 178 177 179 24 (set (reg:DI 1 dx [orig:129 D.2484 ] [129])
        (sign_extend:DI (reg:SI 0 ax [orig:128 D.2483 ] [128]))) /home/kai/git_repos/obme/resampling.cpp:30 142 {*extendsidi2_rex64}
     (nil))
(insn 179 178 180 24 (set (reg/f:DI 0 ax [204])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 buffer+0 S8 A64])) /home/kai/git_repos/obme/resampling.cpp:30 89 {*movdi_internal}
     (nil))
(insn 180 179 181 24 (parallel [
            (set (reg/f:DI 1 dx [orig:130 D.2485 ] [130])
                (plus:DI (reg:DI 1 dx [orig:129 D.2484 ] [129])
                    (reg/f:DI 0 ax [204])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:30 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 buffer+0 S8 A64])
            (reg:DI 1 dx [orig:129 D.2484 ] [129]))
        (nil)))
(insn 181 180 182 24 (set (reg:SI 2 cx [205])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 a+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:30 90 {*movsi_internal}
     (nil))
(insn 182 181 183 24 (set (reg:SI 0 ax [206])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 b+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:30 90 {*movsi_internal}
     (nil))
(insn 183 182 267 24 (parallel [
            (set (reg:SI 0 ax [orig:131 D.2483 ] [131])
                (plus:SI (reg:SI 0 ax [206])
                    (reg:SI 2 cx [205])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:30 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 a+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 b+0 S4 A32]))
        (nil)))
(insn 267 183 184 24 (set (reg:SI 2 cx [207])
        (reg:SI 0 ax [orig:131 D.2483 ] [131])) /home/kai/git_repos/obme/resampling.cpp:30 90 {*movsi_internal}
     (nil))
(insn 184 267 185 24 (parallel [
            (set (reg:SI 2 cx [207])
                (lshiftrt:SI (reg:SI 2 cx [207])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:30 544 {*lshrsi3_1}
     (nil))
(insn 185 184 186 24 (parallel [
            (set (reg:SI 0 ax [208])
                (plus:SI (reg:SI 0 ax [orig:131 D.2483 ] [131])
                    (reg:SI 2 cx [207])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:30 217 {*addsi_1}
     (nil))
(insn 186 185 188 24 (parallel [
            (set (reg:SI 0 ax [209])
                (ashiftrt:SI (reg:SI 0 ax [208])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:30 545 {*ashrsi3_1}
     (nil))
(insn 188 186 189 24 (set (reg:QI 0 ax [orig:133 D.2486 ] [133])
        (reg:QI 0 ax [orig:132 D.2483 ] [132])) /home/kai/git_repos/obme/resampling.cpp:30 93 {*movqi_internal}
     (nil))
(insn 189 188 190 24 (set (mem:QI (reg/f:DI 1 dx [orig:130 D.2485 ] [130]) [0 *_79+0 S1 A8])
        (reg:QI 0 ax [orig:133 D.2486 ] [133])) /home/kai/git_repos/obme/resampling.cpp:30 93 {*movqi_internal}
     (nil))
(insn 190 189 191 24 (set (reg:SI 0 ax [210])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:31 90 {*movsi_internal}
     (nil))
(insn 191 190 192 24 (parallel [
            (set (reg:SI 1 dx [orig:134 D.2483 ] [134])
                (ashift:SI (reg:SI 0 ax [210])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:31 511 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 192 191 193 24 (set (reg:SI 0 ax [211])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:31 90 {*movsi_internal}
     (nil))
(insn 193 192 194 24 (parallel [
            (set (reg:SI 0 ax [orig:135 D.2483 ] [135])
                (ashift:SI (reg:SI 0 ax [211])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:31 511 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 194 193 195 24 (parallel [
            (set (reg:SI 0 ax [orig:136 D.2483 ] [136])
                (plus:SI (reg:SI 0 ax [orig:135 D.2483 ] [135])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:31 217 {*addsi_1}
     (nil))
(insn 195 194 196 24 (parallel [
            (set (reg:SI 0 ax [orig:137 D.2483 ] [137])
                (mult:SI (reg:SI 0 ax [orig:136 D.2483 ] [136])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 buffer_r+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:31 305 {*mulsi3_1}
     (nil))
(insn 196 195 197 24 (parallel [
            (set (reg:SI 0 ax [orig:138 D.2483 ] [138])
                (plus:SI (reg:SI 0 ax [orig:137 D.2483 ] [137])
                    (reg:SI 1 dx [orig:134 D.2483 ] [134])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:31 217 {*addsi_1}
     (nil))
(insn 197 196 198 24 (set (reg:DI 1 dx [orig:139 D.2484 ] [139])
        (sign_extend:DI (reg:SI 0 ax [orig:138 D.2483 ] [138]))) /home/kai/git_repos/obme/resampling.cpp:31 142 {*extendsidi2_rex64}
     (nil))
(insn 198 197 199 24 (set (reg/f:DI 0 ax [212])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 buffer+0 S8 A64])) /home/kai/git_repos/obme/resampling.cpp:31 89 {*movdi_internal}
     (nil))
(insn 199 198 200 24 (parallel [
            (set (reg/f:DI 1 dx [orig:140 D.2485 ] [140])
                (plus:DI (reg:DI 1 dx [orig:139 D.2484 ] [139])
                    (reg/f:DI 0 ax [212])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:31 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 buffer+0 S8 A64])
            (reg:DI 1 dx [orig:139 D.2484 ] [139]))
        (nil)))
(insn 200 199 201 24 (set (reg:SI 2 cx [213])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 a+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:31 90 {*movsi_internal}
     (nil))
(insn 201 200 202 24 (set (reg:SI 0 ax [214])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 c+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:31 90 {*movsi_internal}
     (nil))
(insn 202 201 269 24 (parallel [
            (set (reg:SI 0 ax [orig:141 D.2483 ] [141])
                (plus:SI (reg:SI 0 ax [214])
                    (reg:SI 2 cx [213])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:31 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 a+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 c+0 S4 A32]))
        (nil)))
(insn 269 202 203 24 (set (reg:SI 2 cx [215])
        (reg:SI 0 ax [orig:141 D.2483 ] [141])) /home/kai/git_repos/obme/resampling.cpp:31 90 {*movsi_internal}
     (nil))
(insn 203 269 204 24 (parallel [
            (set (reg:SI 2 cx [215])
                (lshiftrt:SI (reg:SI 2 cx [215])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:31 544 {*lshrsi3_1}
     (nil))
(insn 204 203 205 24 (parallel [
            (set (reg:SI 0 ax [216])
                (plus:SI (reg:SI 0 ax [orig:141 D.2483 ] [141])
                    (reg:SI 2 cx [215])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:31 217 {*addsi_1}
     (nil))
(insn 205 204 207 24 (parallel [
            (set (reg:SI 0 ax [217])
                (ashiftrt:SI (reg:SI 0 ax [216])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:31 545 {*ashrsi3_1}
     (nil))
(insn 207 205 208 24 (set (reg:QI 0 ax [orig:143 D.2486 ] [143])
        (reg:QI 0 ax [orig:142 D.2483 ] [142])) /home/kai/git_repos/obme/resampling.cpp:31 93 {*movqi_internal}
     (nil))
(insn 208 207 209 24 (set (mem:QI (reg/f:DI 1 dx [orig:140 D.2485 ] [140]) [0 *_90+0 S1 A8])
        (reg:QI 0 ax [orig:143 D.2486 ] [143])) /home/kai/git_repos/obme/resampling.cpp:31 93 {*movqi_internal}
     (nil))
(insn 209 208 210 24 (set (reg:SI 0 ax [218])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:32 90 {*movsi_internal}
     (nil))
(insn 210 209 211 24 (parallel [
            (set (reg:SI 0 ax [orig:144 D.2483 ] [144])
                (ashift:SI (reg:SI 0 ax [218])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:32 511 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 211 210 212 24 (parallel [
            (set (reg:SI 1 dx [orig:145 D.2483 ] [145])
                (plus:SI (reg:SI 0 ax [orig:144 D.2483 ] [144])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:32 217 {*addsi_1}
     (nil))
(insn 212 211 213 24 (set (reg:SI 0 ax [219])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:32 90 {*movsi_internal}
     (nil))
(insn 213 212 214 24 (parallel [
            (set (reg:SI 0 ax [orig:146 D.2483 ] [146])
                (ashift:SI (reg:SI 0 ax [219])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:32 511 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 214 213 215 24 (parallel [
            (set (reg:SI 0 ax [orig:147 D.2483 ] [147])
                (plus:SI (reg:SI 0 ax [orig:146 D.2483 ] [146])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:32 217 {*addsi_1}
     (nil))
(insn 215 214 216 24 (parallel [
            (set (reg:SI 0 ax [orig:148 D.2483 ] [148])
                (mult:SI (reg:SI 0 ax [orig:147 D.2483 ] [147])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 buffer_r+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:32 305 {*mulsi3_1}
     (nil))
(insn 216 215 217 24 (parallel [
            (set (reg:SI 0 ax [orig:149 D.2483 ] [149])
                (plus:SI (reg:SI 0 ax [orig:148 D.2483 ] [148])
                    (reg:SI 1 dx [orig:145 D.2483 ] [145])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:32 217 {*addsi_1}
     (nil))
(insn 217 216 218 24 (set (reg:DI 1 dx [orig:150 D.2484 ] [150])
        (sign_extend:DI (reg:SI 0 ax [orig:149 D.2483 ] [149]))) /home/kai/git_repos/obme/resampling.cpp:32 142 {*extendsidi2_rex64}
     (nil))
(insn 218 217 219 24 (set (reg/f:DI 0 ax [220])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 buffer+0 S8 A64])) /home/kai/git_repos/obme/resampling.cpp:32 89 {*movdi_internal}
     (nil))
(insn 219 218 220 24 (parallel [
            (set (reg/f:DI 1 dx [orig:151 D.2485 ] [151])
                (plus:DI (reg:DI 1 dx [orig:150 D.2484 ] [150])
                    (reg/f:DI 0 ax [220])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:32 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 buffer+0 S8 A64])
            (reg:DI 1 dx [orig:150 D.2484 ] [150]))
        (nil)))
(insn 220 219 221 24 (set (reg:SI 2 cx [221])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 a+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:32 90 {*movsi_internal}
     (nil))
(insn 221 220 222 24 (set (reg:SI 0 ax [222])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 b+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:32 90 {*movsi_internal}
     (nil))
(insn 222 221 223 24 (parallel [
            (set (reg:SI 2 cx [orig:152 D.2483 ] [152])
                (plus:SI (reg:SI 2 cx [221])
                    (reg:SI 0 ax [222])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:32 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 a+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 b+0 S4 A32]))
        (nil)))
(insn 223 222 224 24 (set (reg:SI 0 ax [223])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 c+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:32 90 {*movsi_internal}
     (nil))
(insn 224 223 225 24 (parallel [
            (set (reg:SI 2 cx [orig:153 D.2483 ] [153])
                (plus:SI (reg:SI 2 cx [orig:152 D.2483 ] [152])
                    (reg:SI 0 ax [223])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:32 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 2 cx [orig:152 D.2483 ] [152])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 c+0 S4 A32]))
        (nil)))
(insn 225 224 226 24 (set (reg:SI 0 ax [224])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 d+0 S4 A32])) /home/kai/git_repos/obme/resampling.cpp:32 90 {*movsi_internal}
     (nil))
(insn 226 225 228 24 (parallel [
            (set (reg:SI 0 ax [orig:154 D.2483 ] [154])
                (plus:SI (reg:SI 0 ax [224])
                    (reg:SI 2 cx [orig:153 D.2483 ] [153])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:32 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 2 cx [orig:153 D.2483 ] [153])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 d+0 S4 A32]))
        (nil)))
(insn 228 226 229 24 (parallel [
            (set (reg:SI 2 cx [226])
                (plus:SI (reg:SI 0 ax [225])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:32 217 {*addsi_1}
     (nil))
(insn 229 228 230 24 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 ax [225])
            (const_int 0 [0]))) /home/kai/git_repos/obme/resampling.cpp:32 3 {*cmpsi_ccno_1}
     (nil))
(insn 230 229 231 24 (set (reg:SI 0 ax [225])
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 2 cx [226])
            (reg:SI 0 ax [225]))) /home/kai/git_repos/obme/resampling.cpp:32 953 {*movsicc_noc}
     (nil))
(insn 231 230 233 24 (parallel [
            (set (reg:SI 0 ax [227])
                (ashiftrt:SI (reg:SI 0 ax [225])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:32 545 {*ashrsi3_1}
     (nil))
(insn 233 231 234 24 (set (reg:QI 0 ax [orig:156 D.2486 ] [156])
        (reg:QI 0 ax [orig:155 D.2483 ] [155])) /home/kai/git_repos/obme/resampling.cpp:32 93 {*movqi_internal}
     (nil))
(insn 234 233 235 24 (set (mem:QI (reg/f:DI 1 dx [orig:151 D.2485 ] [151]) [0 *_102+0 S1 A8])
        (reg:QI 0 ax [orig:156 D.2486 ] [156])) /home/kai/git_repos/obme/resampling.cpp:32 93 {*movqi_internal}
     (nil))
(insn 235 234 255 24 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:7 217 {*addsi_1}
     (nil))
(jump_insn 255 235 256 24 (set (pc)
        (label_ref 236)) /home/kai/git_repos/obme/resampling.cpp:7 654 {jump}
     (nil)
 -> 236)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 256 255 239)
;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 239 256 240 25 3 "" [1 uses])
(note 240 239 241 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 241 240 257 25 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /home/kai/git_repos/obme/resampling.cpp:6 217 {*addsi_1}
     (nil))
(jump_insn 257 241 258 25 (set (pc)
        (label_ref 242)) /home/kai/git_repos/obme/resampling.cpp:6 654 {jump}
     (nil)
 -> 242)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 258 257 260)
;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 26, flags: (NEW, RTL, MODIFIED)
;;  pred:       3
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 260 258 259 27 16 "" [1 uses])
(note 259 260 261 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 261 259 247 27 (const_int 0 [0]) /home/kai/git_repos/obme/resampling.cpp:34 684 {nop}
     (nil))
;;  succ:       26 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 [100.0%]  (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 247 261 248 26 1 "" [0 uses])
(note 248 247 262 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 262 248 0 NOTE_INSN_DELETED)
